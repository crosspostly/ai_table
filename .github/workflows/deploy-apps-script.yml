name: Deploy to Google Apps Script

on:
  push:
    branches:
      - web-interface-with-design
    paths:
      - 'table/**'
      - '.clasp-*.json'
      - '.github/workflows/deploy-apps-script.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install clasp
        run: npm install -g @google/clasp

      - name: Refresh OAuth Token
        run: |
          echo "üîÑ Refreshing access token using refresh_token..."
          echo '${{ secrets.CLASPRC_JSON }}' > /tmp/clasprc_original.json
          
          # Extract credentials (support both old and new format)
          if cat /tmp/clasprc_original.json | jq -e '.tokens.default' > /dev/null 2>&1; then
            # New format
            CLIENT_ID=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.client_id')
            CLIENT_SECRET=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.client_secret')
            REFRESH_TOKEN=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.refresh_token')
          else
            # Old format
            CLIENT_ID=$(cat /tmp/clasprc_original.json | jq -r '.oauth2ClientSettings.clientId')
            CLIENT_SECRET=$(cat /tmp/clasprc_original.json | jq -r '.oauth2ClientSettings.clientSecret')
            REFRESH_TOKEN=$(cat /tmp/clasprc_original.json | jq -r '.token.refresh_token')
          fi
          
          echo "Client ID: ${CLIENT_ID:0:20}..."
          echo "Refresh token: ${REFRESH_TOKEN:0:20}..."
          
          # Request new access token from Google
          RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$CLIENT_ID" \
            -d "client_secret=$CLIENT_SECRET" \
            -d "refresh_token=$REFRESH_TOKEN" \
            -d "grant_type=refresh_token")
          
          echo "Response: $(echo $RESPONSE | jq -c '.')"
          
          # Check for errors
          if echo "$RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
            echo "‚ùå Failed to refresh token:"
            echo "$RESPONSE" | jq '.'
            exit 1
          fi
          
          # Extract new access token
          NEW_ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          
          if [ -z "$NEW_ACCESS_TOKEN" ] || [ "$NEW_ACCESS_TOKEN" == "null" ]; then
            echo "‚ùå No access token in response"
            exit 1
          fi
          
          echo "‚úÖ Got new access token: ${NEW_ACCESS_TOKEN:0:20}..."
          
          # Save for next step
          echo "$NEW_ACCESS_TOKEN" > /tmp/new_access_token.txt

      - name: Setup clasp credentials
        run: |
          echo "Setting up clasp credentials..."
          echo '${{ secrets.CLASPRC_JSON }}' > ~/.clasprc.json
          
          # Validate JSON
          if ! cat ~/.clasprc.json | jq empty 2>/dev/null; then
            echo "‚ùå ERROR: Invalid JSON!"
            cat ~/.clasprc.json | head -c 200
            exit 1
          fi
          
          # Check format and convert if needed (new format -> old format)
          if cat ~/.clasprc.json | jq -e '.tokens.default' > /dev/null 2>&1; then
            echo "üîÑ Detected new clasp format, converting to old format..."
            cat ~/.clasprc.json | jq '{
              token: {
                access_token: .tokens.default.access_token,
                refresh_token: .tokens.default.refresh_token,
                scope: "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/script.webapp.deploy https://www.googleapis.com/auth/script.deployments",
                token_type: "Bearer",
                expiry_date: 9999999999999
              },
              oauth2ClientSettings: {
                clientId: .tokens.default.client_id,
                clientSecret: .tokens.default.client_secret,
                redirectUri: "http://localhost"
              },
              isLocalCreds: false
            }' > ~/.clasprc.json.new
            mv ~/.clasprc.json.new ~/.clasprc.json
            echo "‚úÖ Converted to old format"
          else
            echo "‚úÖ Already in old format"
          fi
          
          echo "Final .clasprc.json structure:"
          cat ~/.clasprc.json | jq 'keys'

      - name: Verify clasp login
        run: |
          echo "Verifying clasp authentication..."
          echo "Current .clasprc.json content:"
          cat ~/.clasprc.json | jq '.'
          echo ""
          echo "Testing clasp login status..."
          if clasp login --status 2>&1 | grep -q "logged in"; then
            echo "‚úÖ Clasp is authenticated"
          else
            echo "‚ùå Clasp authentication failed"
            echo "Trying to list projects to verify access..."
            clasp list || true
          fi

      - name: Deploy Server Project
        run: |
          echo "üì¶ Deploying Server project..."
          cp .clasp-server.json .clasp.json
          
          # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –í–°–Å —á—Ç–æ –ù–ï –Ω—É–∂–Ω–æ –í–ù–ï table/ (—á—Ç–æ–±—ã clasp –∏—Ö –Ω–µ –≤–∏–¥–µ–ª)
          if [ -f table/appsscript.json ]; then
            mv table/appsscript.json /tmp/appsscript.json.backup
          fi
          mv table/server/appsscript.json /tmp/server-appsscript.json.backup
          mv table/client /tmp/client.backup
          mv table/web /tmp/web.backup
          echo "Moved client/, web/, and appsscript files OUTSIDE table/"
          
          # –°–æ–∑–¥–∞—Ç—å server appsscript.json –≤ –∫–æ—Ä–Ω–µ table/
          cp /tmp/server-appsscript.json.backup table/appsscript.json
          echo "Using server appsscript.json"
          
          echo "Current table/ structure (only server + shared):"
          ls -la table/
          
          echo "Pushing to Script ID: 15tMLr3G3kbBKjMVi7r2XqPR3kBSWO0jCDYHijIhy9ko2rsIceG8tLoYa"
          clasp push -f
          
          # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë –æ–±—Ä–∞—Ç–Ω–æ
          rm table/appsscript.json
          mv /tmp/server-appsscript.json.backup table/server/appsscript.json
          mv /tmp/client.backup table/client
          mv /tmp/web.backup table/web
          if [ -f /tmp/appsscript.json.backup ]; then
            mv /tmp/appsscript.json.backup table/appsscript.json
          fi
          echo "Restored all files"
          
          echo "‚úÖ Server deployment complete!"

      - name: Deploy Client Project
        run: |
          echo "üì¶ Deploying Client project (Container-bound to Google Sheets)..."
          cp .clasp-client.json .clasp.json
          
          # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—å server/appsscript.json —á—Ç–æ–±—ã clasp –µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª
          if [ -f table/server/appsscript.json ]; then
            mv table/server/appsscript.json table/server/appsscript.json.server-backup
            echo "Temporarily moved table/server/appsscript.json"
          fi
          
          echo "Using root appsscript.json for client"
          echo "Pushing to Script ID: 1DdlYfvo0EfEA1O1nb5DRI0o-WJoIivtfIPNSE1C1bt3IvvWC91sGE6Xs"
          clasp push -f
          
          # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å server/appsscript.json
          if [ -f table/server/appsscript.json.server-backup ]; then
            mv table/server/appsscript.json.server-backup table/server/appsscript.json
            echo "Restored server appsscript.json"
          fi
          
          echo "‚úÖ Client deployment complete!"

      - name: Summary
        run: |
          echo "üéâ All deployments completed successfully!"
          echo "üìã Server: table/server/ + table/shared/ ‚Üí Script ID 15tMLr3G3kbBKjMVi7r2XqPR3kBSWO0jCDYHijIhy9ko2rsIceG8tLoYa"
          echo "üìã Client: table/client/ + table/shared/ + table/web/ ‚Üí Script ID 1DdlYfvo0EfEA1O1nb5DRI0o-WJoIivtfIPNSE1C1bt3IvvWC91sGE6Xs"
