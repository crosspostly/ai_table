name: Deploy to Google Apps Script

on:
  push:
    branches:
      - web-interface-with-design
    paths:
      - 'table/**'
      - '.clasp-*.json'
      - '.github/workflows/deploy-apps-script.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install clasp
        run: npm install -g @google/clasp

      - name: Refresh OAuth Token
        run: |
          echo "üîÑ Refreshing access token using refresh_token..."
          echo '${{ secrets.CLASPRC_JSON }}' > /tmp/clasprc_original.json
          
          # Extract credentials (support both old and new format)
          if cat /tmp/clasprc_original.json | jq -e '.tokens.default' > /dev/null 2>&1; then
            # New format
            CLIENT_ID=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.client_id')
            CLIENT_SECRET=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.client_secret')
            REFRESH_TOKEN=$(cat /tmp/clasprc_original.json | jq -r '.tokens.default.refresh_token')
          else
            # Old format
            CLIENT_ID=$(cat /tmp/clasprc_original.json | jq -r '.oauth2ClientSettings.clientId')
            CLIENT_SECRET=$(cat /tmp/clasprc_original.json | jq -r '.oauth2ClientSettings.clientSecret')
            REFRESH_TOKEN=$(cat /tmp/clasprc_original.json | jq -r '.token.refresh_token')
          fi
          
          echo "Client ID: ${CLIENT_ID:0:20}..."
          echo "Refresh token: ${REFRESH_TOKEN:0:20}..."
          
          # Request new access token from Google
          RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$CLIENT_ID" \
            -d "client_secret=$CLIENT_SECRET" \
            -d "refresh_token=$REFRESH_TOKEN" \
            -d "grant_type=refresh_token")
          
          echo "Response: $(echo $RESPONSE | jq -c '.')"
          
          # Check for errors
          if echo "$RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
            echo "‚ùå Failed to refresh token:"
            echo "$RESPONSE" | jq '.'
            exit 1
          fi
          
          # Extract new access token
          NEW_ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          
          if [ -z "$NEW_ACCESS_TOKEN" ] || [ "$NEW_ACCESS_TOKEN" == "null" ]; then
            echo "‚ùå No access token in response"
            exit 1
          fi
          
          echo "‚úÖ Got new access token: ${NEW_ACCESS_TOKEN:0:20}..."
          
          # Save for next step
          echo "$NEW_ACCESS_TOKEN" > /tmp/new_access_token.txt

      - name: Setup clasp credentials
        env:
          CLASPRC_JSON: ${{ secrets.CLASPRC_JSON }}
        run: |
          echo "Setting up clasp credentials with FRESH token..."
          echo "$CLASPRC_JSON" > ~/.clasprc.json
          
          # Verify file was written
          if [ ! -s ~/.clasprc.json ]; then
            echo "‚ùå ERROR: .clasprc.json is empty or does not exist!"
            echo "File size: $(wc -c < ~/.clasprc.json 2>/dev/null || echo '0') bytes"
            exit 1
          fi
          echo "‚úÖ .clasprc.json written (size: $(wc -c < ~/.clasprc.json) bytes)"
          
          # Validate JSON
          if ! cat ~/.clasprc.json | jq empty 2>/dev/null; then
            echo "‚ùå ERROR: Invalid JSON!"
            cat ~/.clasprc.json | head -c 200
            exit 1
          fi
          
          # Get the refreshed access token
          NEW_ACCESS_TOKEN=$(cat /tmp/new_access_token.txt)
          echo "‚úÖ Using refreshed access token: ${NEW_ACCESS_TOKEN:0:30}..."
          
          # Check format and convert if needed (new format -> old format) WITH NEW TOKEN
          if cat ~/.clasprc.json | jq -e '.tokens.default' > /dev/null 2>&1; then
            echo "üîÑ Detected new clasp format, converting to old format with FRESH token..."
            cat ~/.clasprc.json | jq --arg token "$NEW_ACCESS_TOKEN" '{
              token: {
                access_token: $token,
                refresh_token: .tokens.default.refresh_token,
                scope: "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/script.webapp.deploy https://www.googleapis.com/auth/script.deployments",
                token_type: "Bearer",
                expiry_date: 9999999999999
              },
              oauth2ClientSettings: {
                clientId: .tokens.default.client_id,
                clientSecret: .tokens.default.client_secret,
                redirectUri: "http://localhost"
              },
              isLocalCreds: false
            }' > ~/.clasprc.json.new
            mv ~/.clasprc.json.new ~/.clasprc.json
            echo "‚úÖ Converted to old format with FRESH token"
          else
            echo "üîÑ Updating OLD format with FRESH token..."
            cat ~/.clasprc.json | jq --arg token "$NEW_ACCESS_TOKEN" '.token.access_token = $token' > ~/.clasprc.json.new
            mv ~/.clasprc.json.new ~/.clasprc.json
            echo "‚úÖ Updated with FRESH token"
          fi
          
          echo "Final .clasprc.json structure:"
          cat ~/.clasprc.json | jq 'keys'
          echo "Token verification (first 30 chars): $(cat ~/.clasprc.json | jq -r '.token.access_token' | head -c 30)..."

      - name: Verify clasp login
        run: |
          echo "Verifying clasp authentication..."
          echo "Current .clasprc.json content:"
          cat ~/.clasprc.json | jq '.'
          echo ""
          echo "Testing clasp login status..."
          if clasp login --status 2>&1 | grep -q "logged in"; then
            echo "‚úÖ Clasp is authenticated"
          else
            echo "‚ùå Clasp authentication failed"
            echo "Trying to list projects to verify access..."
            clasp list || true
          fi

      - name: Update Deploy Timestamps
        run: |
          echo "üìÖ Updating deployment timestamps..."
          
          # Get current timestamp in ISO 8601 format
          DEPLOY_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          DEPLOY_BUILD=$(date -u +"%Y%m%d%H%M%S")
          
          echo "Timestamp: $DEPLOY_TIMESTAMP"
          echo "Build: $DEPLOY_BUILD"
          
          # Update version.json
          sed -i "s/DEPLOY_TIMESTAMP_PLACEHOLDER/$DEPLOY_TIMESTAMP/g" version.json
          sed -i "s/DEPLOY_BUILD_NUMBER_PLACEHOLDER/$DEPLOY_BUILD/g" version.json
          
          # Update Menu.gs  
          sed -i "s/DEPLOY_TIMESTAMP_PLACEHOLDER/$DEPLOY_TIMESTAMP/g" table/client/Menu.gs
          
          echo "‚úÖ Timestamps updated in version.json and Menu.gs"
          echo ""
          echo "Updated version.json:"
          grep -A 2 "updateTimestamp" version.json
          echo ""
          echo "Updated Menu.gs:"
          grep "var deployTimestamp" table/client/Menu.gs

      - name: Deploy Server Project
        run: |
          echo "üì¶ Deploying Server project..."
          
          cp .clasp-server.json .clasp.json
          
          echo "=== PREPARING SERVER DEPLOYMENT ==="
          echo "Copying shared files into server directory..."
          
          # Copy shared files directly into server directory (no subdirectory)
          cp table/shared/*.gs table/server/
          echo "‚úÖ Copied shared files to table/server/"
          
          # Verify appsscript.json exists in server
          if [ ! -f table/server/appsscript.json ]; then
            echo "‚ùå ERROR: table/server/appsscript.json not found!"
            exit 1
          fi
          echo "‚úÖ Found table/server/appsscript.json"
          
          echo ""
          echo "=== Files ready for upload ==="
          ls -lh table/server/*.gs table/server/appsscript.json
          echo ""
          echo "Total files: $(find table/server -type f \( -name "*.gs" -o -name "appsscript.json" \) | wc -l)"
          echo ""
          
          echo "Pushing to Script ID: 1ncX8FGqT7QP-LxqrRJu0_z_FmUTGsbqmbWDCRePLfHgW8x85bX_Yu9uP"
          echo ""
          echo "‚ö†Ô∏è  Trying DIRECT API upload instead of clasp (clasp push was not working)"
          echo ""
          
          # Get access token
          echo "DEBUG: Extracting access token from ~/.clasprc.json..."
          if [ ! -f ~/.clasprc.json ]; then
            echo "‚ùå ERROR: ~/.clasprc.json does not exist!"
            exit 1
          fi
          
          echo "DEBUG: .clasprc.json file size: $(wc -c < ~/.clasprc.json) bytes"
          echo "DEBUG: .clasprc.json structure: $(cat ~/.clasprc.json | jq -c 'keys' 2>/dev/null || echo 'INVALID JSON')"
          
          ACCESS_TOKEN=$(cat ~/.clasprc.json | jq -r '.token.access_token')
          
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "‚ùå ERROR: access_token is empty or null!"
            echo "DEBUG: Trying to extract token from different path..."
            ACCESS_TOKEN=$(cat ~/.clasprc.json | jq -r '.token.access_token // empty')
            if [ -z "$ACCESS_TOKEN" ]; then
              echo "‚ùå FATAL: Cannot extract access token!"
              echo "File structure:"
              cat ~/.clasprc.json | jq . 2>/dev/null || cat ~/.clasprc.json
              exit 1
            fi
          fi
          
          echo "‚úÖ Access token extracted (length: ${#ACCESS_TOKEN} chars)"
          echo "Token starts with: ${ACCESS_TOKEN:0:10}..."
          
          # Build files JSON for API
          echo "Building file list for API upload..."
          FILES_JSON='{"files": ['
          FIRST=true
          
          for file in $(find table/server -type f \( -name "*.gs" -o -name "appsscript.json" \)); do
            if [ "$FIRST" = false ]; then
              FILES_JSON+=','
            fi
            FIRST=false
            
            # Remove table/server/ prefix to get just the filename
            REL_PATH=${file#table/server/}
            
            # Determine file type and REMOVE extension for API
            if [[ "$file" == *.gs ]]; then
              FILE_TYPE="SERVER_JS"
              REL_PATH="${REL_PATH%.gs}"  # Remove .gs extension!
            elif [[ "$file" == *.html ]]; then
              FILE_TYPE="HTML"
              REL_PATH="${REL_PATH%.html}"  # Remove .html extension!
            elif [[ "$file" == *appsscript.json ]]; then
              FILE_TYPE="JSON"
              REL_PATH="appsscript"
            fi
            
            # Read and escape content (use -s NOT -Rs to preserve actual newlines)
            CONTENT=$(cat "$file" | jq -R -s .)
            
            FILES_JSON+="{\"name\": \"$REL_PATH\", \"type\": \"$FILE_TYPE\", \"source\": $CONTENT}"
            echo "  Added: $REL_PATH ($FILE_TYPE)"
          done
          
          FILES_JSON+=']}'
          
          echo ""
          echo "Saving payload to file..."
          echo "$FILES_JSON" > /tmp/api-payload.json
          echo "Payload size: $(wc -c < /tmp/api-payload.json) bytes"
          echo ""
          echo "Total files: $(echo "$FILES_JSON" | jq '.files | length')"
          echo ""
          echo "Uploading via Apps Script API..."
          
          RESPONSE=$(curl -s -X PUT \
            "https://script.googleapis.com/v1/projects/1ncX8FGqT7QP-LxqrRJu0_z_FmUTGsbqmbWDCRePLfHgW8x85bX_Yu9uP/content" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d @/tmp/api-payload.json)
          
          if echo "$RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
            echo "‚ùå API Upload failed:"
            echo "$RESPONSE" | jq .
            echo ""
            echo "Falling back to clasp push..."
            clasp push -f 2>&1 | tee /tmp/clasp-push.log || {
              echo ""
              echo "‚ùå CLASP PUSH FAILED!"
              echo "Error output:"
              cat /tmp/clasp-push.log
              echo ""
              echo "Checking what clasp tried to upload:"
              echo "Files in rootDir:"
              find table -type f -name "*.gs" -o -name "*.json" -o -name "*.html" | sort
              exit 1
            }
          else
            echo "‚úÖ API Upload successful!"
            echo "$RESPONSE" | jq .
          fi
          
          echo ""
          echo "=== POST-PUSH VERIFICATION ==="
          echo "‚úÖ Server push complete! Files should be at:"
          echo "https://script.google.com/home/projects/1ncX8FGqT7QP-LxqrRJu0_z_FmUTGsbqmbWDCRePLfHgW8x85bX_Yu9uP/edit"
          echo ""
          echo "‚ö†Ô∏è  Hard refresh (Ctrl+F5 / Cmd+Shift+R) to see changes!"
          echo ""
          echo "‚úÖ Server deployment complete!"

      - name: Deploy Client Project
        run: |
          echo "üì¶ Deploying Client project (Container-bound to Google Sheets)..."
          cp .clasp-client.json .clasp.json
          
          echo "=== PREPARING CLIENT DEPLOYMENT ==="
          
          # üö® CRITICAL: Copy appsscript.json to client directory FIRST
          echo "Copying appsscript.json to client directory..."
          if [ ! -f table/appsscript.json ]; then
            echo "‚ùå ERROR: table/appsscript.json not found!"
            exit 1
          fi
          cp table/appsscript.json table/client/
          echo "‚úÖ Copied appsscript.json to table/client/"
          
          echo "Copying shared files into client directory..."
          # Copy shared files directly into client directory
          cp table/shared/*.gs table/client/
          echo "‚úÖ Copied shared files to table/client/"
          
          # Copy web files directly into client directory  
          echo "üìÇ Copying web files..."
          echo "Available web files:"
          ls -la table/web/ || echo "No web directory found"
          
          if ls table/web/*.gs 1> /dev/null 2>&1; then
            cp table/web/*.gs table/client/
            echo "‚úÖ Copied GS files: $(ls table/web/*.gs | wc -l) files"
            ls -la table/client/*.gs | grep -E "(CollectConfig|WebInterface)"
          else
            echo "‚ùå No GS files found in table/web/"
          fi
          
          if ls table/web/*.html 1> /dev/null 2>&1; then
            cp table/web/*.html table/client/
            echo "‚úÖ Copied HTML files: $(ls table/web/*.html | wc -l) files"
            ls -la table/client/*.html | grep -E "(CollectConfig|WebApp)"
          else
            echo "‚ùå No HTML files found in table/web/"
          fi
          
          # üîí SECURITY CHECK: Ensure NO server files in client!
          echo "üîç Security check: verifying NO server files in client..."
          if ls table/client/server* 2>/dev/null || ls table/client/*Server*.gs 2>/dev/null | grep -v ClientUtilities 2>/dev/null; then
            echo "‚ùå SECURITY ERROR: Server files found in client directory!"
            ls -la table/client/server* table/client/*Server*.gs 2>/dev/null || true
            exit 1
          fi
          echo "‚úÖ Security check passed: no server files in client"
          
          echo ""
          echo "Files in CLIENT directory:"
          find table/client -type f \( -name "*.gs" -o -name "*.html" \) | sort
          echo ""
          
          echo "Pushing to Script ID: 1DdlYfvo0EfEA1O1nb5DRI0o-WJoIivtfIPNSE1C1bt3IvvWC91sGE6Xs"
          echo "Using clasp push for container-bound script..."
          
          echo "üìã BEFORE PUSH - Files being uploaded:"
          find table/client -type f \( -name "*.gs" -o -name "*.html" -o -name "*.json" \) | sort
          echo ""
          echo "üîç SPECIFIC FILE STATUS CHECK:"
          echo "CollectConfigUI files:"
          ls -la table/client/CollectConfig* 2>/dev/null || echo "‚ùå No CollectConfigUI files found in table/client/"
          echo "AIConstructorUI files:"
          ls -la table/client/AIConstructor* 2>/dev/null || echo "‚ùå No AIConstructorUI files found in table/client/"
          echo "WebInterface files:"
          ls -la table/client/WebInterface* 2>/dev/null || echo "‚ùå No WebInterface files found in table/client/"
          echo ""
          echo "üìä FILE COUNT SUMMARY:"
          echo "Total GS files: $(find table/client -name "*.gs" | wc -l)"
          echo "Total HTML files: $(find table/client -name "*.html" | wc -l)"
          echo "Total JSON files: $(find table/client -name "*.json" | wc -l)"
          echo ""
          
          clasp push -f 2>&1 | tee /tmp/clasp-client-push.log || {
            echo ""
            echo "‚ùå CLIENT CLASP PUSH FAILED!"
            echo "Error output:"
            cat /tmp/clasp-client-push.log
            echo ""
            echo "üìÅ Files that clasp tried to push:"
            find table/client -type f \( -name "*.gs" -o -name "*.html" -o -name "*.json" \) | sort
            exit 1
          }
          
          echo "üìã AFTER PUSH - Success! Uploaded files:"
          grep -i "Pushed\|Updated\|Created" /tmp/clasp-client-push.log || echo "No specific file info in clasp output"
          
          # Clean up copied files (only shared, keep web files!)
          echo "Cleaning up copied shared files..."
          rm -f table/client/Constants.gs table/client/LoggingService.gs table/client/Utils.gs
          rm -f table/client/appsscript.json
          # ‚úÖ Keep ALL web files: CollectConfigUI.gs/html, WebInterface.gs, etc.
          echo "‚úÖ Cleaned up shared files (kept all web files)"
          
          echo "‚úÖ Client deployment complete!"

      - name: Summary
        run: |
          echo "üéâ All deployments completed successfully!"
          echo "üìã Server: table/server/ + table/shared/ ‚Üí Script ID 1ncX8FGqT7QP-LxqrRJu0_z_FmUTGsbqmbWDCRePLfHgW8x85bX_Yu9uP"
          echo "üìã Client: table/client/ + table/shared/ + table/web/ ‚Üí Script ID 1DdlYfvo0EfEA1O1nb5DRI0o-WJoIivtfIPNSE1C1bt3IvvWC91sGE6Xs"
