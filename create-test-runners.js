#!/usr/bin/env node

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö test runners –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const fs = require('fs');
const path = require('path');

console.log('üõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ test runners...\n');

// 1. run-syntax-check.js
const syntaxCheckContent = `#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö .gs —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');
const { glob } = require('glob');

console.log('\\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –í–°–ï–• .gs –§–ê–ô–õ–û–í                  ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\\n');

const results = {
  total: 0,
  passed: 0,
  failed: 0,
  details: []
};

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .gs —Ñ–∞–π–ª—ã
const files = [
  ...fs.readdirSync(path.join(__dirname, 'table/client')).filter(f => f.endsWith('.gs')).map(f => 'table/client/' + f),
  ...fs.readdirSync(path.join(__dirname, 'table/server')).filter(f => f.endsWith('.gs')).map(f => 'table/server/' + f),
  ...fs.readdirSync(path.join(__dirname, 'table/shared')).filter(f => f.endsWith('.gs')).map(f => 'table/shared/' + f),
  ...fs.readdirSync(path.join(__dirname, 'table/tests')).filter(f => f.endsWith('.gs')).map(f => 'table/tests/' + f),
  ...fs.readdirSync(path.join(__dirname, 'table/web')).filter(f => f.endsWith('.gs')).map(f => 'table/web/' + f)
];

console.log('üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', files.length, '\\n');

files.forEach((file, index) => {
  const filePath = path.join(__dirname, file);
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    const checks = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫
    const openBraces = (content.match(/{/g) || []).length;
    const closeBraces = (content.match(/}/g) || []).length;
    if (openBraces !== closeBraces) {
      checks.push(\`–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏: { (\${openBraces}) vs } (\${closeBraces})\`);
    }
    
    const openParens = (content.match(/\\(/g) || []).length;
    const closeParens = (content.match(/\\)/g) || []).length;
    if (openParens !== closeParens) {
      checks.push(\`–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏: ( (\${openParens}) vs ) (\${closeParens})\`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ function declarations
    const functionMatches = content.match(/function\\s+\\w+/g);
    const functionCount = functionMatches ? functionMatches.length : 0;
    
    if (checks.length === 0) {
      results.passed++;
      console.log(\`‚úÖ (\${index + 1}/\${files.length}) \${file} - –§—É–Ω–∫—Ü–∏–π: \${functionCount}\`);
      results.details.push({ file, status: 'OK', functions: functionCount });
    } else {
      results.failed++;
      console.log(\`‚ùå (\${index + 1}/\${files.length}) \${file}\`);
      checks.forEach(c => console.log(\`   ‚îî‚îÄ \${c}\`));
      results.details.push({ file, status: 'FAILED', errors: checks });
    }
    
  } catch (e) {
    results.failed++;
    console.log(\`‚ùå (\${index + 1}/\${files.length}) \${file} - –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: \${e.message}\`);
    results.details.push({ file, status: 'ERROR', error: e.message });
  }
});

results.total = files.length;

console.log('\\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê                        ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\\n');
console.log('–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:', results.total);
console.log('‚úÖ –ü—Ä–æ—à–ª–∏:', results.passed);
console.log('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã:', results.failed);
console.log('');

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
if (!fs.existsSync('test-results')) {
  fs.mkdirSync('test-results');
}
fs.writeFileSync('test-results/syntax-report.json', JSON.stringify(results, null, 2));

if (results.failed === 0) {
  console.log('üéâ –í–°–ï –§–ê–ô–õ–´ –ü–†–û–®–õ–ò –ü–†–û–í–ï–†–ö–£ –°–ò–ù–¢–ê–ö–°–ò–°–ê!\\n');
  process.exit(0);
} else {
  console.log('‚ö†Ô∏è  –ï–°–¢–¨ –û–®–ò–ë–ö–ò –°–ò–ù–¢–ê–ö–°–ò–°–ê!\\n');
  process.exit(1);
}
`;

// 2. run-structure-analysis.js
const structureAnalysisContent = `#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
 */

const fs = require('fs');
const path = require('path');

console.log('\\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê                              ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\\n');

const analysis = {
  client: { files: 0, functions: 0, lines: 0 },
  server: { files: 0, functions: 0, lines: 0 },
  shared: { files: 0, functions: 0, lines: 0 },
  tests: { files: 0, functions: 0, lines: 0 },
  web: { files: 0, functions: 0, lines: 0 }
};

function analyzeDirectory(dir, category) {
  const dirPath = path.join(__dirname, 'table', dir);
  const files = fs.readdirSync(dirPath).filter(f => f.endsWith('.gs'));
  
  analysis[category].files = files.length;
  
  files.forEach(file => {
    const content = fs.readFileSync(path.join(dirPath, file), 'utf8');
    const functions = (content.match(/function\\s+\\w+/g) || []).length;
    const lines = content.split('\\n').length;
    
    analysis[category].functions += functions;
    analysis[category].lines += lines;
  });
}

analyzeDirectory('client', 'client');
analyzeDirectory('server', 'server');
analyzeDirectory('shared', 'shared');
analyzeDirectory('tests', 'tests');
analyzeDirectory('web', 'web');

console.log('üìÇ CLIENT:');
console.log('   –§–∞–π–ª–æ–≤:', analysis.client.files);
console.log('   –§—É–Ω–∫—Ü–∏–π:', analysis.client.functions);
console.log('   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', analysis.client.lines);
console.log('');

console.log('üìÇ SERVER:');
console.log('   –§–∞–π–ª–æ–≤:', analysis.server.files);
console.log('   –§—É–Ω–∫—Ü–∏–π:', analysis.server.functions);
console.log('   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', analysis.server.lines);
console.log('');

console.log('üìÇ SHARED:');
console.log('   –§–∞–π–ª–æ–≤:', analysis.shared.files);
console.log('   –§—É–Ω–∫—Ü–∏–π:', analysis.shared.functions);
console.log('   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', analysis.shared.lines);
console.log('');

console.log('üìÇ TESTS:');
console.log('   –§–∞–π–ª–æ–≤:', analysis.tests.files);
console.log('   –§—É–Ω–∫—Ü–∏–π:', analysis.tests.functions);
console.log('   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', analysis.tests.lines);
console.log('');

console.log('üìÇ WEB:');
console.log('   –§–∞–π–ª–æ–≤:', analysis.web.files);
console.log('   –§—É–Ω–∫—Ü–∏–π:', analysis.web.functions);
console.log('   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', analysis.web.lines);
console.log('');

const total = {
  files: analysis.client.files + analysis.server.files + analysis.shared.files + analysis.tests.files + analysis.web.files,
  functions: analysis.client.functions + analysis.server.functions + analysis.shared.functions + analysis.tests.functions + analysis.web.functions,
  lines: analysis.client.lines + analysis.server.lines + analysis.shared.lines + analysis.tests.lines + analysis.web.lines
};

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –í–°–ï–ì–û                                                 ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('–§–∞–π–ª–æ–≤:', total.files);
console.log('–§—É–Ω–∫—Ü–∏–π:', total.functions);
console.log('–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:', total.lines);
console.log('');

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
if (!fs.existsSync('test-results')) {
  fs.mkdirSync('test-results');
}
fs.writeFileSync('test-results/structure-analysis.json', JSON.stringify({ analysis, total }, null, 2));

console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à—ë–Ω!\\n');
`;

// 3. run-all-local-tests.js
const allLocalTestsContent = `#!/usr/bin/env node

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */

const { execSync } = require('child_process');

console.log('');
console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –ó–ê–ü–£–°–ö –í–°–ï–• –õ–û–ö–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í                          ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('');

const tests = [
  { name: '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', script: 'run-structure-analysis.js' },
  { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞', script: 'run-syntax-check.js' },
  { name: '–ú–æ–∫-—Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π', script: 'run-mock-tests.js' }
];

const results = [];

tests.forEach((test, index) => {
  console.log(\`\\n[\${index + 1}/\${tests.length}] –ó–∞–ø—É—Å–∫: \${test.name}...\\n\`);
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  try {
    execSync(\`node \${test.script}\`, { stdio: 'inherit' });
    results.push({ test: test.name, status: 'PASSED' });
  } catch (e) {
    results.push({ test: test.name, status: 'FAILED' });
  }
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
});

console.log('');
console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê                                       ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('');

results.forEach(r => {
  const icon = r.status === 'PASSED' ? '‚úÖ' : '‚ùå';
  console.log(\`\${icon} \${r.test}: \${r.status}\`);
});

const passed = results.filter(r => r.status === 'PASSED').length;
const failed = results.filter(r => r.status === 'FAILED').length;

console.log('');
console.log(\`–í—Å–µ–≥–æ: \${results.length} | –ü—Ä–æ—à–ª–∏: \${passed} | –ü—Ä–æ–≤–∞–ª–µ–Ω—ã: \${failed}\`);
console.log('');

if (failed === 0) {
  console.log('üéâüéâüéâ –í–°–ï –õ–û–ö–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! üéâüéâüéâ');
  console.log('');
  process.exit(0);
} else {
  console.log('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è');
  console.log('');
  process.exit(1);
}
`;

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
const runners = [
  { name: 'run-syntax-check.js', content: syntaxCheckContent },
  { name: 'run-structure-analysis.js', content: structureAnalysisContent },
  { name: 'run-all-local-tests.js', content: allLocalTestsContent }
];

runners.forEach(runner => {
  fs.writeFileSync(runner.name, runner.content, { mode: 0o755 });
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω:', runner.name);
});

console.log('\\nüéâ –í—Å–µ test runners —Å–æ–∑–¥–∞–Ω—ã!\\n');
console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ:');
console.log('  node run-all-local-tests.js');
console.log('');
