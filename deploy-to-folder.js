#!/usr/bin/env node
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π Apps Script –∫–æ–¥–∞ –≤–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–ø–∫–µ Google Drive
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   GOOGLE_CREDENTIALS='{...}' DRIVE_FOLDER_ID='abc123' node deploy-to-folder.js
 * 
 * –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 *   1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Google Sheets –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
 *   2. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª—è–µ—Ç Apps Script –∫–æ–¥
 *   3. –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * 
 * –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–æ–¥–µ!
 */

const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========

// –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ DRIVE_FOLDER_ID –Ω–µ —É–∫–∞–∑–∞–Ω - –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
const FOLDER_ID = process.env.DRIVE_FOLDER_ID;
if (!FOLDER_ID) {
  console.log('‚ö†Ô∏è  SKIP: DRIVE_FOLDER_ID –Ω–µ —É–∫–∞–∑–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π');
  console.log('üí° –î–ª—è –¥–µ–ø–ª–æ—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DRIVE_FOLDER_ID –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö GitHub');
  process.exit(0); // –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
}

const CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS || '{}');

if (!CREDENTIALS.client_email) {
  console.error('‚ùå ERROR: GOOGLE_CREDENTIALS environment variable is required!');
  console.error('   Must be a Service Account JSON with Drive and Apps Script APIs enabled.');
  process.exit(1);
}

// ========== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ==========

async function authenticate() {
  const auth = new google.auth.GoogleAuth({
    credentials: CREDENTIALS,
    scopes: [
      'https://www.googleapis.com/auth/drive.readonly',
      'https://www.googleapis.com/auth/script.projects'
    ]
  });
  
  return auth.getClient();
}

// ========== –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –¢–ê–ë–õ–ò–¶ ==========

async function getSpreadsheets(auth) {
  console.log(`\nüîç Searching for spreadsheets in folder: ${FOLDER_ID}\n`);
  
  const drive = google.drive({ version: 'v3', auth });
  
  try {
    const res = await drive.files.list({
      q: `'${FOLDER_ID}' in parents and mimeType='application/vnd.google-apps.spreadsheet' and trashed=false`,
      fields: 'files(id, name, createdTime, modifiedTime)',
      pageSize: 100
    });
    
    const files = res.data.files || [];
    
    console.log(`‚úÖ Found ${files.length} spreadsheet(s):\n`);
    files.forEach((file, i) => {
      console.log(`   ${i + 1}. ${file.name} (${file.id})`);
    });
    console.log('');
    
    return files;
  } catch (error) {
    console.error('‚ùå ERROR getting spreadsheets:', error.message);
    throw error;
  }
}

// ========== –ü–û–õ–£–ß–ï–ù–ò–ï SCRIPT ID –ò–ó –¢–ê–ë–õ–ò–¶–´ ==========

async function getScriptId(auth, spreadsheetId) {
  const drive = google.drive({ version: 'v3', auth });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º metadata —Ç–∞–±–ª–∏—Ü—ã
    const res = await drive.files.get({
      fileId: spreadsheetId,
      fields: 'id, name'
    });
    
    // Apps Script –ø—Ä–æ–µ–∫—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID
    // –û–±—ã—á–Ω–æ —ç—Ç–æ: "containers/{spreadsheetId}"
    // –ù–æ –º—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ —á–µ—Ä–µ–∑ Apps Script API
    
    const script = google.script({ version: 'v1', auth });
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π)
    // –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∞–º –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Ö–∏—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±...
    
    // –î–ª—è container-bound —Å–∫—Ä–∏–ø—Ç–æ–≤ Script ID === Spreadsheet ID
    return spreadsheetId;
  } catch (error) {
    console.error(`   ‚ö†Ô∏è Cannot get script ID for ${spreadsheetId}: ${error.message}`);
    return null;
  }
}

// ========== –ß–¢–ï–ù–ò–ï –§–ê–ô–õ–û–í –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø ==========

function readProjectFiles() {
  console.log('üìÇ Reading project files...\n');
  
  const clientDir = path.join(__dirname, 'table', 'client');
  const sharedDir = path.join(__dirname, 'table', 'shared');
  
  const files = [];
  
  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  const clientFiles = fs.readdirSync(clientDir)
    .filter(f => f.endsWith('.gs'));
  
  clientFiles.forEach(filename => {
    const name = filename.replace('.gs', '');
    const content = fs.readFileSync(path.join(clientDir, filename), 'utf8');
    files.push({
      name: name,
      type: 'SERVER_JS',
      source: content
    });
    console.log(`   ‚úÖ ${name}.gs (${content.length} chars)`);
  });
  
  // Shared —Ñ–∞–π–ª—ã
  if (fs.existsSync(sharedDir)) {
    const sharedFiles = fs.readdirSync(sharedDir)
      .filter(f => f.endsWith('.gs'));
    
    sharedFiles.forEach(filename => {
      const name = filename.replace('.gs', '');
      const content = fs.readFileSync(path.join(sharedDir, filename), 'utf8');
      files.push({
        name: name,
        type: 'SERVER_JS',
        source: content
      });
      console.log(`   ‚úÖ ${name}.gs (${content.length} chars)`);
    });
  }
  
  // appsscript.json
  const manifestPath = path.join(__dirname, 'table', 'client', 'appsscript.json');
  if (fs.existsSync(manifestPath)) {
    const manifest = fs.readFileSync(manifestPath, 'utf8');
    files.push({
      name: 'appsscript',
      type: 'JSON',
      source: manifest
    });
    console.log(`   ‚úÖ appsscript.json`);
  }
  
  // Version files
  const versionHtmlPath = path.join(__dirname, 'version.html');
  if (fs.existsSync(versionHtmlPath)) {
    const versionHtml = fs.readFileSync(versionHtmlPath, 'utf8');
    files.push({
      name: 'version',
      type: 'HTML',
      source: versionHtml
    });
    console.log(`   ‚úÖ version.html (version info page)`);
  }
  
  const versionJsonPath = path.join(__dirname, 'version.json');
  if (fs.existsSync(versionJsonPath)) {
    // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –≤ JSON –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    const versionData = JSON.parse(fs.readFileSync(versionJsonPath, 'utf8'));
    versionData.version.updateTimestamp = new Date().toISOString();
    versionData.build.number = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    versionData.metadata.generated_at = new Date().toISOString();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ JS —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Apps Script
    const versionFunction = `/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã
 * @return {Object} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–µ—Ä—Å–∏–∏
 */
function getVersionInfo() {
  return ${JSON.stringify(versionData, null, 2)};
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ (—Å—Ç—Ä–æ–∫–∞)
 * @return {string} –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
 */
function getCurrentVersion() {
  return getVersionInfo().version.current;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @return {string} ISO —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
 */
function getLastUpdateDate() {
  return getVersionInfo().version.updateTimestamp;
}`;
    
    files.push({
      name: 'VersionInfo',
      type: 'SERVER_JS',
      source: versionFunction
    });
    console.log(`   ‚úÖ version.json ‚Üí VersionInfo.gs (API functions)`);
  }
  
  console.log(`\nüì¶ Total files: ${files.length}\n`);
  
  return files;
}

// ========== –î–ï–ü–õ–û–ô –í –¢–ê–ë–õ–ò–¶–£ ==========

async function deployToSpreadsheet(auth, spreadsheet, files) {
  const { id, name } = spreadsheet;
  
  console.log(`\nüì§ Deploying to: ${name}`);
  console.log(`   Sheet ID: ${id}`);
  
  try {
    // –î–ª—è container-bound —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Spreadsheet ID –∫–∞–∫ Script ID
    const scriptId = id;
    
    const script = google.script({ version: 'v1', auth });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–µ–∫—Ç–∞
    await script.projects.updateContent({
      scriptId: scriptId,
      requestBody: {
        files: files
      }
    });
    
    console.log(`   ‚úÖ SUCCESS: Deployed ${files.length} files`);
    return { success: true, name, id };
  } catch (error) {
    console.error(`   ‚ùå FAILED: ${error.message}`);
    return { success: false, name, id, error: error.message };
  }
}

// ========== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========

async function main() {
  console.log('üöÄ Starting deployment to Google Drive folder...\n');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('\nüîê Authenticating...');
    const auth = await authenticate();
    console.log('   ‚úÖ Authenticated as:', CREDENTIALS.client_email);
    
    // 2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const spreadsheets = await getSpreadsheets(auth);
    
    if (spreadsheets.length === 0) {
      console.log('‚ö†Ô∏è No spreadsheets found in folder. Exiting.');
      return;
    }
    
    // 3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    const files = readProjectFiles();
    
    // 4. –î–µ–ø–ª–æ–π –≤ –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log('üöÄ Starting deployments...');
    console.log('=' .repeat(60));
    
    const results = [];
    
    for (let i = 0; i < spreadsheets.length; i++) {
      const sheet = spreadsheets[i];
      console.log(`\n[${i + 1}/${spreadsheets.length}]`);
      
      const result = await deployToSpreadsheet(auth, sheet, files);
      results.push(result);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (rate limiting)
      if (i < spreadsheets.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('\nüìä DEPLOYMENT SUMMARY:\n');
    
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`   ‚úÖ Successful: ${successful}`);
    console.log(`   ‚ùå Failed: ${failed}`);
    console.log(`   üì¶ Total: ${results.length}`);
    
    if (failed > 0) {
      console.log('\n‚ùå Failed deployments:');
      results.filter(r => !r.success).forEach(r => {
        console.log(`   ‚Ä¢ ${r.name}: ${r.error}`);
      });
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('\n‚úÖ Deployment completed!\n');
    
    // Exit code
    process.exit(failed > 0 ? 1 : 0);
    
  } catch (error) {
    console.error('\n‚ùå FATAL ERROR:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main };
