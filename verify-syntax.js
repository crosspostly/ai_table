#!/usr/bin/env node
/**
 * –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê - –ø–∞—Ä—Å–∏–º –∫–∞–∫ JavaScript
 */

const fs = require('fs');
const vm = require('vm');

const files = [
  'table/client/GeminiClient.gs',
  'table/client/ClientUtilities.gs',
  'table/server/SmartChainService.gs',
  'table/client/OcrHelpers.gs',
  'table/server/SourceDetector.gs',
  'table/shared/Utils.gs',
  'table/client/ComprehensiveTestSuite.gs'
];

console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –ß–ï–†–ï–ó NODE.JS VM\n');

files.forEach(file => {
  console.log(`üìÅ ${file}...`);
  
  if (!fs.existsSync(file)) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n`);
    return;
  }
  
  const content = fs.readFileSync(file, 'utf8');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å Script –æ–±—ä–µ–∫—Ç - —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    new vm.Script(content, { filename: file });
    console.log(`   ‚úÖ –°–ò–ù–¢–ê–ö–°–ò–° –ü–†–ê–í–ò–õ–¨–ù–´–ô\n`);
  } catch (error) {
    console.log(`   ‚ùå SYNTAX ERROR:`);
    console.log(`   Line: ${error.stack.split(':')[1]}`);
    console.log(`   Error: ${error.message}`);
    console.log('');
  }
});
