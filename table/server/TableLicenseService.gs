/**
 * Table-based License Service v2.0
 * –°–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ ID —Ç–∞–±–ª–∏—Ü—ã
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è table-based –ª–∏—Ü–µ–Ω–∑–∏–π
var LICENSE_SHEET_ID = '1u9rNx0Zwk4Y1cKHiquwu2jH3elpX7VUSJVgkq_Tb3-s';
var LICENSE_SHEET_NAME = 'Tokens';
var TABLE_BINDINGS_SHEET = 'TableBindings'; // –ù–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–æ–∫

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å table_id
 * @param {string} email - email –ª–∏—Ü–µ–Ω–∑–∏–∏
 * @param {string} token - —Ç–æ–∫–µ–Ω –ª–∏—Ü–µ–Ω–∑–∏–∏  
 * @param {string} tableId - ID —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @return {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ø–∏—è–º–∏
 */
function checkTableLicense(email, token, tableId) {
  var traceId = 'table-lic-' + Date.now();
  
  try {
    addSystemLog('‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ table license: ' + maskEmail(email) + ', table: ' + (tableId ? tableId.slice(0, 8) + '...' : 'none'), 'INFO', 'TABLE_LICENSE');
    
    if (!email || !token) {
      return createLicenseError('EMAIL –∏ TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', traceId);
    }
    
    if (!tableId) {
      return createLicenseError('TABLE_ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞', traceId);
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    var ss = SpreadsheetApp.openById(LICENSE_SHEET_ID);
    var licenseSheet = ss.getSheetByName(LICENSE_SHEET_NAME);
    var bindingsSheet = getOrCreateBindingsSheet(ss);
    
    if (!licenseSheet) {
      return createLicenseError('–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–ê–Ø_–°–ò–°–¢–ï–ú–ê_–ù–ï–î–û–°–¢–£–ü–ù–ê', traceId);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    var licenseCheck = checkBasicLicense(licenseSheet, email, token, traceId);
    if (!licenseCheck.ok) {
      return licenseCheck;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    var bindingCheck = checkTableBinding(bindingsSheet, email, token, tableId, licenseCheck.licenseData, traceId);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    logTableLicenseActivity('check', email, token, tableId, bindingCheck, traceId);
    
    return bindingCheck;
    
  } catch (e) {
    addSystemLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ table license: ' + e.message, 'ERROR', 'TABLE_LICENSE');
    return createLicenseError('–û–®–ò–ë–ö–ê_–ü–†–û–í–ï–†–ö–ò_–õ–ò–¶–ï–ù–ó–ò–ò: ' + e.message, traceId);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ)
 */
function checkBasicLicense(sheet, email, token, traceId) {
  try {
    var data = sheet.getDataRange().getValues();
    if (!data || data.length < 2) {
      return createLicenseError('–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–ê–Ø_–¢–ê–ë–õ–ò–¶–ê_–ü–£–°–¢–ê', traceId);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    var header = data[0].map(function(x) { return String(x || '').toLowerCase().trim(); });
    var colEmail = findLicenseHeader(header, ['email', 'e-mail', '–ø–æ—á—Ç–∞']);
    var colToken = findLicenseHeader(header, ['token', '—Ç–æ–∫–µ–Ω']);  
    var colUntil = findLicenseHeader(header, ['until', '–¥–æ', 'expires']);
    var colActive = findLicenseHeader(header, ['active', '–∞–∫—Ç–∏–≤–µ–Ω']);
    var colMaxCopies = findLicenseHeader(header, ['max_copies', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∏—Ü–µ–Ω–∑–∏–π', 'copies']);
    
    if (colEmail === -1 || colToken === -1) {
      return createLicenseError('–ù–ï–í–ï–†–ù–ê–Ø_–°–¢–†–£–ö–¢–£–†–ê_–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–û–ô_–¢–ê–ë–õ–ò–¶–´', traceId);
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowEmail = String(row[colEmail] || '').trim().toLowerCase();
      var rowToken = String(row[colToken] || '').trim();
      
      if (rowEmail === email.toLowerCase() && rowToken === token) {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (colActive !== -1) {
          var isActive = row[colActive];
          if (!isActive || String(isActive).toLowerCase() === 'false' || String(isActive) === '0') {
            return createLicenseError('–õ–ò–¶–ï–ù–ó–ò–Ø_–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê', traceId);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if (colUntil !== -1 && row[colUntil] instanceof Date && row[colUntil] < new Date()) {
          return createLicenseError('–õ–ò–¶–ï–ù–ó–ò–Ø_–ò–°–¢–ï–ö–õ–ê', traceId);
        }
        
        // Rate limiting
        if (!checkRateLimit(token)) {
          return createLicenseError('–ü–†–ï–í–´–®–ï–ù_–õ–ò–ú–ò–¢_–ó–ê–ü–†–û–°–û–í', traceId);
        }
        
        var maxCopies = colMaxCopies !== -1 ? parseInt(row[colMaxCopies] || 1) : 1;
        
        return {
          ok: true,
          licenseData: {
            email: email,
            token: token,
            row: i + 1,
            maxCopies: maxCopies,
            until: colUntil !== -1 && row[colUntil] instanceof Date ? row[colUntil] : null
          },
          traceId: traceId
        };
      }
    }
    
    return createLicenseError('–ù–ï–í–ï–†–ù–´–ï_–£–ß–ï–¢–ù–´–ï_–î–ê–ù–ù–´–ï', traceId);
    
  } catch (e) {
    return createLicenseError('–û–®–ò–ë–ö–ê_–ë–ê–ó–û–í–û–ô_–ü–†–û–í–ï–†–ö–ò: ' + e.message, traceId);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ
 */
function checkTableBinding(bindingsSheet, email, token, tableId, licenseData, traceId) {
  try {
    var data = bindingsSheet.getDataRange().getValues();
    var bindings = [];
    var currentBinding = null;
    
    // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏
    if (data.length > 1) {
      for (var i = 1; i < data.length; i++) {
        var row = data[i];
        var rowEmail = String(row[0] || '').trim().toLowerCase();
        var rowToken = String(row[1] || '').trim();
        var rowTableId = String(row[2] || '').trim();
        
        if (rowEmail === email.toLowerCase() && rowToken === token) {
          var binding = {
            email: rowEmail,
            token: rowToken,
            tableId: rowTableId,
            createdAt: row[3] instanceof Date ? row[3] : new Date(),
            lastUsed: row[4] instanceof Date ? row[4] : new Date(),
            row: i
          };
          
          bindings.push(binding);
          
          if (rowTableId === tableId) {
            currentBinding = binding;
          }
        }
      }
    }
    
    addSystemLog('üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—è–∑–æ–∫: ' + bindings.length + '/' + licenseData.maxCopies, 'DEBUG', 'TABLE_LICENSE');
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (currentBinding) {
      bindingsSheet.getRange(currentBinding.row + 1, 5).setValue(new Date()); // lastUsed
      
      return {
        ok: true,
        action: 'existing_binding',
        tableId: tableId,
        bindings: bindings.length,
        maxCopies: licenseData.maxCopies,
        licenseData: licenseData,
        traceId: traceId
      };
    }
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ø–∏–π
    if (bindings.length >= licenseData.maxCopies) {
      return {
        ok: false,
        error: '–ü–†–ï–í–´–®–ï–ù_–õ–ò–ú–ò–¢_–ö–û–ü–ò–ô',
        action: 'limit_exceeded',
        bindings: bindings.map(function(b) { 
          return {
            tableId: b.tableId,
            createdAt: b.createdAt,
            lastUsed: b.lastUsed
          }; 
        }),
        maxCopies: licenseData.maxCopies,
        suggested: 'unbind_old_and_bind_new',
        traceId: traceId
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—è–∑–∫—É
    var now = new Date();
    bindingsSheet.appendRow([
      email,
      token,
      tableId,
      now,  // createdAt
      now   // lastUsed
    ]);
    
    addSystemLog('‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ' + tableId.slice(0, 8) + '...', 'INFO', 'TABLE_LICENSE');
    
    return {
      ok: true,
      action: 'new_binding_created',
      tableId: tableId,
      bindings: bindings.length + 1,
      maxCopies: licenseData.maxCopies,
      licenseData: licenseData,
      traceId: traceId
    };
    
  } catch (e) {
    addSystemLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏: ' + e.message, 'ERROR', 'TABLE_LICENSE');
    return createLicenseError('–û–®–ò–ë–ö–ê_–ü–†–ò–í–Ø–ó–ö–ò: ' + e.message, traceId);
  }
}

/**
 * –û—Ç–≤—è–∑–∫–∞ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤–æ–π
 */
function rebindTable(email, token, oldTableId, newTableId) {
  var traceId = 'rebind-' + Date.now();
  
  try {
    addSystemLog('‚Üí –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞: ' + oldTableId.slice(0, 8) + '... ‚Üí ' + newTableId.slice(0, 8) + '...', 'INFO', 'TABLE_LICENSE');
    
    var ss = SpreadsheetApp.openById(LICENSE_SHEET_ID);
    var bindingsSheet = getOrCreateBindingsSheet(ss);
    
    var data = bindingsSheet.getDataRange().getValues();
    var updated = false;
    
    // –ò—â–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—É—é
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var rowEmail = String(row[0] || '').trim().toLowerCase();
      var rowToken = String(row[1] || '').trim();
      var rowTableId = String(row[2] || '').trim();
      
      if (rowEmail === email.toLowerCase() && rowToken === token && rowTableId === oldTableId) {
        bindingsSheet.getRange(i + 1, 3).setValue(newTableId); // tableId
        bindingsSheet.getRange(i + 1, 5).setValue(new Date());  // lastUsed
        updated = true;
        break;
      }
    }
    
    if (!updated) {
      return createLicenseError('–°–¢–ê–†–ê–Ø_–ü–†–ò–í–Ø–ó–ö–ê_–ù–ï_–ù–ê–ô–î–ï–ù–ê', traceId);
    }
    
    addSystemLog('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω–∞', 'INFO', 'TABLE_LICENSE');
    
    return {
      ok: true,
      action: 'rebound',
      oldTableId: oldTableId,
      newTableId: newTableId,
      traceId: traceId
    };
    
  } catch (e) {
    addSystemLog('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏: ' + e.message, 'ERROR', 'TABLE_LICENSE');
    return createLicenseError('–û–®–ò–ë–ö–ê_–ü–ï–†–ï–ü–†–ò–í–Ø–ó–ö–ò: ' + e.message, traceId);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø—Ä–∏–≤—è–∑–æ–∫
 */
function getOrCreateBindingsSheet(spreadsheet) {
  var sheet = spreadsheet.getSheetByName(TABLE_BINDINGS_SHEET);
  
  if (!sheet) {
    sheet = spreadsheet.insertSheet(TABLE_BINDINGS_SHEET);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    sheet.getRange(1, 1, 1, 5).setValues([[
      'Email', 'Token', 'TableId', 'CreatedAt', 'LastUsed'
    ]]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    var headerRange = sheet.getRange(1, 1, 1, 5);
    headerRange.setBackground('#4285f4').setFontColor('white').setFontWeight('bold');
    
    addSystemLog('‚ú® –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –ø—Ä–∏–≤—è–∑–æ–∫ —Ç–∞–±–ª–∏—Ü: ' + TABLE_BINDINGS_SHEET, 'INFO', 'TABLE_LICENSE');
  }
  
  return sheet;
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ table license –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function logTableLicenseActivity(action, email, token, tableId, result, traceId) {
  try {
    var ss = SpreadsheetApp.openById(LICENSE_SHEET_ID);
    var logSheet = ss.getSheetByName('TableLicenseLogs') || ss.insertSheet('TableLicenseLogs');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (logSheet.getLastRow() === 0) {
      logSheet.getRange(1, 1, 1, 8).setValues([[
        'Timestamp', 'Action', 'Email', 'Token', 'TableId', 'Result', 'Details', 'TraceId'
      ]]);
      logSheet.getRange(1, 1, 1, 8).setFontWeight('bold').setBackground('#E8F0FE');
    }
    
    var timestamp = new Date();
    var maskedEmail = maskEmail(email);
    var maskedToken = token ? '***' + token.slice(-4) : 'none';
    var maskedTableId = tableId ? tableId.slice(0, 8) + '...' : 'none';
    var resultStr = result.ok ? 'SUCCESS' : 'FAIL: ' + (result.error || 'unknown');
    
    var details = {
      action: result.action || 'check',
      bindings: result.bindings || 0,
      maxCopies: result.maxCopies || 1
    };
    
    logSheet.appendRow([
      timestamp,
      action,
      maskedEmail,
      maskedToken,
      maskedTableId,
      resultStr,
      JSON.stringify(details),
      traceId || 'none'
    ]);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    var lastRow = logSheet.getLastRow();
    if (lastRow > 1001) {
      logSheet.deleteRows(2, lastRow - 1001);
    }
    
  } catch (e) {
    addSystemLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è table license: ' + e.message, 'WARN', 'TABLE_LICENSE');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—è–∑–æ–∫ —Ç–∞–±–ª–∏—Ü
 */
function getTableBindingsStats() {
  try {
    var ss = SpreadsheetApp.openById(LICENSE_SHEET_ID);
    var bindingsSheet = ss.getSheetByName(TABLE_BINDINGS_SHEET);
    
    if (!bindingsSheet) {
      return { totalBindings: 0, uniqueUsers: 0, uniqueTables: 0 };
    }
    
    var data = bindingsSheet.getDataRange().getValues();
    if (data.length < 2) {
      return { totalBindings: 0, uniqueUsers: 0, uniqueTables: 0 };
    }
    
    var uniqueEmails = new Set();
    var uniqueTables = new Set();
    var activeBindings = 0;
    var oldBindings = 0;
    var cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    
    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var email = String(row[0] || '').trim();
      var tableId = String(row[2] || '').trim();
      var lastUsed = row[4] instanceof Date ? row[4] : new Date(0);
      
      if (email && tableId) {
        uniqueEmails.add(email);
        uniqueTables.add(tableId);
        
        if (lastUsed > cutoffDate) {
          activeBindings++;
        } else {
          oldBindings++;
        }
      }
    }
    
    return {
      totalBindings: data.length - 1,
      uniqueUsers: uniqueEmails.size,
      uniqueTables: uniqueTables.size,
      activeBindings: activeBindings,
      oldBindings: oldBindings
    };
    
  } catch (e) {
    return { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + e.message };
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
 */
function createLicenseError(error, traceId) {
  return {
    ok: false,
    error: error,
    traceId: traceId
  };
}