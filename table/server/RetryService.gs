/**
 * Retry Logic Service v1.0
 * –ù–∞–¥–µ–∂–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */

/**
 * HTTP –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –æ–ø—Ü–∏–∏ UrlFetchApp
 * @param {Object} retryConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry
 * @return {HTTPResponse} - –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
function fetchWithRetry(url, options = {}, retryConfig = {}) {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const config = {
    maxRetries: retryConfig.maxRetries || 3,
    baseDelay: retryConfig.baseDelay || 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    maxDelay: retryConfig.maxDelay || 30000,  // 30 —Å–µ–∫—É–Ω–¥
    retryOnStatus: retryConfig.retryOnStatus || [429, 500, 502, 503, 504],
    timeoutMs: retryConfig.timeoutMs || 30000,
    logEnabled: retryConfig.logEnabled !== false,
    ...retryConfig
  };
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
  const requestOptions = {
    muteHttpExceptions: true,
    ...options
  };
  
  let lastError = null;
  
  for (let attempt = 1; attempt <= config.maxRetries + 1; attempt++) {
    const isLastAttempt = attempt > config.maxRetries;
    
    try {
      if (config.logEnabled) {
        addSystemLog(`üîÑ HTTP –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}): ${url}`, 'DEBUG', 'RETRY_SERVICE');
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = UrlFetchApp.fetch(url, requestOptions);
      const statusCode = response.getResponseCode();
      
      if (config.logEnabled) {
        addSystemLog(`‚Üê HTTP –æ—Ç–≤–µ—Ç: ${statusCode}`, 'DEBUG', 'RETRY_SERVICE');
      }
      
      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      if (statusCode >= 200 && statusCode < 300) {
        if (attempt > 1 && config.logEnabled) {
          addSystemLog(`‚úÖ –£—Å–ø–µ—Ö –ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫`, 'INFO', 'RETRY_SERVICE');
        }
        return response;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
      const shouldRetry = !isLastAttempt && config.retryOnStatus.includes(statusCode);
      
      if (!shouldRetry) {
        // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        if (config.logEnabled) {
          addSystemLog(`‚ùå HTTP ${statusCode}: –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—É`, 'WARN', 'RETRY_SERVICE');
        }
        return response;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      const delay = calculateBackoffDelay(attempt, config.baseDelay, config.maxDelay);
      
      if (config.logEnabled) {
        addSystemLog(`‚è≥ HTTP ${statusCode}: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${config.maxRetries + 1})`, 'WARN', 'RETRY_SERVICE');
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      Utilities.sleep(delay);
      
    } catch (error) {
      lastError = error;
      
      if (config.logEnabled) {
        addSystemLog(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'ERROR', 'RETRY_SERVICE');
      }
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (isLastAttempt) {
        throw new Error(`–ó–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω –ø–æ—Å–ª–µ ${config.maxRetries + 1} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—à–∏–±–∫–∏
      const delay = calculateBackoffDelay(attempt, config.baseDelay, config.maxDelay);
      
      if (config.logEnabled) {
        addSystemLog(`üîÑ –û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å`, 'WARN', 'RETRY_SERVICE');
      }
      
      Utilities.sleep(delay);
    }
  }
  
  // –ù–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
  throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ retry –ª–æ–≥–∏–∫–∏');
}

/**
 * –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
 * @param {number} attempt - –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
 * @param {number} baseDelay - –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
 * @param {number} maxDelay - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
 * @return {number} - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
 */
function calculateBackoffDelay(attempt, baseDelay, maxDelay) {
  // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff: delay = baseDelay * (2 ^ (attempt - 1))
  const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);
  
  // –î–æ–±–∞–≤–ª—è–µ–º jitter (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å) ¬±25%
  const jitter = exponentialDelay * 0.25 * (Math.random() - 0.5);
  const delayWithJitter = exponentialDelay + jitter;
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  return Math.min(Math.max(delayWithJitter, baseDelay), maxDelay);
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π retry –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö API —Å —É—á–µ—Ç–æ–º –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
 * @param {string} platform - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (instagram, vk, telegram)
 * @param {string} url - URL
 * @param {Object} options - –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @return {HTTPResponse} - –æ—Ç–≤–µ—Ç
 */
function fetchSocialApiWithRetry(platform, url, options = {}) {
  const platformConfigs = {
    instagram: {
      maxRetries: 2, // Instagram –±—ã—Å—Ç—Ä–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç
      baseDelay: 5000, // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      maxDelay: 30000,
      retryOnStatus: [429, 500, 502, 503], // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º 403 –¥–ª—è Instagram
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        ...options.headers
      }
    },
    
    vk: {
      maxRetries: 3,
      baseDelay: 2000,
      maxDelay: 15000,
      retryOnStatus: [429, 500, 502, 503, 504],
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; VKBot/1.0)',
        ...options.headers
      }
    },
    
    telegram: {
      maxRetries: 3,
      baseDelay: 3000,
      maxDelay: 20000,
      retryOnStatus: [429, 500, 502, 503, 504],
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; TelegramBot/1.0)',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        ...options.headers
      }
    }
  };\n  \n  const config = platformConfigs[platform.toLowerCase()] || platformConfigs.vk;\n  const mergedOptions = {\n    ...options,\n    headers: config.headers\n  };\n  \n  return fetchWithRetry(url, mergedOptions, config);\n}\n\n/**\n * Retry –¥–ª—è Gemini API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤\n * –í–ê–ñ–ù–û: Gemini –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –°–¢–†–û–ì–û –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ!\n * @param {string} url - Gemini API URL\n * @param {Object} options - –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞\n * @return {HTTPResponse} - –æ—Ç–≤–µ—Ç\n */\nfunction fetchGeminiWithRetry(url, options = {}) {\n  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Gemini\n  const lockKey = 'gemini_request_lock';\n  const cache = PropertiesService.getScriptProperties();\n  \n  // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)\n  let waitTime = 0;\n  const maxWaitTime = 30000;\n  \n  while (cache.getProperty(lockKey) && waitTime < maxWaitTime) {\n    Utilities.sleep(500);\n    waitTime += 500;\n  }\n  \n  try {\n    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n    cache.setProperty(lockKey, String(Date.now()));\n    \n    const config = {\n      maxRetries: 2, // Gemini –æ–±—ã—á–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω\n      baseDelay: 2000,\n      maxDelay: 10000,\n      retryOnStatus: [429, 500, 502, 503],\n      logEnabled: true\n    };\n    \n    const mergedOptions = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n    \n    addSystemLog('ü§ñ Gemini –∑–∞–ø—Ä–æ—Å (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)', 'INFO', 'RETRY_SERVICE');\n    \n    const response = fetchWithRetry(url, mergedOptions, config);\n    \n    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ Gemini –∑–∞–ø—Ä–æ—Å–∞\n    Utilities.sleep(1000);\n    \n    return response;\n    \n  } finally {\n    // –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n    cache.deleteProperty(lockKey);\n  }\n}\n\n/**\n * Batch –∑–∞–ø—Ä–æ—Å—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏\n * @param {Array} requests - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {url, options, platform}\n * @param {Object} batchConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è batch\n * @return {Array} - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n */\nfunction fetchBatchWithRetry(requests, batchConfig = {}) {\n  const config = {\n    maxConcurrent: batchConfig.maxConcurrent || 3, // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞\n    delayBetweenBatches: batchConfig.delayBetweenBatches || 2000,\n    failFast: batchConfig.failFast || false,\n    ...batchConfig\n  };\n  \n  const results = [];\n  const errors = [];\n  \n  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏\n  for (let i = 0; i < requests.length; i += config.maxConcurrent) {\n    const batch = requests.slice(i, i + config.maxConcurrent);\n    \n    addSystemLog(`üì¶ Batch ${Math.floor(i / config.maxConcurrent) + 1}: ${batch.length} –∑–∞–ø—Ä–æ—Å–æ–≤`, 'INFO', 'RETRY_SERVICE');\n    \n    // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á\n    for (const request of batch) {\n      try {\n        let response;\n        \n        if (request.platform === 'gemini') {\n          response = fetchGeminiWithRetry(request.url, request.options || {});\n        } else if (request.platform) {\n          response = fetchSocialApiWithRetry(request.platform, request.url, request.options || {});\n        } else {\n          response = fetchWithRetry(request.url, request.options || {});\n        }\n        \n        results.push({\n          success: true,\n          response: response,\n          request: request\n        });\n        \n      } catch (error) {\n        errors.push({\n          error: error.message,\n          request: request\n        });\n        \n        results.push({\n          success: false,\n          error: error.message,\n          request: request\n        });\n        \n        // Fail fast –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n        if (config.failFast) {\n          throw new Error(`Batch failed fast: ${error.message}`);\n        }\n      }\n      \n      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –±–∞—Ç—á–µ\n      if (batch.indexOf(request) < batch.length - 1) {\n        Utilities.sleep(1000);\n      }\n    }\n    \n    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏\n    if (i + config.maxConcurrent < requests.length) {\n      addSystemLog(`‚è≥ –ü–∞—É–∑–∞ ${config.delayBetweenBatches}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º`, 'DEBUG', 'RETRY_SERVICE');\n      Utilities.sleep(config.delayBetweenBatches);\n    }\n  }\n  \n  addSystemLog(`üìä Batch –∑–∞–≤–µ—Ä—à–µ–Ω: ${results.filter(r => r.success).length} —É—Å–ø–µ—à–Ω—ã—Ö, ${errors.length} –æ—à–∏–±–æ–∫`, 'INFO', 'RETRY_SERVICE');\n  \n  return {\n    results: results,\n    errors: errors,\n    successCount: results.filter(r => r.success).length,\n    errorCount: errors.length\n  };\n}\n\n/**\n * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoint\n * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n * @param {Object} options - –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞\n * @return {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n */\nfunction checkApiHealth(url, options = {}) {\n  const startTime = Date.now();\n  \n  try {\n    const response = UrlFetchApp.fetch(url, {\n      method: 'HEAD', // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n      muteHttpExceptions: true,\n      ...options\n    });\n    \n    const responseTime = Date.now() - startTime;\n    const statusCode = response.getResponseCode();\n    \n    return {\n      available: statusCode >= 200 && statusCode < 400,\n      statusCode: statusCode,\n      responseTime: responseTime,\n      healthy: statusCode === 200 && responseTime < 5000,\n      url: url\n    };\n    \n  } catch (error) {\n    return {\n      available: false,\n      error: error.message,\n      responseTime: Date.now() - startTime,\n      healthy: false,\n      url: url\n    };\n  }\n}\n\n/**\n * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö API\n * @return {Object} - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n */\nfunction checkAllApisHealth() {\n  const apis = [\n    { name: 'Instagram', url: 'https://www.instagram.com/', platform: 'instagram' },\n    { name: 'VK', url: 'https://vk.com/', platform: 'vk' },\n    { name: 'Telegram', url: 'https://t.me/', platform: 'telegram' },\n    { name: 'VK Parser', url: VK_PARSER_URL, platform: 'vk' },\n    { name: 'Gemini API', url: GEMINI_API_URL, platform: 'gemini' }\n  ];\n  \n  const results = {};\n  \n  for (const api of apis) {\n    try {\n      results[api.name] = checkApiHealth(api.url);\n      Utilities.sleep(500); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏\n    } catch (error) {\n      results[api.name] = {\n        available: false,\n        error: error.message,\n        healthy: false,\n        url: api.url\n      };\n    }\n  }\n  \n  const healthyCount = Object.values(results).filter(r => r.healthy).length;\n  \n  addSystemLog(`üè• API Health Check: ${healthyCount}/${apis.length} —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ`, 'INFO', 'RETRY_SERVICE');\n  \n  return {\n    overall: healthyCount === apis.length,\n    healthyCount: healthyCount,\n    totalCount: apis.length,\n    details: results,\n    timestamp: new Date()\n  };\n}"