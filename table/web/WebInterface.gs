/**
 * Modern Web Interface for Table AI Bot v1.0
 * –ö—Ä–∞—Å–∏–≤—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–º–µ–Ω—ã —É–±–æ–≥–∏—Ö Google Sheets
 */

/**
 * –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–†–ê–ë–û–¢–ê–ï–¢ –≤ Google Apps Script)
 */
function openWebInterface() {
  try {
    // –°–æ–∑–¥–∞–µ–º HTML –∏–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    var htmlOutput = HtmlService.createHtmlOutputFromFile('RealisticWebApp')
      .setTitle('ü§ñ Table AI Bot - –í–µ–± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å')
      .setWidth(750)
      .setHeight(700);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Table AI Bot');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
    addSystemLog('Web interface opened successfully', 'INFO', 'WEB_INTERFACE');
    
  } catch (error) {
    // Fallback: –µ—Å–ª–∏ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    var ui = SpreadsheetApp.getUi();
    ui.alert('Web Interface Error', 
             'Failed to open web interface: ' + error.message + '\\n\\nPlease use the standard menu.', 
             ui.ButtonSet.OK);
    
    addSystemLog('Web interface error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤–µ–±–∞
 */
function getSystemStatusData() {
  var credentials = getClientCredentials();
  
  return {
    credentialsOk: credentials.valid,
    credentialsError: credentials.error || '',
    hasEmail: !!(credentials.email),
    hasToken: !!(credentials.token),
    hasGeminiKey: !!(credentials.geminiApiKey),
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã
    hasReviewsSheet: !!SpreadsheetApp.getActive().getSheetByName('–û—Ç–∑—ã–≤—ã'),
    hasParamsSheet: !!SpreadsheetApp.getActive().getSheetByName('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'),
    hasPostsSheet: !!SpreadsheetApp.getActive().getSheetByName('–ø–æ—Å—Ç—ã'),
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    ocrOverwrite: PropertiesService.getScriptProperties().getProperty('OCR_OVERWRITE') === 'true'
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function getRecentResults() {
  try {
    var ss = SpreadsheetApp.getActive();
    var results = [];
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    var reviewsSheet = ss.getSheetByName('–û—Ç–∑—ã–≤—ã');
    if (reviewsSheet) {
      var data = reviewsSheet.getRange(2, 1, Math.min(reviewsSheet.getLastRow() - 1, 5), 2).getValues();
      data.forEach(function(row, i) {
        if (row[0] && row[1]) {
          results.push({
            type: 'OCR',
            source: String(row[0]).substring(0, 50) + '...',
            result: String(row[1]).substring(0, 100) + '...',
            row: i + 2,
            timestamp: new Date().toISOString()
          });
        }
      });
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    var postsSheet = ss.getSheetByName('–ø–æ—Å—Ç—ã');
    if (postsSheet && postsSheet.getLastRow() > 1) {
      var postData = postsSheet.getRange(2, 1, Math.min(postsSheet.getLastRow() - 1, 5), 4).getValues();
      postData.forEach(function(row, i) {
        if (row[0]) {
          results.push({
            type: 'POST',
            source: row[0] || 'Unknown',
            result: (row[3] || '').substring(0, 100) + '...',
            row: i + 2,
            timestamp: row[1] || new Date().toISOString()
          });
        }
      });
    }
    
    return results.slice(0, 10); // –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
  } catch (error) {
    addSystemLog('Error getting recent results: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    return [];
  }
}

/**
 * API –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
 */
function webApiSocialImport(params) {
  try {
    addSystemLog('Web API: Social import request', 'INFO', 'WEB_API');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!params.source || !params.count) {
      return {
        success: false,
        error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤'
      };
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª–∏—Å—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    var ss = SpreadsheetApp.getActive();
    var paramsSheet = ss.getSheetByName('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    if (!paramsSheet) {
      paramsSheet = ss.insertSheet('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }
    
    paramsSheet.getRange('B1').setValue(params.source);
    paramsSheet.getRange('B2').setValue(params.count);
    paramsSheet.getRange('C1').setValue(params.platform || '');
    
    // –í—ã–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
    var result = importSocialPostsClient();
    
    return {
      success: true,
      message: '–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
      details: result
    };
    
  } catch (error) {
    addSystemLog('Web API social import error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * API –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: OCR –∞–Ω–∞–ª–∏–∑
 */
function webApiOcrAnalysis(params) {
  try {
    addSystemLog('Web API: OCR analysis request', 'INFO', 'WEB_API');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OCR –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (params.overwrite !== undefined) {
      PropertiesService.getScriptProperties().setProperty('OCR_OVERWRITE', params.overwrite ? 'true' : 'false');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º OCR
    var result = ocrReviewsThin();
    
    return {
      success: true,
      message: 'OCR –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!',
      details: result
    };
    
  } catch (error) {
    addSystemLog('Web API OCR error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * API –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function webApiSaveSettings(settings) {
  try {
    addSystemLog('Web API: Save settings request', 'INFO', 'WEB_API');
    
    var props = PropertiesService.getScriptProperties();
    
    if (settings.email) {
      props.setProperty('LICENSE_EMAIL', settings.email);
    }
    
    if (settings.token) {
      props.setProperty('LICENSE_TOKEN', settings.token);
    }
    
    if (settings.geminiKey) {
      props.setProperty('GEMINI_API_KEY', settings.geminiKey);
    }
    
    if (settings.ocrOverwrite !== undefined) {
      props.setProperty('OCR_OVERWRITE', settings.ocrOverwrite ? 'true' : 'false');
    }
    
    return {
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'
    };
    
  } catch (error) {
    addSystemLog('Web API save settings error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
 */
function webApiGetTableData(tableName, limit) {
  try {
    limit = limit || 50;
    var ss = SpreadsheetApp.getActive();
    var sheet = ss.getSheetByName(tableName);
    
    if (!sheet) {
      return {
        success: false,
        error: '–õ–∏—Å—Ç "' + tableName + '" –Ω–µ –Ω–∞–π–¥–µ–Ω'
      };
    }
    
    var lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return {
        success: true,
        data: [],
        headers: []
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    var dataRows = Math.min(lastRow - 1, limit);
    var data = sheet.getRange(2, 1, dataRows, sheet.getLastColumn()).getValues();
    
    return {
      success: true,
      data: data,
      headers: headers,
      totalRows: lastRow - 1
    };
    
  } catch (error) {
    addSystemLog('Web API get table data error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * API –¥–ª—è Gemini –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤–µ–±–∞
 */
function webApiGeminiRequest(prompt, options) {
  try {
    addSystemLog('Web API: Gemini request', 'INFO', 'WEB_API');
    
    options = options || {};
    
    var credentials = getClientCredentials();
    if (!credentials.valid) {
      return {
        success: false,
        error: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã credentials: ' + credentials.error
      };
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GM_STATIC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    var result = GM_STATIC(prompt, options.maxTokens, options.temperature);
    
    return {
      success: true,
      result: result
    };
    
  } catch (error) {
    addSystemLog('Web API Gemini error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
function webApiTestConnection() {
  try {
    var credentials = getClientCredentials();
    var systemStatus = getSystemStatusData();
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    var serverStatus = 'unknown';
    try {
      var testResult = testSocialImportConnection();
      serverStatus = 'connected';
    } catch (e) {
      serverStatus = 'failed: ' + e.message;
    }
    
    return {
      success: true,
      status: {
        credentials: credentials.valid,
        system: systemStatus,
        server: serverStatus,
        timestamp: new Date().toISOString()
      }
    };
    
  } catch (error) {
    addSystemLog('Web API test connection error: ' + error.message, 'ERROR', 'WEB_API');
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –í–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª CSS/JS –≤ HTML
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}