/**
 * Collect Config UI Functions
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * 
 * Version: 1.0.0
 * Last updated: 2024-10-14
 */

/**
 * –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏
 */
function openCollectConfigUI() {
  try {
    // –í–ê–ñ–ù–û: Apps Script –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—É—Ç–∏ —Å –ø–∞–ø–∫–∞–º–∏!
    // –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ 'CollectConfigUI' –≤ –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    var html = HtmlService.createHtmlOutputFromFile('CollectConfigUI')
      .setWidth(650)
      .setHeight(600)
      .setTitle('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞');
    
    SpreadsheetApp.getUi().showModalDialog(html, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ' + error.message);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * @return {Object} {sheetName, cellAddress, sheets}
 */
function getCollectConfigInitData() {
  try {
    var sheet = SpreadsheetApp.getActiveSheet();
    var range = sheet.getActiveRange();
    
    if (!range) {
      throw new Error('–í—ã–¥–µ–ª–∏—Ç–µ —è—á–µ–π–∫—É!');
    }
    
    var sheetName = sheet.getName();
    var cellAddress = range.getA1Notation();
    var sheets = getAllSheetNames();
    
    return {
      sheetName: sheetName,
      cellAddress: cellAddress,
      sheets: sheets
    };
    
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —è—á–µ–π–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–µ–Ω—é "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É"
 */
function refreshCellWithConfig() {
  try {
    var ui = SpreadsheetApp.getUi();
    var sheet = SpreadsheetApp.getActiveSheet();
    var range = sheet.getActiveRange();
    
    if (!range) {
      ui.alert('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–¥–µ–ª–∏—Ç–µ —è—á–µ–π–∫—É!', ui.ButtonSet.OK);
      return;
    }
    
    var sheetName = sheet.getName();
    var cellAddress = range.getA1Notation();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    var config = loadCollectConfig(sheetName, cellAddress);
    
    if (!config) {
      var response = ui.alert(
        '‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        '–î–ª—è —è—á–µ–π–∫–∏ ' + sheetName + '!' + cellAddress + ' –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n' +
        '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?',
        ui.ButtonSet.YES_NO
      );
      
      if (response == ui.Button.YES) {
        openCollectConfigUI();
      }
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    ui.alert(
      'üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!\n\n' +
      'System Prompt: ' + (config.systemPrompt ? 
        config.systemPrompt.sheet + '!' + config.systemPrompt.cell : '–Ω–µ –∑–∞–¥–∞–Ω') + '\n' +
      'User Data: ' + config.userData.length + ' –∏—Å—Ç–æ—á–Ω–∏–∫(–æ–≤)\n\n' +
      '–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...',
      ui.ButtonSet.OK
    );
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    var result = executeCollectConfig(sheetName, cellAddress);
    
    if (result.success) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —è—á–µ–π–∫—É
      range.setValue(result.result);
      
      ui.alert(
        '‚úÖ –ì–æ—Ç–æ–≤–æ!',
        '–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —è—á–µ–π–∫—É ' + cellAddress,
        ui.ButtonSet.OK
      );
    } else {
      ui.alert(
        '‚ùå –û—à–∏–±–∫–∞',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n' + result.error,
        ui.ButtonSet.OK
      );
    }
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏
 * @return {boolean}
 */
function hasConfigForCurrentCell() {
  try {
    var sheet = SpreadsheetApp.getActiveSheet();
    var range = sheet.getActiveRange();
    
    if (!range) {
      return false;
    }
    
    var sheetName = sheet.getName();
    var cellAddress = range.getA1Notation();
    var config = loadCollectConfig(sheetName, cellAddress);
    
    return config !== null;
    
  } catch (error) {
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
 * @return {Array<string>} –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤
 */
function getAllSheetNames() {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheets = ss.getSheets();
    var names = [];
    
    for (var i = 0; i < sheets.length; i++) {
      names.push(sheets[i].getName());
    }
    
    return names;
    
  } catch (error) {
    Logger.log('Error getting sheet names: ' + error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–π–∫–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
 * @param {string} sheetName - –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
 * @param {string} cellAddress - –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏ (A1 notation)
 * @return {string} –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ "–ø—É—Å—Ç–æ"
 */
function getCellPreview(sheetName, cellAddress) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheetByName(sheetName);
    
    if (!sheet) {
      return '‚ùå –õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
    
    var cell = sheet.getRange(cellAddress);
    var value = cell.getValue();
    
    if (!value || value.toString().trim() === '') {
      return '(–ø—É—Å—Ç–æ)';
    }
    
    var text = value.toString();
    
    if (text.length <= 100) {
      return text;
    }
    
    return text.substring(0, 100) + '...';
    
  } catch (error) {
    return '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
  }
}

/**
 * –°–ø—Ä–∞–≤–∫–∞ –ø–æ AI –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É
 */
function showCollectConfigHelp() {
  var ui = SpreadsheetApp.getUi();
  
  var helpText = 'üéØ AI –ö–û–ù–°–¢–†–£–ö–¢–û–† - –ß–¢–û –≠–¢–û?\n\n';
  helpText += 'üí° –ü–†–û–ë–õ–ï–ú–ê:\n';
  helpText += 'Google Sheets –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—É 50,000 —Å–∏–º–≤–æ–ª–∞–º–∏.\n';
  helpText += '–ï—Å–ª–∏ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–≥–∏—Ö —è—á–µ–µ–∫:\n';
  helpText += '=GM("–ü—Ä–æ–º–ø—Ç: " & A1 & A2 & ... & A1000)\n';
  helpText += '‚ùå –§–æ—Ä–º—É–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è = –û–®–ò–ë–ö–ê!\n\n';
  
  helpText += '‚úÖ –†–ï–®–ï–ù–ò–ï:\n';
  helpText += 'AI –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ù–ê –°–ï–†–í–ï–†–ï!\n';
  helpText += '1. –í—ã–±–∏—Ä–∞–µ—Ç–µ —è—á–µ–π–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä B3)\n';
  helpText += '2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ:\n';
  helpText += '   ‚Ä¢ System Prompt - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI\n';
  helpText += '   ‚Ä¢ User Data - –ª–∏—Å—Ç—ã –∏ —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏\n';
  helpText += '3. –ù–∞–∂–∏–º–∞–µ—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"\n';
  helpText += '4. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ B3\n\n';
  
  helpText += 'üéØ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:\n';
  helpText += '1. –í—ã–¥–µ–ª–∏—Ç–µ —è—á–µ–π–∫—É –≥–¥–µ –Ω—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n';
  helpText += '2. –ú–µ–Ω—é ‚Üí üéØ AI –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Üí üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n';
  helpText += '3. –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –∏ —è—á–µ–π–∫—É –¥–ª—è System Prompt\n';
  helpText += '4. –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (+ –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)\n';
  helpText += '5. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"\n\n';
  
  helpText += 'üíæ –ù–ê–°–¢–†–û–ô–ö–ò –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø!\n';
  helpText += '–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ - –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n';
  helpText += '–ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–∏—Ç—å: üîÑ –û–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É\n\n';
  
  helpText += 'üìä –î–ê–ù–ù–´–ï –í JSON:\n';
  helpText += '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ AI –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º\n';
  helpText += 'JSON —Ñ–æ—Ä–º–∞—Ç–µ - –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç!\n\n';
  
  helpText += 'üîí –•–†–ê–ù–ï–ù–ò–ï:\n';
  helpText += '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–∫—Ä—ã—Ç–æ–º –ª–∏—Å—Ç–µ\n';
  helpText += '"ConfigData" - –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤, –ª–µ–≥–∫–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å!';
  
  ui.alert('üéØ AI –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', helpText, ui.ButtonSet.OK);
}


// ============================================================================
// CONFIGURATION MANAGEMENT (Copied from server for client-side access)
// ============================================================================

var CONFIG_SHEET_NAME = 'ConfigData';

function getOrCreateConfigSheet() {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheetByName(CONFIG_SHEET_NAME);
    
    if (!sheet) {
      sheet = ss.insertSheet(CONFIG_SHEET_NAME);
      sheet.getRange('A1:G1').setValues([[
        'Sheet', 'Cell', 'SystemPromptSheet', 'SystemPromptCell', 
        'UserDataJSON', 'CreatedAt', 'LastRun'
      ]]);
      sheet.getRange('A1:G1').setBackground('#4285f4').setFontColor('#ffffff').setFontWeight('bold');
      sheet.setFrozenRows(1);
      sheet.hideSheet();
    }
    
    return sheet;
  } catch (error) {
    Logger.log('Error creating config sheet: ' + error.message);
    throw error;
  }
}

function findConfigRow(configSheet, sheetName, cellAddress) {
  try {
    var data = configSheet.getDataRange().getValues();
    for (var i = 1; i < data.length; i++) {
      if (data[i][0] === sheetName && data[i][1] === cellAddress) {
        return i + 1;
      }
    }
    return -1;
  } catch (error) {
    Logger.log('Error finding config row: ' + error.message);
    return -1;
  }
}

function saveCollectConfig(sheetName, cellAddress, config) {
  try {
    var configSheet = getOrCreateConfigSheet();
    var row = findConfigRow(configSheet, sheetName, cellAddress);
    
    var systemPromptSheet = config.systemPrompt ? config.systemPrompt.sheet : '';
    var systemPromptCell = config.systemPrompt ? config.systemPrompt.cell : '';
    var userDataJSON = JSON.stringify(config.userData || []);
    var createdAt = new Date().toISOString();
    
    var rowData = [sheetName, cellAddress, systemPromptSheet, systemPromptCell, userDataJSON, createdAt, ''];
    
    if (row === -1) {
      configSheet.appendRow(rowData);
    } else {
      var existingCreatedAt = configSheet.getRange(row, 6).getValue();
      rowData[5] = existingCreatedAt || createdAt;
      configSheet.getRange(row, 1, 1, 7).setValues([rowData]);
    }
    
    return true;
  } catch (error) {
    Logger.log('Error saving config: ' + error.message);
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
  }
}

function loadCollectConfig(sheetName, cellAddress) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var configSheet = ss.getSheetByName(CONFIG_SHEET_NAME);
    
    if (!configSheet) return null;
    
    var row = findConfigRow(configSheet, sheetName, cellAddress);
    if (row === -1) return null;
    
    var data = configSheet.getRange(row, 1, 1, 7).getValues()[0];
    
    return {
      systemPrompt: data[2] && data[3] ? { sheet: data[2], cell: data[3] } : null,
      userData: data[4] ? JSON.parse(data[4]) : [],
      createdAt: data[5],
      lastRun: data[6] || null
    };
  } catch (error) {
    Logger.log('Error loading config: ' + error.message);
    return null;
  }
}

function deleteCollectConfig(sheetName, cellAddress) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var configSheet = ss.getSheetByName(CONFIG_SHEET_NAME);
    
    if (!configSheet) return true;
    
    var row = findConfigRow(configSheet, sheetName, cellAddress);
    if (row === -1) return true;
    
    configSheet.deleteRow(row);
    return true;
  } catch (error) {
    Logger.log('Error deleting config: ' + error.message);
    throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
  }
}

function executeCollectConfig(sheetName, cellAddress) {
  try {
    var config = loadCollectConfig(sheetName, cellAddress);
    if (!config) throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    var systemPrompt = '';
    if (config.systemPrompt) {
      var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(config.systemPrompt.sheet);
      if (sheet) {
        systemPrompt = sheet.getRange(config.systemPrompt.cell).getValue().toString();
      }
    }
    
    var userData = '';
    if (config.userData && config.userData.length > 0) {
      var dataParts = [];
      for (var i = 0; i < config.userData.length; i++) {
        var dataItem = config.userData[i];
        var dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(dataItem.sheet);
        if (dataSheet) {
          var values = dataSheet.getRange(dataItem.cell).getValues();
          for (var r = 0; r < values.length; r++) {
            for (var c = 0; c < values[r].length; c++) {
              if (values[r][c] && values[r][c].toString().trim() !== '') {
                dataParts.push(values[r][c].toString());
              }
            }
          }
        }
      }
      userData = dataParts.join('\n\n');
    }
    
    var finalPrompt = '';
    if (systemPrompt) finalPrompt += systemPrompt;
    if (userData) {
      if (finalPrompt) finalPrompt += '\n\n';
      finalPrompt += userData;
    }
    if (!finalPrompt) throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
    
    var result = GM(finalPrompt);
    
    var targetSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    if (!targetSheet) throw new Error('–õ–∏—Å—Ç ' + sheetName + ' –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    targetSheet.getRange(cellAddress).setValue(result);
    
    var configSheet = getOrCreateConfigSheet();
    var row = findConfigRow(configSheet, sheetName, cellAddress);
    if (row !== -1) {
      configSheet.getRange(row, 7).setValue(new Date().toISOString());
    }
    
    return { success: true };
  } catch (error) {
    Logger.log('Error executing config: ' + error.message);
    return { success: false, error: error.message };
  }
}
