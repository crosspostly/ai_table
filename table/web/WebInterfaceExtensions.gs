/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Table AI
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 */

/**
 * –ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
 */
function importSocialPosts(source, count, platform) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!source || source.trim() === '') {
      throw new Error('–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–∏—Å—Ç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    var ss = SpreadsheetApp.getActive();
    var paramsSheet = ss.getSheetByName('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    if (!paramsSheet) {
      paramsSheet = ss.insertSheet('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }
    
    paramsSheet.getRange('B1').setValue(source.trim());
    paramsSheet.getRange('B2').setValue(count || 20);
    if (platform && platform.trim() !== '') {
      paramsSheet.getRange('C1').setValue(platform.trim());
    }
    
    addSystemLog('Web interface import started: ' + source, 'INFO', 'WEB_INTERFACE');
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞
    var result = importVkPosts();
    
    addSystemLog('Web interface import completed', 'INFO', 'WEB_INTERFACE');
    return result;
    
  } catch (error) {
    addSystemLog('Web interface import error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function testGeminiConnection() {
  try {
    addSystemLog('Testing Gemini connection from web interface', 'INFO', 'WEB_INTERFACE');
    
    var result = GM('–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 100, 0.5);
    
    if (result && !result.toString().startsWith('Error:')) {
      addSystemLog('Gemini connection test successful', 'INFO', 'WEB_INTERFACE');
      return {
        success: true,
        message: 'Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        result: result.toString().substring(0, 100) + '...'
      };
    } else {
      addSystemLog('Gemini connection test failed: ' + result, 'WARN', 'WEB_INTERFACE');
      return {
        success: false,
        message: result || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        result: null
      };
    }
    
  } catch (error) {
    addSystemLog('Gemini connection test error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    return {
      success: false,
      message: error.message,
      result: null
    };
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ credentials –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function getClientCredentials() {
  try {
    var props = PropertiesService.getScriptProperties();
    var email = props.getProperty('LICENSE_EMAIL');
    var token = props.getProperty('LICENSE_TOKEN');
    var apiKey = props.getProperty('GEMINI_API_KEY');
    
    // –í–ê–ñ–ù–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è credentials
    var hasEmail = email && email.trim() !== '';
    var hasToken = token && token.trim() !== '';
    var hasApiKey = apiKey && apiKey.trim() !== '';
    
    if (!hasEmail || !hasToken) {
      return {
        ok: false,
        error: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ license email –∏ token –≤ –º–µ–Ω—é\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîë API –õ–∏—Ü–µ–Ω–∑–∏—è',
        email: email,
        token: token,
        apiKey: apiKey
      };
    }
    
    if (!hasApiKey) {
      return {
        ok: false,
        error: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Gemini API Key –≤ –º–µ–Ω—é\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí ü§ñ API –∫–ª—é—á Gemini',
        email: email,
        token: token,
        apiKey: apiKey
      };
    }
    
    return {
      ok: true,
      error: null,
      email: email,
      token: token,
      apiKey: apiKey
    };
    
  } catch (error) {
    addSystemLog('Error checking credentials: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    return {
      ok: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ credentials: ' + error.message,
      email: null,
      token: null,
      apiKey: null
    };
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞  
 */
function validatePromptInput(prompt) {
  if (!prompt) {
    throw new Error('–ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º: prompt');
  }
  
  if (typeof prompt !== 'string') {
    throw new Error('–ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
  }
  
  if (prompt.trim() === '') {
    throw new Error('–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  return prompt.trim();
}

/**
 * –û–±–µ—Ä—Ç–∫–∞ GM —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
function webGM(prompt, maxTokens, temperature) {
  try {
    // –í–ê–ñ–ù–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    var validatedPrompt = validatePromptInput(prompt);
    
    addSystemLog('Web GM request: ' + validatedPrompt.substring(0, 50) + '...', 'INFO', 'WEB_INTERFACE');
    
    var result = GM(validatedPrompt, maxTokens, temperature);
    
    addSystemLog('Web GM response received', 'INFO', 'WEB_INTERFACE');
    return result;
    
  } catch (error) {
    addSystemLog('Web GM error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function getSystemStatusData() {
  try {
    var credentials = getClientCredentials();
    var status = {
      timestamp: new Date().toISOString(),
      credentials: {
        license: credentials.ok && credentials.email && credentials.token,
        gemini: credentials.ok && credentials.apiKey
      },
      functions: {
        GM: typeof GM === 'function',
        importVkPosts: typeof importVkPosts === 'function',
        addSystemLog: typeof addSystemLog === 'function'
      },
      version: getCurrentVersion ? getCurrentVersion() : '2.0.1'
    };
    
    addSystemLog('System status checked from web interface', 'INFO', 'WEB_INTERFACE');
    return status;
    
  } catch (error) {
    addSystemLog('System status check error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    return {
      timestamp: new Date().toISOString(),
      error: error.message,
      credentials: { license: false, gemini: false },
      functions: { GM: false, importVkPosts: false, addSystemLog: false },
      version: '2.0.1'
    };
  }
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function openWebInterface() {
  try {
    addSystemLog('Opening web interface', 'INFO', 'WEB_INTERFACE');
    
    var htmlOutput = HtmlService.createHtmlOutputFromFile('WebApp')
        .setWidth(1000)
        .setHeight(600);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'AI_TABLE Web Interface');
    
  } catch (error) {
    addSystemLog('Web interface open error: ' + error.message, 'ERROR', 'WEB_INTERFACE');
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ' + error.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}