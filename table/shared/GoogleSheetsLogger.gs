/**
 * üìä GOOGLE SHEETS LOGGING SYSTEM
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –ª–∏—Å—Ç "–õ–æ–≥–∏" —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * 
 * –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø:
 * - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –ª–æ–≥–∞–º
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * - Monitoring –∏ alerting
 */

/**
 * üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø GOOGLE SHEETS LOGGER –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ Constants.gs
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
if (typeof SHEETS_LOGGER_CONFIG === 'undefined') {
  throw new Error('SHEETS_LOGGER_CONFIG not defined! Check Constants.gs');
}

/**
 * üìù –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è batch –ª–æ–≥–æ–≤
 */
var SHEETS_LOGGER_BATCH = [];
var SHEETS_LOGGER_LAST_FLUSH = 0;

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í GOOGLE SHEETS
 */
function logToGoogleSheets(level, category, operation, status, message, details, traceId, executionTime) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
    var logEntry = {
      timestamp: new Date(),
      level: level || 'INFO',
      category: category || 'SYSTEM',
      operation: operation || 'UNKNOWN',
      status: status || 'SUCCESS',
      message: message || '',
      details: details ? JSON.stringify(details) : '',
      traceId: traceId || generateTraceId('log'),
      userId: getUserEmail_() || 'unknown',
      executionTime: executionTime || 0
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ batch
    SHEETS_LOGGER_BATCH.push(logEntry);
    
    // –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è backup
    addSystemLog(
      '[' + operation + '] ' + message + ' (' + status + ')',
      level,
      category
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å flush
    var now = Date.now();
    var needFlush = (
      SHEETS_LOGGER_BATCH.length >= SHEETS_LOGGER_CONFIG.batchSize ||
      (now - SHEETS_LOGGER_LAST_FLUSH) > SHEETS_LOGGER_CONFIG.flushInterval ||
      level === 'ERROR' // –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    );
    
    if (needFlush) {
      flushLogsToSheets();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    checkLogAlerts(logEntry);
    
  } catch (error) {
    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    addSystemLog('‚ùå Failed to log to Google Sheets: ' + error.message, 'ERROR', 'LOGGER');
    addSystemLog(message, level, category); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
  }
}

/**
 * üì§ FLUSH –ª–æ–≥–æ–≤ –≤ Google Sheets
 */
function flushLogsToSheets() {
  if (SHEETS_LOGGER_BATCH.length === 0) return;
  
  try {
    var ss = SpreadsheetApp.openById(SHEETS_LOGGER_CONFIG.spreadsheetId);
    var sheet = ss.getSheetByName(SHEETS_LOGGER_CONFIG.sheetName);
    
    if (!sheet) {
      // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      sheet = createLogsSheet(ss);
    }
    
    // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    var values = SHEETS_LOGGER_BATCH.map(function(entry) {
      return [
        Utilities.formatDate(entry.timestamp, Session.getScriptTimeZone(), 'yyyy-MM-dd HH:mm:ss'),
        entry.level,
        entry.category,
        entry.operation,
        entry.status,
        entry.message,
        entry.details,
        entry.traceId,
        entry.userId,
        entry.executionTime
      ];
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–∏—Å—Ç
    var lastRow = Math.max(1, sheet.getLastRow());
    var startRow = lastRow + 1;
    
    if (values.length > 0) {
      sheet.getRange(startRow, 1, values.length, 10).setValues(values);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      formatLogRows(sheet, startRow, values.length);
    }
    
    // –û—á–∏—â–∞–µ–º batch
    SHEETS_LOGGER_BATCH = [];
    SHEETS_LOGGER_LAST_FLUSH = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫
    checkRowLimit(sheet);
    
    addSystemLog('‚úÖ Flushed ' + values.length + ' logs to Google Sheets', 'INFO', 'LOGGER');
    
  } catch (error) {
    addSystemLog('‚ùå Failed to flush logs to Google Sheets: ' + error.message, 'ERROR', 'LOGGER');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ backup
    SHEETS_LOGGER_BATCH.forEach(function(entry) {
      addSystemLog(
        '[' + entry.operation + '] ' + entry.message + ' (' + entry.status + ')',
        entry.level,
        entry.category
      );
    });
    
    SHEETS_LOGGER_BATCH = []; // –û—á–∏—â–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å
  }
}

/**
 * üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ª–æ–≥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
 */
function createLogsSheet(spreadsheet) {
  try {
    var sheet = spreadsheet.insertSheet(SHEETS_LOGGER_CONFIG.sheetName);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    var headers = [
      '–í—Ä–µ–º—è', '–£—Ä–æ–≤–µ–Ω—å', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–µ—Ä–∞—Ü–∏—è', '–°—Ç–∞—Ç—É—Å',
      '–°–æ–æ–±—â–µ–Ω–∏–µ', '–î–µ—Ç–∞–ª–∏', 'Trace ID', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (ms)'
    ];
    
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    var headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setBackground('#1c4587')
               .setFontColor('#ffffff')
               .setFontWeight('bold')
               .setFontSize(10);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    sheet.setColumnWidth(1, 150); // –í—Ä–µ–º—è
    sheet.setColumnWidth(2, 70);  // –£—Ä–æ–≤–µ–Ω—å
    sheet.setColumnWidth(3, 100); // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    sheet.setColumnWidth(4, 120); // –û–ø–µ—Ä–∞—Ü–∏—è
    sheet.setColumnWidth(5, 80);  // –°—Ç–∞—Ç—É—Å
    sheet.setColumnWidth(6, 300); // –°–æ–æ–±—â–µ–Ω–∏–µ
    sheet.setColumnWidth(7, 200); // –î–µ—Ç–∞–ª–∏
    sheet.setColumnWidth(8, 120); // Trace ID
    sheet.setColumnWidth(9, 150); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    sheet.setColumnWidth(10, 80); // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    sheet.setFrozenRows(1);
    
    addSystemLog('‚úÖ Created logs sheet: ' + SHEETS_LOGGER_CONFIG.sheetName, 'INFO', 'LOGGER');
    
    return sheet;
    
  } catch (error) {
    addSystemLog('‚ùå Failed to create logs sheet: ' + error.message, 'ERROR', 'LOGGER');
    throw error;
  }
}

/**
 * üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
 */
function formatLogRows(sheet, startRow, numRows) {
  try {
    var range = sheet.getRange(startRow, 1, numRows, 10);
    
    // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    range.setFontSize(9);
    range.setVerticalAlignment('top');
    range.setWrap(true);
    
    // –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
    for (var i = 0; i < numRows; i++) {
      var levelCell = sheet.getRange(startRow + i, 2);
      var level = levelCell.getValue();
      var rowRange = sheet.getRange(startRow + i, 1, 1, 10);
      
      switch (level) {
        case 'ERROR':
          rowRange.setBackground('#fce8e6');
          levelCell.setBackground('#cc0000').setFontColor('#ffffff');
          break;
        case 'WARN':
          rowRange.setBackground('#fef7e0');
          levelCell.setBackground('#ff9900').setFontColor('#ffffff');
          break;
        case 'INFO':
          rowRange.setBackground('#e8f5e8');
          levelCell.setBackground('#34a853').setFontColor('#ffffff');
          break;
        case 'DEBUG':
          rowRange.setBackground('#f3f3f3');
          levelCell.setBackground('#666666').setFontColor('#ffffff');
          break;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      var statusCell = sheet.getRange(startRow + i, 5);
      var status = statusCell.getValue();
      
      switch (status) {
        case 'SUCCESS':
          statusCell.setBackground('#34a853').setFontColor('#ffffff');
          break;
        case 'FAILED':
          statusCell.setBackground('#ea4335').setFontColor('#ffffff');
          break;
        case 'IN_PROGRESS':
          statusCell.setBackground('#fbbc04').setFontColor('#000000');
          break;
      }
    }
    
  } catch (error) {
    addSystemLog('‚ö†Ô∏è Failed to format log rows: ' + error.message, 'WARN', 'LOGGER');
  }
}

/**
 * üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
 */
function checkRowLimit(sheet) {
  try {
    var lastRow = sheet.getLastRow();
    
    if (lastRow > SHEETS_LOGGER_CONFIG.maxRows) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 80% –∑–∞–ø–∏—Å–µ–π)
      var rowsToDelete = lastRow - Math.floor(SHEETS_LOGGER_CONFIG.maxRows * 0.8);
      
      if (rowsToDelete > 0) {
        sheet.deleteRows(2, rowsToDelete); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        addSystemLog('üßπ Deleted ' + rowsToDelete + ' old log rows', 'INFO', 'LOGGER');
      }
    }
    
  } catch (error) {
    addSystemLog('‚ö†Ô∏è Failed to cleanup old logs: ' + error.message, 'WARN', 'LOGGER');
  }
}

/**
 * üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
 */
function checkLogAlerts(logEntry) {
  try {
    // –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    var oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    if (logEntry.level === 'ERROR') {
      var recentErrors = SHEETS_LOGGER_BATCH.filter(function(entry) {
        return entry.level === 'ERROR' && entry.timestamp > oneHourAgo;
      }).length;
      
      if (recentErrors >= SHEETS_LOGGER_CONFIG.errorThreshold) {
        sendAlert('ERROR_THRESHOLD', 'Too many errors: ' + recentErrors + ' in last hour');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (logEntry.executionTime > SHEETS_LOGGER_CONFIG.performanceThreshold) {
      sendAlert('PERFORMANCE', 'Slow operation: ' + logEntry.operation + ' took ' + logEntry.executionTime + 'ms');
    }
    
  } catch (error) {
    addSystemLog('‚ö†Ô∏è Failed to check alerts: ' + error.message, 'WARN', 'LOGGER');
  }
}

/**
 * üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
 */
function sendAlert(type, message) {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
    addSystemLog('üö® ALERT [' + type + ']: ' + message, 'ERROR', 'ALERTS');
    
    // TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email/Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
  } catch (error) {
    addSystemLog('‚ùå Failed to send alert: ' + error.message, 'ERROR', 'LOGGER');
  }
}

/**
 * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserEmail_() {
  try {
    return Session.getActiveUser().getEmail();
  } catch (e) {
    return 'unknown';
  }
}

/**
 * üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò
 * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º addSystemLog –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
 */
function addSystemLogWithSheets(message, level, category, operation, status, details, traceId, executionTime) {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (cache)
  addSystemLog(message, level, category);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets
  logToGoogleSheets(level, category, operation, status, message, details, traceId, executionTime);
}

/**
 * üìä –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –û–ü–ï–†–ê–¶–ò–ô
 */

// Collect Config –æ–ø–µ—Ä–∞—Ü–∏–∏
function logCollectConfigOperation(step, target, status, details, traceId, executionTime, error) {
  var level = error ? 'ERROR' : (step === 'START' || step === 'END') ? 'INFO' : 'DEBUG';
  var message;

  switch(step) {
    case 'START':
      message = 'üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —è—á–µ–π–∫–∏ ' + target;
      break;
    case 'LOAD_CONFIG':
      message = 'üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ' + target;
      break;
    case 'COLLECT_SYSTEM_PROMPT':
      message = 'üìç –°–æ–±—Ä–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç';
      break;
    case 'COLLECT_USER_DATA':
      message = 'üì¶ –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      break;
    case 'API_CALL':
      message = 'ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API';
      break;
    case 'API_RESPONSE':
      message = '‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API';
      break;
    case 'WRITE_RESULT':
      message = '‚úçÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —è—á–µ–π–∫—É ' + target;
      break;
    case 'END':
      message = 'üèÅ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è —è—á–µ–π–∫–∏ ' + target;
      break;
    case 'ERROR':
      message = '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è ' + target + ': ' + error.message;
      break;
    default:
      message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥';
  }
  
  logToGoogleSheets(level, 'COLLECT_CONFIG', step, status, message, details, traceId, executionTime);
}


// GM —Ñ—É–Ω–∫—Ü–∏–∏
function logGMOperation(prompt, result, executionTime, traceId, error) {
  var status = error ? 'FAILED' : 'SUCCESS';
  var message = error ? 
    'GM failed: ' + error.message : 
    'GM success: ' + prompt.substring(0, 50) + '... ‚Üí ' + result.length + ' chars';
  
  var details = {
    promptLength: prompt.length,
    resultLength: result ? result.length : 0,
    error: error ? error.message : null,
    cacheHit: result && result.includes('–∏–∑ –∫—ç—à–∞')
  };
  
  logToGoogleSheets(error ? 'ERROR' : 'INFO', 'GEMINI', 'GM', status, message, details, traceId, executionTime);
}

// VK Import
function logVKImport(url, count, result, executionTime, traceId, error) {
  var status = error ? 'FAILED' : 'SUCCESS';
  var message = error ?
    'VK Import failed: ' + error.message :
    'VK Import success: ' + count + ' posts from ' + url;
  
  var details = {
    url: url,
    requestedCount: count,
    actualCount: result ? result.length : 0,
    error: error ? error.message : null
  };
  
  logToGoogleSheets(error ? 'ERROR' : 'INFO', 'VK', 'IMPORT', status, message, details, traceId, executionTime);
}

// Security Tests
function logSecurityTest(testName, result, executionTime, traceId) {
  var status = result.passed ? 'SUCCESS' : 'FAILED';
  var message = 'Security test: ' + testName + ' ‚Üí ' + status;
  
  var details = {
    testName: testName,
    passed: result.passed,
    details: result.details,
    recommendations: result.recommendations
  };
  
  logToGoogleSheets(result.passed ? 'INFO' : 'WARN', 'SECURITY', 'TEST', status, message, details, traceId, executionTime);
}

// Atomic Operations
function logAtomicOperation(operation, sheetName, result, executionTime, traceId, error) {
  var status = error ? 'FAILED' : 'SUCCESS';
  var message = 'Atomic ' + operation + ' on ' + sheetName + ': ' + status;
  
  var details = {
    operation: operation,
    sheetName: sheetName,
    backupCreated: result ? result.backupName : null,
    error: error ? error.message : null
  };
  
  logToGoogleSheets(error ? 'ERROR' : 'INFO', 'ATOMIC', operation.toUpperCase(), status, message, details, traceId, executionTime);
}

/**
 * üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏)
 */
function forceFlushAllLogs() {
  if (SHEETS_LOGGER_BATCH.length > 0) {
    addSystemLog('üöÄ Force flushing ' + SHEETS_LOGGER_BATCH.length + ' logs to Google Sheets', 'INFO', 'LOGGER');
    flushLogsToSheets();
  }
}

/**
 * üìà –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
function analyzeLogsAndFixErrors() {
  try {
    var ss = SpreadsheetApp.openById(SHEETS_LOGGER_CONFIG.spreadsheetId);
    var sheet = ss.getSheetByName(SHEETS_LOGGER_CONFIG.sheetName);
    
    if (!sheet) {
      addSystemLog('‚ö†Ô∏è Logs sheet not found for analysis', 'WARN', 'LOGGER');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    var lastRow = sheet.getLastRow();
    var startRow = Math.max(2, lastRow - 99);
    
    if (lastRow < 2) {
      addSystemLog('‚ÑπÔ∏è No logs to analyze', 'INFO', 'LOGGER');
      return;
    }
    
    var data = sheet.getRange(startRow, 1, lastRow - startRow + 1, 10).getValues();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
    var errorPatterns = {};
    var performanceIssues = [];
    
    data.forEach(function(row) {
      var level = row[1];
      var category = row[2];
      var operation = row[3];
      var status = row[4];
      var message = row[5];
      var executionTime = row[9];
      
      // –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏
      if (level === 'ERROR') {
        var pattern = category + ':' + operation;
        errorPatterns[pattern] = (errorPatterns[pattern] || 0) + 1;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (executionTime > 10000) { // >10 —Å–µ–∫—É–Ω–¥
        performanceIssues.push({
          operation: operation,
          time: executionTime,
          message: message
        });
      }
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    var report = generateErrorAnalysisReport(errorPatterns, performanceIssues);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    logToGoogleSheets('INFO', 'ANALYTICS', 'ERROR_ANALYSIS', 'SUCCESS', 'Completed log analysis', {
      errorPatterns: errorPatterns,
      performanceIssues: performanceIssues.length,
      recommendations: report.recommendations
    }, generateTraceId('analysis'));
    
    return report;
    
  } catch (error) {
    addSystemLog('‚ùå Failed to analyze logs: ' + error.message, 'ERROR', 'LOGGER');
    return null;
  }
}

/**
 * üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö
 */
function generateErrorAnalysisReport(errorPatterns, performanceIssues) {
  var recommendations = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  Object.keys(errorPatterns).forEach(function(pattern) {
    var count = errorPatterns[pattern];
    if (count >= 5) {
      recommendations.push('üî• CRITICAL: ' + pattern + ' failed ' + count + ' times - needs immediate attention');
    } else if (count >= 3) {
      recommendations.push('‚ö†Ô∏è WARNING: ' + pattern + ' failed ' + count + ' times - investigate');
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (performanceIssues.length > 0) {
    recommendations.push('üêå PERFORMANCE: ' + performanceIssues.length + ' slow operations detected');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    var slowOps = {};
    performanceIssues.forEach(function(issue) {
      slowOps[issue.operation] = (slowOps[issue.operation] || 0) + 1;
    });
    
    Object.keys(slowOps).forEach(function(op) {
      recommendations.push('  ‚Üí ' + op + ': ' + slowOps[op] + ' slow executions');
    });
  }
  
  return {
    errorPatterns: errorPatterns,
    performanceIssues: performanceIssues,
    recommendations: recommendations
  };
}
