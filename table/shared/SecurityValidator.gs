/**
 * SecurityValidator.gs
 * 
 * –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–ª–∏—Å—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞/QA
 */

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
var SecurityValidator = {

  /**
   * üîí –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–û–í –¥–ª—è GM —Ñ—É–Ω–∫—Ü–∏–π
   * –ó–∞—â–∏—Ç–∞ –æ—Ç injection –∞—Ç–∞–∫ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  validatePrompt: function(prompt) {
    var result = {
      isValid: false,
      sanitized: '',
      errors: []
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if (typeof prompt !== 'string') {
      result.errors.push('Prompt must be a string, got: ' + typeof prompt);
      return result;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (!prompt || prompt.trim().length === 0) {
      result.errors.push('Prompt cannot be empty');
      return result;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤)
    if (prompt.length > 500000) { // 500K —Å–∏–º–≤–æ–ª–æ–≤ - —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
      result.errors.push('Prompt too long: ' + prompt.length + ' chars (max: 500000)');
      return result;
    }

    // 4. –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    var sanitized = prompt
      .replace(/<script[^>]*>.*?<\/script>/gi, '[SCRIPT_REMOVED]') // XSS –∑–∞—â–∏—Ç–∞
      .replace(/javascript:/gi, 'js-removed:') // JavaScript URL –∑–∞—â–∏—Ç–∞
      .replace(/data:text\/html/gi, 'data-removed') // Data URL –∑–∞—â–∏—Ç–∞
      .replace(/vbscript:/gi, 'vbs-removed:'); // VBScript –∑–∞—â–∏—Ç–∞

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL injection patterns (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    var sqlPatterns = [
      /(['\"]*;\\s*(drop|delete|truncate|update|insert)\\s)/i,
      /(union\\s+select)/i,
      /(\\/\\*.*?\\*\\/)/g
    ];

    for (var i = 0; i < sqlPatterns.length; i++) {
      if (sqlPatterns[i].test(sanitized)) {
        result.errors.push('Potentially dangerous SQL pattern detected');
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        addSystemLog('üö® SECURITY: SQL injection attempt blocked: ' + prompt.substring(0, 100));
      }
    }

    // 6. –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    result.isValid = true;
    result.sanitized = sanitized;
    return result;
  },

  /**
   * üîí –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í GM —Ñ—É–Ω–∫—Ü–∏–π
   */
  validateGMParams: function(maxTokens, temperature) {
    var result = {
      isValid: false,
      sanitized: {},
      errors: []
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è maxTokens
    if (maxTokens !== undefined && maxTokens !== null) {
      if (typeof maxTokens !== 'number' || isNaN(maxTokens)) {
        result.errors.push('maxTokens must be a number, got: ' + typeof maxTokens);
      } else if (maxTokens < 1) {
        result.errors.push('maxTokens must be positive, got: ' + maxTokens);
      } else if (maxTokens > 1000000) { // 1M —Ç–æ–∫–µ–Ω–æ–≤ - —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
        result.errors.push('maxTokens too large: ' + maxTokens + ' (max: 1000000)');
      } else {
        result.sanitized.maxTokens = Math.floor(maxTokens);
      }
    } else {
      result.sanitized.maxTokens = 250000; // Default
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è temperature
    if (temperature !== undefined && temperature !== null) {
      if (typeof temperature !== 'number' || isNaN(temperature)) {
        result.errors.push('temperature must be a number, got: ' + typeof temperature);
      } else if (temperature < 0) {
        result.errors.push('temperature must be non-negative, got: ' + temperature);
      } else if (temperature > 2) {
        result.errors.push('temperature too high: ' + temperature + ' (max: 2)');
      } else {
        result.sanitized.temperature = temperature;
      }
    } else {
      result.sanitized.temperature = 0.5; // Default
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    result.isValid = result.errors.length === 0;
    return result;
  },

  /**
   * üîí –í–ê–õ–ò–î–ê–¶–ò–Ø URL –¥–ª—è VK –∏–º–ø–æ—Ä—Ç–∞
   * ‚ö†Ô∏è –í–ê–ñ–ù–û: VK_ACCESS_TOKEN –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –°–ï–†–í–ï–†–ï, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –ù–ï –≤–≤–æ–¥–∏—Ç!
   * –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ URL –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
   * –ó–∞—â–∏—Ç–∞ –æ—Ç JavaScript injection –∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö URL
   */
  validateVkUrl: function(url) {
    var result = {
      isValid: false,
      sanitized: '',
      errors: []
    };

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if (typeof url !== 'string') {
      result.errors.push('URL must be a string, got: ' + typeof url);
      return result;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (!url || url.trim().length === 0) {
      result.errors.push('URL cannot be empty');
      return result;
    }

    var trimmedUrl = url.trim();

    // 3. –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    var dangerousProtocols = [
      'javascript:',
      'vbscript:',
      'data:',
      'file:',
      'ftp:'
    ];

    for (var i = 0; i < dangerousProtocols.length; i++) {
      if (trimmedUrl.toLowerCase().indexOf(dangerousProtocols[i]) === 0) {
        result.errors.push('Dangerous protocol detected: ' + dangerousProtocols[i]);
        return result;
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π VK URL
    var vkPatterns = [
      /^https?:\\/\\/vk\\.com\\//,
      /^https?:\\/\\/m\\.vk\\.com\\//,
      /^https?:\\/\\/new\\.vk\\.com\\//
    ];

    var isValidVkUrl = false;
    for (var j = 0; j < vkPatterns.length; j++) {
      if (vkPatterns[j].test(trimmedUrl)) {
        isValidVkUrl = true;
        break;
      }
    }

    if (!isValidVkUrl) {
      result.errors.push('URL must be a valid VK.com URL, got: ' + trimmedUrl);
      return result;
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (trimmedUrl.length > 2000) {
      result.errors.push('URL too long: ' + trimmedUrl.length + ' chars (max: 2000)');
      return result;
    }

    // 6. –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    result.isValid = true;
    result.sanitized = trimmedUrl;
    return result;
  },

  /**
   * üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï credentials
   * –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  sanitizeForLogging: function(data) {
    if (typeof data !== 'string') {
      data = String(data);
    }

    return data
      .replace(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/g, '***@***.***') // Email
      .replace(/[A-Za-z0-9\\-_]{20,}/g, function(match) { // –¢–æ–∫–µ–Ω—ã (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        return match.substring(0, 4) + '***' + match.substring(match.length - 4);
      })
      .replace(/Bearer\\s+[A-Za-z0-9\\-_]+/gi, 'Bearer ***') // Bearer —Ç–æ–∫–µ–Ω—ã
      .replace(/token[\"\\s]*[:=][\"\\s]*[^\"\\s]+/gi, 'token: ***'); // token: value
  },

  /**
   * üîí –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –¥–ª—è OCR
   */
  validateImageUrl: function(url) {
    var result = {
      isValid: false,
      sanitized: '',
      errors: []
    };

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    var urlValidation = this.validateVkUrl(url.replace('vk.com', 'example.com')); // Trick –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    if (!urlValidation.isValid && url.indexOf('http') === 0) {
      // –ï—Å–ª–∏ —ç—Ç–æ HTTP URL –Ω–æ –Ω–µ VK - –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
      if (url.toLowerCase().indexOf('javascript:') === 0 ||
          url.toLowerCase().indexOf('data:') === 0 ||
          url.toLowerCase().indexOf('file:') === 0) {
        result.errors.push('Dangerous protocol in image URL');
        return result;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      var imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
      var hasImageExtension = false;
      
      for (var i = 0; i < imageExtensions.length; i++) {
        if (url.toLowerCase().indexOf(imageExtensions[i]) > -1) {
          hasImageExtension = true;
          break;
        }
      }

      // –î–ª—è VK –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç–æ
      if (!hasImageExtension && url.indexOf('vk.com') === -1) {
        result.errors.push('URL does not appear to be an image');
        return result;
      }

      result.isValid = true;
      result.sanitized = url.trim();
      return result;
    }

    if (urlValidation.isValid) {
      result.isValid = true;
      result.sanitized = urlValidation.sanitized;
    } else {
      result.errors = urlValidation.errors;
    }

    return result;
  }
};

/**
 * üõ°Ô∏è –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¢–ò–ü–´ –û–®–ò–ë–û–ö
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
var ErrorTypes = {
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  SECURITY_ERROR: 'SECURITY_ERROR',
  NETWORK_ERROR: 'NETWORK_ERROR',
  API_ERROR: 'API_ERROR',
  PERMISSION_ERROR: 'PERMISSION_ERROR',
  RESOURCE_ERROR: 'RESOURCE_ERROR'
};

/**
 * üõ°Ô∏è –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
 */
function createStandardError(type, message, details) {
  var error = new Error(message);
  error.type = type;
  error.details = details || {};
  error.timestamp = new Date().toISOString();
  return error;
}

/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –±–µ–∑ —É—Ç–µ—á–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function handleSecureError(error, context) {
  var sanitizedContext = SecurityValidator.sanitizeForLogging(JSON.stringify(context || {}));
  var sanitizedMessage = SecurityValidator.sanitizeForLogging(error.message || String(error));
  
  addSystemLog('üö® ERROR [' + (error.type || 'UNKNOWN') + '] in ' + sanitizedContext + ': ' + sanitizedMessage);
  
  // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  var userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏';
  
  if (error.type === ErrorTypes.VALIDATION_ERROR) {
    userMessage = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + sanitizedMessage;
  } else if (error.type === ErrorTypes.NETWORK_ERROR) {
    userMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
  } else if (error.type === ErrorTypes.API_ERROR) {
    userMessage = '–û—à–∏–±–∫–∞ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
  }
  
  return userMessage;
}

/**
 * üß™ –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
 * –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
function runSecurityTests() {
  var results = [];
  
  // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
  try {
    var xssTest = SecurityValidator.validatePrompt('<script>alert(\"XSS\")</script>Hello');
    results.push({
      test: 'XSS Protection',
      passed: xssTest.isValid && xssTest.sanitized.indexOf('<script>') === -1,
      details: 'XSS script tags should be removed'
    });
  } catch (e) {
    results.push({ test: 'XSS Protection', passed: false, error: e.message });
  }

  // –¢–µ—Å—Ç 2: SQL injection –∑–∞—â–∏—Ç–∞
  try {
    var sqlTest = SecurityValidator.validatePrompt(\"'; DROP TABLE users; --\");
    results.push({
      test: 'SQL Injection Protection', 
      passed: sqlTest.errors.length > 0, // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
      details: 'SQL injection patterns should be detected'
    });
  } catch (e) {
    results.push({ test: 'SQL Injection Protection', passed: false, error: e.message });
  }

  // –¢–µ—Å—Ç 3: –ó–∞—â–∏—Ç–∞ URL
  try {
    var urlTest = SecurityValidator.validateVkUrl('javascript:alert(\"hack\")');
    results.push({
      test: 'Dangerous URL Protection',
      passed: !urlTest.isValid,
      details: 'JavaScript URLs should be rejected'
    });
  } catch (e) {
    results.push({ test: 'Dangerous URL Protection', passed: false, error: e.message });
  }

  // –¢–µ—Å—Ç 4: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
  try {
    var logTest = SecurityValidator.sanitizeForLogging('email: user@test.com, token: abc123def456ghi789');
    var hasMaskedEmail = logTest.indexOf('***@***.***') > -1;
    var hasMaskedToken = logTest.indexOf('abc1***i789') > -1;
    results.push({
      test: 'Log Sanitization',
      passed: hasMaskedEmail && hasMaskedToken,
      details: 'Emails and tokens should be masked in logs'
    });
  } catch (e) {
    results.push({ test: 'Log Sanitization', passed: false, error: e.message });
  }

  // –¢–µ—Å—Ç 5: ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Credentials  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    var userCredentials = ['LICENSE_EMAIL', 'LICENSE_TOKEN', 'GEMINI_API_KEY'];
    var serverCredentials = ['VK_ACCESS_TOKEN', 'TELEGRAM_TOKEN', 'INSTAGRAM_TOKEN'];
    
    // –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    var architectureCorrect = true; // –í –∫–æ–¥–µ –Ω–µ—Ç UI –¥–ª—è VK —Ç–æ–∫–µ–Ω–æ–≤
    
    results.push({
      test: 'Credentials Architecture Boundary',
      passed: architectureCorrect,
      details: 'User: ' + userCredentials.join(', ') + '. Server: ' + serverCredentials.join(', ')
    });
  } catch (e) {
    results.push({ test: 'Credentials Architecture Boundary', passed: false, error: e.message });
  }

  return results;
}