/**
 * VK Integration Test - –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ VK API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É handleWallGet_ –∏ VkCollector.collectPosts
 */

/**
 * –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ VK API
 */
function testVkIntegratedFunctionality() {
  var testResults = {
    timestamp: new Date().toISOString(),
    architecture: 'INTEGRATED VK API (direct to VK without VK_PARSER)',
    tests: {},
    summary: { total: 0, passed: 0, failed: 0 }
  };
  
  try {
    console.log('üî• INTEGRATION TEST: VK —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ VK_TOKEN –≤ Properties
    testResults.tests.vk_token_check = testVkTokenAvailability();
    
    // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç handleWallGet_
    testResults.tests.handle_wall_get = testHandleWallGet();
    
    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç VkCollector.collectPosts
    testResults.tests.vk_collector_posts = testVkCollectorPosts();
    
    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ handleVkImport
    testResults.tests.server_vk_import = testServerVkImport();
    
    // –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    testResults.tests.baseline_comparison = compareWithVkBaseline();
    
    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Object.keys(testResults.tests).forEach(function(testName) {
      testResults.summary.total++;
      if (testResults.tests[testName].passed) {
        testResults.summary.passed++;
      } else {
        testResults.summary.failed++;
      }
    });
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    var successRate = Math.round((testResults.summary.passed / testResults.summary.total) * 100);
    
    console.log('üìä INTEGRATION –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ' + testResults.summary.passed + '/' + testResults.summary.total + ' (' + successRate + '%)');
    
    if (testResults.summary.failed > 0) {
      console.log('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ' + testResults.summary.failed);
      Object.keys(testResults.tests).forEach(function(testName) {
        if (!testResults.tests[testName].passed) {
          console.log('  ‚Ä¢ ' + testName + ': ' + testResults.tests[testName].error);
        }
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    saveIntegrationResults(testResults);
    
    return testResults;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ' + error.message);
    return {
      timestamp: new Date().toISOString(),
      architecture: 'INTEGRATED',
      error: error.message,
      summary: { total: 0, passed: 0, failed: 1 }
    };
  }
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è VK_TOKEN –≤ Properties
 */
function testVkTokenAvailability() {
  try {
    var token = PropertiesService.getScriptProperties().getProperty('VK_TOKEN');
    
    if (!token) {
      return {
        passed: false,
        message: 'VK_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Script Properties',
        error: 'VK_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
    if (token.length < 10) {
      return {
        passed: false,
        message: 'VK_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π',
        error: '–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª—É—é –¥–ª–∏–Ω—É: ' + token.length + ' —Å–∏–º–≤–æ–ª–æ–≤'
      };
    }
    
    return {
      passed: true,
      message: 'VK_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { tokenLength: token.length, masked: token.substring(0, 10) + '***' }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VK_TOKEN',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç handleWallGet_
 */
function testHandleWallGet() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof handleWallGet_ !== 'function') {
      throw new Error('–§—É–Ω–∫—Ü–∏—è handleWallGet_ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º (–î—É—Ä–æ–≤, ID: 1)
    var posts = handleWallGet_(1, 3);
    
    if (!Array.isArray(posts)) {
      throw new Error('handleWallGet_ –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤: ' + typeof posts);
    }
    
    if (posts.length === 0) {
      throw new Error('handleWallGet_ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    var firstPost = posts[0];
    var requiredFields = ['date', 'link', 'text', 'number', 'comments', 'likes'];
    
    for (var i = 0; i < requiredFields.length; i++) {
      if (!(requiredFields[i] in firstPost)) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: ' + requiredFields[i]);
      }
    }
    
    return {
      passed: true,
      message: 'handleWallGet_ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { 
        postsCount: posts.length,
        firstPost: {
          hasText: !!firstPost.text,
          hasLink: !!firstPost.link,
          hasDate: !!firstPost.date,
          structure: Object.keys(firstPost)
        }
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'handleWallGet_ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 3: –¢–µ—Å—Ç VkCollector.collectPosts
 */
function testVkCollectorPosts() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ VkCollector —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç collectPosts
    if (typeof VkCollector === 'undefined') {
      throw new Error('VkCollector –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    }
    
    if (typeof VkCollector.collectPosts !== 'function') {
      throw new Error('VkCollector.collectPosts –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º collectPosts
    var result = VkCollector.collectPosts(1, 3, 'test-trace');
    
    if (typeof result !== 'object' || !result) {
      throw new Error('collectPosts –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: ' + typeof result);
    }
    
    if (!result.ok) {
      throw new Error('collectPosts –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ' + (result.error || 'unknown'));
    }
    
    if (!Array.isArray(result.data)) {
      throw new Error('collectPosts.data –Ω–µ –º–∞—Å—Å–∏–≤: ' + typeof result.data);
    }
    
    if (result.data.length === 0) {
      throw new Error('collectPosts.data –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    }
    
    return {
      passed: true,
      message: 'VkCollector.collectPosts —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { 
        ok: result.ok,
        count: result.count,
        dataLength: result.data.length,
        traceId: result.traceId
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'VkCollector.collectPosts –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ handleVkImport
 */
function testServerVkImport() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handleVkImport —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof handleVkImport !== 'function') {
      throw new Error('handleVkImport —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ createDataCollector —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof createDataCollector !== 'function') {
      throw new Error('createDataCollector —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ VK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    var vkCollector = createDataCollector('vk');
    
    if (!vkCollector || typeof vkCollector.collectPosts !== 'function') {
      throw new Error('createDataCollector –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VK –∫–æ–ª–ª–µ–∫—Ç–æ—Ä');
    }
    
    return {
      passed: true,
      message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ VK —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
      details: { 
        handleVkImport: 'function',
        createDataCollector: 'function',
        vkCollector: 'object with collectPosts'
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ VK —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
function compareWithVkBaseline() {
  try {
    var baseline = loadBaselineResults();
    
    if (!baseline) {
      return {
        passed: true,
        message: 'Baseline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ',
        details: { reason: 'no_baseline' }
      };
    }
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ baseline –Ω–µ —Ä–∞–±–æ—Ç–∞–ª
    var integrationWorks = (typeof handleWallGet_ === 'function') && (typeof VkCollector.collectPosts === 'function');
    
    return {
      passed: integrationWorks,
      message: integrationWorks ? '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ baseline' : '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ö—É–∂–µ baseline',
      details: { 
        integrationWorks: integrationWorks,
        baselineTimestamp: baseline.timestamp,
        baselineTests: baseline.summary
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å baseline',
      error: error.message
    };
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
function saveIntegrationResults(results) {
  try {
    var properties = PropertiesService.getScriptProperties();
    var integrationData = JSON.stringify({
      timestamp: results.timestamp,
      architecture: results.architecture,
      summary: results.summary,
      tests: Object.keys(results.tests).map(function(testName) {
        return {
          name: testName,
          passed: results.tests[testName].passed,
          message: results.tests[testName].message
        };
      })
    });
    
    properties.setProperty('VK_INTEGRATION_RESULTS', integrationData);
    console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ' + error.message);
  }
}

/**
 * –ë–´–°–¢–†–´–ô –¢–ï–°–¢: –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function quickVkIntegrationTest() {
  console.log('‚ö° –ë–´–°–¢–†–´–ô VK INTEGRATION –¢–ï–°–¢');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ VK_TOKEN...');
    var tokenCheck = testVkTokenAvailability();
    console.log(tokenCheck.passed ? '‚úÖ VK_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå VK_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ' + tokenCheck.error);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ handleWallGet_
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ handleWallGet_...');
    var wallGetCheck = testHandleWallGet();
    console.log(wallGetCheck.passed ? '‚úÖ handleWallGet_ —Ä–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå handleWallGet_ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + wallGetCheck.error);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ VkCollector.collectPosts
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ VkCollector.collectPosts...');
    var collectorCheck = testVkCollectorPosts();
    console.log(collectorCheck.passed ? '‚úÖ VkCollector.collectPosts —Ä–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå VkCollector.collectPosts –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + collectorCheck.error);
    
    var passedTests = [tokenCheck.passed, wallGetCheck.passed, collectorCheck.passed].filter(Boolean).length;
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + passedTests + '/3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏');
    
    return passedTests === 3;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ' + error.message);
    return false;
  }
}

/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å baseline
 */
function finalVkComparison() {
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: Baseline vs Integration');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Ç–µ—Å—Ç–∞
    console.log('1. –ó–∞–ø—É—Å–∫ baseline —Ç–µ—Å—Ç–æ–≤...');
    var baseline = testVkBaselineFunctionality(); // –ò–∑ VkBaselineTests.gs
    
    console.log('2. –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    var integration = testVkIntegratedFunctionality();
    
    console.log('3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log('   Baseline: ' + baseline.summary.passed + '/' + baseline.summary.total + ' —Ç–µ—Å—Ç–æ–≤');
    console.log('   Integration: ' + integration.summary.passed + '/' + integration.summary.total + ' —Ç–µ—Å—Ç–æ–≤');
    
    var improvement = integration.summary.passed - baseline.summary.passed;
    var regression = baseline.summary.passed - integration.summary.passed;
    
    if (improvement > 0) {
      console.log('‚úÖ –£–õ–£–ß–®–ï–ù–ò–ï: +' + improvement + ' —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é');
    } else if (regression > 0) {
      console.log('‚ùå –†–ï–ì–†–ï–°–°–ò–Ø: -' + regression + ' —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    } else {
      console.log('‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
    }
    
    return {
      baseline: baseline,
      integration: integration,
      improvement: improvement,
      regression: regression
    };
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ' + error.message);
    return null;
  }
}