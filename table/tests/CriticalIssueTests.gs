/**
 * Critical Issues & Edge Case Tests v1.0
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
 * –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –ò–• –ü–†–û–í–ï–†–ö–ê
 */

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 1: USER_AGENT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ Instagram –∑–∞–ø—Ä–æ—Å–∞—Ö
 */
function testInstagramUserAgentIssue() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å USER_AGENT –≤ Instagram', 'WARN', 'CRITICAL_TEST');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ USER_AGENT
    if (typeof USER_AGENT === 'undefined') {
      throw new Error('USER_AGENT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! Instagram –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    addSystemLog('‚úÖ USER_AGENT –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ' + USER_AGENT, 'INFO', 'CRITICAL_TEST');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Instagram
    var testUrl = 'https://www.instagram.com/api/v1/users/web_profile_info/?username=instagram';
    var options = {
      method: 'GET',
      headers: {
        'User-Agent': USER_AGENT,
        'X-IG-App-ID': '936619743392459'
      },
      muteHttpExceptions: true
    };
    
    var response = UrlFetchApp.fetch(testUrl, options);
    var statusCode = response.getResponseCode();
    
    if (statusCode === 200) {
      addSystemLog('‚úÖ Instagram API –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 200)', 'INFO', 'CRITICAL_TEST');
      return { success: true, statusCode: statusCode };
    } else {
      addSystemLog('‚ö†Ô∏è Instagram API –≤–µ—Ä–Ω—É–ª: HTTP ' + statusCode, 'WARN', 'CRITICAL_TEST');
      return { success: false, statusCode: statusCode, issue: 'HTTP_' + statusCode };
    }
    
  } catch (error) {
    addSystemLog('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Instagram API: ' + error.message, 'ERROR', 'CRITICAL_TEST');
    return { success: false, error: error.message };
  }
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 2: VK_PARSER_URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
function testVKParserAvailability() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VK_PARSER_URL', 'WARN', 'CRITICAL_TEST');
  
  try {
    if (typeof VK_PARSER_URL === 'undefined') {
      throw new Error('VK_PARSER_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
    }
    
    addSystemLog('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º VK Parser: ' + VK_PARSER_URL, 'INFO', 'CRITICAL_TEST');
    
    var testUrl = VK_PARSER_URL + '?owner=durov&count=1';
    var response = UrlFetchApp.fetch(testUrl, {
      method: 'GET',
      headers: { 'User-Agent': USER_AGENT },
      muteHttpExceptions: true,
      followRedirects: true
    });
    
    var statusCode = response.getResponseCode();
    
    if (statusCode === 200) {
      var content = response.getContentText();
      var data = JSON.parse(content);
      
      if (data.error) {
        addSystemLog('‚ö†Ô∏è VK Parser –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ' + data.error, 'WARN', 'CRITICAL_TEST');
        return { success: false, vkError: data.error };
      }
      
      if (data.posts && data.posts.length > 0) {
        addSystemLog('‚úÖ VK Parser —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç', 'INFO', 'CRITICAL_TEST');
        return { success: true, posts: data.posts.length };
      } else {
        addSystemLog('‚ö†Ô∏è VK Parser –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', 'WARN', 'CRITICAL_TEST');
        return { success: false, issue: 'EMPTY_RESULT' };
      }
    } else {
      addSystemLog('‚ùå VK Parser –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP ' + statusCode, 'ERROR', 'CRITICAL_TEST');
      return { success: false, statusCode: statusCode };
    }
    
  } catch (error) {
    addSystemLog('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ VK Parser: ' + error.message, 'ERROR', 'CRITICAL_TEST');
    return { success: false, error: error.message };
  }
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 3: Telegram –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Bot API
 */
function testTelegramAccessibility() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤', 'WARN', 'CRITICAL_TEST');
  
  var testChannels = ['durov', 'telegram', 'breakingmash'];
  var results = [];
  
  testChannels.forEach(function(channel) {
    try {
      addSystemLog('‚Üí –¢–µ—Å—Ç–∏—Ä—É–µ–º t.me/s/' + channel, 'INFO', 'CRITICAL_TEST');
      
      var url = 'https://t.me/s/' + channel;
      var response = UrlFetchApp.fetch(url, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; GoogleAppsScript)',
          'Accept': 'text/html,application/xhtml+xml'
        },
        muteHttpExceptions: true,
        followRedirects: true
      });
      
      var statusCode = response.getResponseCode();
      var content = response.getContentText();
      
      if (statusCode === 200) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–æ–≤
        var hasMessages = content.includes('tgme_widget_message');
        
        if (hasMessages) {
          addSystemLog('‚úÖ ' + channel + ': –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç—ã', 'INFO', 'CRITICAL_TEST');
          results.push({ channel: channel, success: true });
        } else {
          addSystemLog('‚ö†Ô∏è ' + channel + ': –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç–æ–≤', 'WARN', 'CRITICAL_TEST');
          results.push({ channel: channel, success: false, issue: 'NO_MESSAGES' });
        }
      } else {
        addSystemLog('‚ùå ' + channel + ': –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP ' + statusCode + ')', 'ERROR', 'CRITICAL_TEST');
        results.push({ channel: channel, success: false, statusCode: statusCode });
      }
      
      Utilities.sleep(1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      
    } catch (error) {
      addSystemLog('‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ' + channel + ': ' + error.message, 'ERROR', 'CRITICAL_TEST');
      results.push({ channel: channel, success: false, error: error.message });
    }
  });
  
  var successCount = results.filter(function(r) { return r.success; }).length;
  addSystemLog('üìä Telegram: ' + successCount + '/' + testChannels.length + ' –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã', 
              successCount > 0 ? 'INFO' : 'ERROR', 'CRITICAL_TEST');
  
  return { success: successCount > 0, results: results };
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 4: Rate Limiting –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
 */
function testRateLimitingHandling() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limiting', 'WARN', 'CRITICAL_TEST');
  
  var results = [];
  
  // –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Instagram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  for (var i = 0; i < 3; i++) {
    try {
      var response = UrlFetchApp.fetch('https://instagram.com/instagram', {
        method: 'HEAD',
        muteHttpExceptions: true
      });
      
      var statusCode = response.getResponseCode();
      results.push({ attempt: i + 1, statusCode: statusCode });
      
      if (statusCode === 429) {
        addSystemLog('‚ö†Ô∏è Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ' + (i + 1), 'WARN', 'CRITICAL_TEST');
        break;
      }
      
    } catch (error) {
      results.push({ attempt: i + 1, error: error.message });
    }
  }
  
  return { results: results };
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 5: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function testInvalidInputHandling() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'WARN', 'CRITICAL_TEST');
  
  var invalidInputs = [
    { input: '', platform: null, expected: 'error' },
    { input: 'http://malicious-site.com', platform: null, expected: 'error' },
    { input: 'javascript:alert("xss")', platform: null, expected: 'error' },
    { input: '../../etc/passwd', platform: null, expected: 'error' },
    { input: 'very-long-string-' + 'x'.repeat(1000), platform: null, expected: 'error' },
    { input: null, platform: null, expected: 'error' },
    { input: undefined, platform: null, expected: 'error' },
    { input: 123456, platform: null, expected: 'error' },
    { input: 'durov', platform: 'invalid-platform', expected: 'error' }
  ];
  
  var results = [];
  
  invalidInputs.forEach(function(test) {
    try {
      var result = parseSource(test.input, test.platform);
      
      // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏, –Ω–æ –æ–∂–∏–¥–∞–ª–∞—Å—å - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
      if (test.expected === 'error') {
        addSystemLog('‚ùå –ù–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –¥–ª—è: ' + JSON.stringify(test.input), 'ERROR', 'CRITICAL_TEST');
        results.push({ input: test.input, expected: 'error', actual: 'success', problem: true });
      }
      
    } catch (error) {
      if (test.expected === 'error') {
        addSystemLog('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: ' + test.input, 'INFO', 'CRITICAL_TEST');
        results.push({ input: test.input, expected: 'error', actual: 'error', problem: false });
      } else {
        addSystemLog('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è: ' + test.input + ' - ' + error.message, 'ERROR', 'CRITICAL_TEST');
        results.push({ input: test.input, expected: test.expected, actual: 'error', problem: true });
      }
    }
  });
  
  var problems = results.filter(function(r) { return r.problem; }).length;
  addSystemLog('üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ' + (results.length - problems) + '/' + results.length + ' –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', 
              problems === 0 ? 'INFO' : 'WARN', 'CRITICAL_TEST');
  
  return { results: results, problems: problems };
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 6: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
 */
function testFallbackMechanisms() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤', 'WARN', 'CRITICAL_TEST');
  
  var issues = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–ª—è Telegram
  try {
    addSystemLog('‚Üí –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram fallback –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞', 'INFO', 'CRITICAL_TEST');
    var posts = importTelegramPosts('non-existent-channel-test-123', 1);
    
    if (posts && posts.length > 0) {
      issues.push('Telegram fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞');
    }
  } catch (error) {
    if (!error.message.includes('fallback') && !error.message.includes('–≤—Å–µ –º–µ—Ç–æ–¥—ã')) {
      issues.push('Telegram fallback –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
    } else {
      addSystemLog('‚úÖ Telegram fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'INFO', 'CRITICAL_TEST');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–±–æ–µ–≤ —Å–µ—Ç–∏
  try {
    addSystemLog('‚Üí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ–µ–≤', 'INFO', 'CRITICAL_TEST');
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º URL
    var response = UrlFetchApp.fetch('https://non-existent-domain-test-123.com', {
      muteHttpExceptions: true
    });
  } catch (error) {
    addSystemLog('‚úÖ –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'INFO', 'CRITICAL_TEST');
  }
  
  return { issues: issues };
}

/**
 * üö® –ü–†–û–ë–õ–ï–ú–ê 7: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–∞–π–º–∞—É—Ç—ã
 */
function testPerformanceIssues() {
  addSystemLog('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤', 'WARN', 'CRITICAL_TEST');
  
  var tests = [];
  
  // –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è parseSource
  var start = new Date();
  for (var i = 0; i < 100; i++) {
    try {
      parseSource('https://instagram.com/test', null);
    } catch (e) {
      // –û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
    }
  }
  var parseSourceTime = new Date() - start;
  tests.push({ name: 'parseSource x100', time: parseSourceTime, threshold: 1000 });
  
  // –¢–µ—Å—Ç 2: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
  start = new Date();
  for (var i = 0; i < 1000; i++) {
    normalizePlatformName('—Ç–≥');
  }
  var normalizeTime = new Date() - start;
  tests.push({ name: 'normalizePlatformName x1000', time: normalizeTime, threshold: 500 });
  
  tests.forEach(function(test) {
    if (test.time > test.threshold) {
      addSystemLog('‚ö†Ô∏è ' + test.name + ' –º–µ–¥–ª–µ–Ω–Ω—ã–π: ' + test.time + '–º—Å (–ª–∏–º–∏—Ç: ' + test.threshold + '–º—Å)', 'WARN', 'CRITICAL_TEST');
    } else {
      addSystemLog('‚úÖ ' + test.name + ' –±—ã—Å—Ç—Ä—ã–π: ' + test.time + '–º—Å', 'INFO', 'CRITICAL_TEST');
    }
  });
  
  return { tests: tests };
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
 */
function runAllCriticalTests() {
  addSystemLog('üí• –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤', 'WARN', 'CRITICAL_TEST');
  
  var results = {
    instagram: testInstagramUserAgentIssue(),
    vkParser: testVKParserAvailability(),
    telegram: testTelegramAccessibility(),
    rateLimit: testRateLimitingHandling(),
    invalidInput: testInvalidInputHandling(),
    fallback: testFallbackMechanisms(),
    performance: testPerformanceIssues()
  };
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  var criticalIssues = 0;
  
  if (!results.instagram.success) criticalIssues++;
  if (!results.vkParser.success) criticalIssues++;
  if (!results.telegram.success) criticalIssues++;
  if (results.invalidInput.problems > 0) criticalIssues++;
  if (results.fallback.issues.length > 0) criticalIssues++;
  
  addSystemLog('üìä –ò–¢–û–ì–û –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ' + criticalIssues, 
              criticalIssues === 0 ? 'INFO' : 'ERROR', 'CRITICAL_TEST');
  
  return {
    criticalIssues: criticalIssues,
    results: results,
    ready: criticalIssues === 0
  };
}