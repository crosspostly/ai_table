/**
 * Comprehensive Test Runner v1.0
 * Запуск ВСЕХ тестов для полной проверки системы
 */

/**
 * ГЛАВНАЯ функция - запуск всех тестов
 */
function runAllComprehensiveTests() {
  Logger.log('🚀 Starting COMPREHENSIVE test suite...');
  
  const startTime = Date.now();
  const allResults = {
    totalTests: 0,
    passed: 0,
    failed: 0,
    suites: []
  };
  
  // 1. SYNTAX & STRUCTURE TESTS
  Logger.log('\n📋 === PHASE 1: SYNTAX & STRUCTURE ===');
  const syntaxResults = runSyntaxTests();
  allResults.suites.push({ name: 'Syntax Tests', ...syntaxResults });
  allResults.totalTests += syntaxResults.totalTests;
  allResults.passed += syntaxResults.passed;
  allResults.failed += syntaxResults.failed;
  
  // 2. VALIDATION TESTS
  Logger.log('\n🛡️ === PHASE 2: INPUT VALIDATION ===');
  const validationResults = runValidationTests();
  allResults.suites.push({ name: 'Validation Tests', ...validationResults });
  allResults.totalTests += validationResults.totalTests;
  allResults.passed += validationResults.passed;
  allResults.failed += validationResults.failed;
  
  // 3. RETRY LOGIC TESTS
  Logger.log('\n🔄 === PHASE 3: RETRY LOGIC ===');
  const retryResults = runRetryLogicTests();
  allResults.suites.push({ name: 'Retry Logic Tests', ...retryResults });
  allResults.totalTests += retryResults.totalTests;
  allResults.passed += retryResults.passed;
  allResults.failed += retryResults.failed;
  
  // 4. ERROR HANDLING TESTS
  Logger.log('\n💬 === PHASE 4: ERROR HANDLING ===');
  const errorResults = runErrorHandlingTests();
  allResults.suites.push({ name: 'Error Handling Tests', ...errorResults });
  allResults.totalTests += errorResults.totalTests;
  allResults.passed += errorResults.passed;
  allResults.failed += errorResults.failed;
  
  // 5. PLATFORM DETECTION TESTS
  Logger.log('\n🔍 === PHASE 5: PLATFORM DETECTION ===');
  const platformResults = runPlatformDetectionTests();
  allResults.suites.push({ name: 'Platform Detection Tests', ...platformResults });
  allResults.totalTests += platformResults.totalTests;
  allResults.passed += platformResults.passed;
  allResults.failed += platformResults.failed;
  
  // 6. REAL DATA TESTS (самые важные!)
  Logger.log('\n🧪 === PHASE 6: REAL DATA TESTS ===');
  const realDataResults = runRealDataTests();
  allResults.suites.push({ name: 'Real Data Tests', ...realDataResults });
  allResults.totalTests += realDataResults.totalTests || realDataResults.passed + realDataResults.failed;
  allResults.passed += realDataResults.passed;
  allResults.failed += realDataResults.failed;
  
  // 7. GEMINI SEQUENTIAL TESTS
  Logger.log('\n🤖 === PHASE 7: GEMINI SEQUENTIAL TESTS ===');
  const geminiResults = runGeminiSequentialTests();
  allResults.suites.push({ name: 'Gemini Sequential Tests', ...geminiResults });
  allResults.totalTests += geminiResults.totalTests;
  allResults.passed += geminiResults.passed;
  allResults.failed += geminiResults.failed;
  
  // FINAL REPORT
  const duration = Date.now() - startTime;
  Logger.log('\n📊 ===============================');
  Logger.log('   🎯 COMPREHENSIVE TEST RESULTS');
  Logger.log('===============================');
  Logger.log(`⏱️ Duration: ${Math.round(duration / 1000)}s`);
  Logger.log(`📊 Total Tests: ${allResults.totalTests}`);
  Logger.log(`✅ Passed: ${allResults.passed}`);\n  Logger.log(`❌ Failed: ${allResults.failed}`);\n  Logger.log(`📈 Success Rate: ${Math.round((allResults.passed / allResults.totalTests) * 100)}%`);\n  \n  // Детальный отчет по каждому набору\n  Logger.log('\\n📋 Detailed Results:');\n  allResults.suites.forEach(suite => {\n    const rate = suite.totalTests ? Math.round((suite.passed / suite.totalTests) * 100) : 0;\n    Logger.log(`  ${suite.passed}/${suite.totalTests || (suite.passed + suite.failed)} ${suite.name} (${rate}%)`);\n  });\n  \n  // Сохраняем результаты в лист\n  writeTestResultsToSheet(allResults);\n  \n  return allResults;\n}\n\n/**\n * Тест синтаксиса и структуры\n */\nfunction runSyntaxTests() {\n  Logger.log('⚡ Running syntax tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  // Тест 1: Основные функции существуют\n  results.totalTests++;\n  try {\n    const functionsToCheck = [\n      'importSocialPosts',\n      'parseSource', \n      'normalizePlatformName',\n      'importInstagramPosts',\n      'importTelegramPosts', \n      'importVkPostsAdvanced',\n      'validateAndSanitizeInputs',\n      'fetchWithRetry',\n      'createUserFriendlyError'\n    ];\n    \n    const missingFunctions = [];\n    functionsToCheck.forEach(funcName => {\n      if (typeof eval(funcName) !== 'function') {\n        missingFunctions.push(funcName);\n      }\n    });\n    \n    if (missingFunctions.length === 0) {\n      results.passed++;\n      results.details.push('✅ All core functions exist');\n    } else {\n      results.failed++;\n      results.details.push(`❌ Missing functions: ${missingFunctions.join(', ')}`);\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Function check error: ${error.message}`);\n  }\n  \n  // Тест 2: Парсинг URL работает\n  results.totalTests++;\n  try {\n    const testSource = parseSource('https://www.instagram.com/nasa/', null);\n    if (testSource.platform === 'instagram' && testSource.value === 'nasa') {\n      results.passed++;\n      results.details.push('✅ URL parsing works');\n    } else {\n      results.failed++;\n      results.details.push(`❌ URL parsing failed: got ${JSON.stringify(testSource)}`);\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ URL parsing error: ${error.message}`);\n  }\n  \n  // Тест 3: Нормализация платформ\n  results.totalTests++;\n  try {\n    const testCases = [\n      ['инста', 'instagram'],\n      ['тг', 'telegram'], \n      ['вк', 'vk'],\n      ['instagram', 'instagram']\n    ];\n    \n    let allPassed = true;\n    for (const [input, expected] of testCases) {\n      const result = normalizePlatformName(input);\n      if (result !== expected) {\n        allPassed = false;\n        break;\n      }\n    }\n    \n    if (allPassed) {\n      results.passed++;\n      results.details.push('✅ Platform normalization works');\n    } else {\n      results.failed++;\n      results.details.push('❌ Platform normalization failed');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Platform normalization error: ${error.message}`);\n  }\n  \n  Logger.log(`Syntax Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Тест валидации входных данных\n */\nfunction runValidationTests() {\n  Logger.log('🛡️ Running validation tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  // Тест 1: Валидные данные проходят\n  results.totalTests++;\n  try {\n    const valid = validateAndSanitizeInputs('https://instagram.com/nasa', 5, 'instagram');\n    if (valid.isValid && valid.sourceUrl && valid.count === 5) {\n      results.passed++;\n      results.details.push('✅ Valid inputs pass validation');\n    } else {\n      results.failed++;\n      results.details.push('❌ Valid inputs failed validation');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Valid input test error: ${error.message}`);\n  }\n  \n  // Тест 2: XSS блокируется\n  results.totalTests++;\n  try {\n    validateAndSanitizeInputs('javascript:alert(\"xss\")', 5, '');\n    results.failed++;\n    results.details.push('❌ XSS not blocked');\n  } catch (error) {\n    if (error.message.includes('Недопустимый протокол')) {\n      results.passed++;\n      results.details.push('✅ XSS properly blocked');\n    } else {\n      results.failed++;\n      results.details.push(`❌ XSS test unexpected error: ${error.message}`);\n    }\n  }\n  \n  // Тест 3: Невалидные count исправляются\n  results.totalTests++;\n  try {\n    const result = validateAndSanitizeInputs('test', 'invalid', '');\n    if (result.count === 20) { // default value\n      results.passed++;\n      results.details.push('✅ Invalid count fixed to default');\n    } else {\n      results.failed++;\n      results.details.push(`❌ Invalid count not fixed: got ${result.count}`);\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Count validation error: ${error.message}`);\n  }\n  \n  Logger.log(`Validation Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Тест retry логики\n */\nfunction runRetryLogicTests() {\n  Logger.log('🔄 Running retry logic tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  // Тест 1: calculateBackoffDelay работает правильно\n  results.totalTests++;\n  try {\n    const delay1 = calculateBackoffDelay(1, 1000, 30000);\n    const delay2 = calculateBackoffDelay(2, 1000, 30000); \n    const delay3 = calculateBackoffDelay(10, 1000, 5000); // должен быть ограничен 5000\n    \n    if (delay1 >= 750 && delay1 <= 1250 && // 1000 ± jitter\n        delay2 >= 1500 && delay2 <= 2500 && // 2000 ± jitter\n        delay3 <= 5000) { // max delay limit\n      results.passed++;\n      results.details.push('✅ Backoff delay calculation works');\n    } else {\n      results.failed++;\n      results.details.push(`❌ Backoff delays wrong: ${delay1}, ${delay2}, ${delay3}`);\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Backoff calculation error: ${error.message}`);\n  }\n  \n  // Тест 2: fetchWithRetry function exists and has right signature\n  results.totalTests++;\n  try {\n    if (typeof fetchWithRetry === 'function') {\n      results.passed++;\n      results.details.push('✅ fetchWithRetry function exists');\n    } else {\n      results.failed++;\n      results.details.push('❌ fetchWithRetry function missing');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ fetchWithRetry check error: ${error.message}`);\n  }\n  \n  Logger.log(`Retry Logic Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Тест обработки ошибок\n */\nfunction runErrorHandlingTests() {\n  Logger.log('💬 Running error handling tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  // Тест 1: createUserFriendlyError работает\n  results.totalTests++;\n  try {\n    const techError = new Error('HTTP 403: Forbidden');\n    const friendlyError = createUserFriendlyError(techError, {\n      platform: 'instagram',\n      username: 'test'\n    });\n    \n    if (friendlyError.message.includes('🚫') && friendlyError.originalError === techError) {\n      results.passed++;\n      results.details.push('✅ User-friendly errors work');\n    } else {\n      results.failed++;\n      results.details.push('❌ User-friendly error generation failed');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Error handling test error: ${error.message}`);\n  }\n  \n  // Тест 2: HTTP code extraction работает\n  results.totalTests++;\n  try {\n    const httpCode = extractHttpCode('Request failed: HTTP 429 Too Many Requests');\n    if (httpCode === 429) {\n      results.passed++;\n      results.details.push('✅ HTTP code extraction works');\n    } else {\n      results.failed++;\n      results.details.push(`❌ HTTP code extraction failed: got ${httpCode}`);\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ HTTP code extraction error: ${error.message}`);\n  }\n  \n  Logger.log(`Error Handling Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Тест определения платформ\n */\nfunction runPlatformDetectionTests() {\n  Logger.log('🔍 Running platform detection tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  const testCases = [\n    ['https://www.instagram.com/nasa/', null, 'instagram', 'nasa'],\n    ['https://t.me/durov', null, 'telegram', 'durov'],\n    ['https://vk.com/durov', null, 'vk', 'durov'],\n    ['durov', 'telegram', 'telegram', 'durov'],\n    ['@channel', 'telegram', 'telegram', 'channel']\n  ];\n  \n  testCases.forEach(([source, platform, expectedPlatform, expectedValue]) => {\n    results.totalTests++;\n    try {\n      const result = parseSource(source, normalizePlatformName(platform));\n      if (result.platform === expectedPlatform && result.value === expectedValue) {\n        results.passed++;\n        results.details.push(`✅ ${source} → ${expectedPlatform}`);\n      } else {\n        results.failed++;\n        results.details.push(`❌ ${source} → expected ${expectedPlatform}:${expectedValue}, got ${result.platform}:${result.value}`);\n      }\n    } catch (error) {\n      if (platform === null && error.message.includes('укажите платформу')) {\n        results.passed++;\n        results.details.push(`✅ ${source} → correctly requires platform`);\n      } else {\n        results.failed++;\n        results.details.push(`❌ ${source} → error: ${error.message}`);\n      }\n    }\n  });\n  \n  Logger.log(`Platform Detection Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Тест последовательных Gemini запросов\n */\nfunction runGeminiSequentialTests() {\n  Logger.log('🤖 Running Gemini sequential tests...');\n  \n  const results = { totalTests: 0, passed: 0, failed: 0, details: [] };\n  \n  // Тест 1: fetchGeminiWithRetry function exists\n  results.totalTests++;\n  try {\n    if (typeof fetchGeminiWithRetry === 'function') {\n      results.passed++;\n      results.details.push('✅ fetchGeminiWithRetry function exists');\n    } else {\n      results.failed++;\n      results.details.push('❌ fetchGeminiWithRetry function missing');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ Gemini function check error: ${error.message}`);\n  }\n  \n  // Тест 2: Проверим что GM функция обновлена\n  results.totalTests++;\n  try {\n    // Этот тест проверяет только структуру без реального вызова API\n    if (typeof GM === 'function') {\n      results.passed++;\n      results.details.push('✅ GM function exists and updated');\n    } else {\n      results.failed++;\n      results.details.push('❌ GM function missing');\n    }\n  } catch (error) {\n    results.failed++;\n    results.details.push(`❌ GM function check error: ${error.message}`);\n  }\n  \n  Logger.log(`Gemini Sequential Tests: ${results.passed}/${results.totalTests} passed`);\n  return results;\n}\n\n/**\n * Запись результатов тестов в Google Sheet\n */\nfunction writeTestResultsToSheet(results) {\n  try {\n    const ss = SpreadsheetApp.getActive();\n    let sheet = ss.getSheetByName('Test Results');\n    \n    if (!sheet) {\n      sheet = ss.insertSheet('Test Results');\n    }\n    \n    // Очищаем и создаем заголовки\n    sheet.clear();\n    const headers = ['Test Suite', 'Total', 'Passed', 'Failed', 'Success Rate', 'Details'];\n    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);\n    sheet.getRange(1, 1, 1, headers.length)\n      .setBackground('#4285f4')\n      .setFontColor('white')\n      .setFontWeight('bold');\n    \n    // Добавляем результаты\n    const data = [];\n    results.suites.forEach(suite => {\n      const total = suite.totalTests || (suite.passed + suite.failed);\n      const rate = total ? Math.round((suite.passed / total) * 100) : 0;\n      data.push([\n        suite.name,\n        total,\n        suite.passed, \n        suite.failed,\n        rate + '%',\n        (suite.details || []).join('; ')\n      ]);\n    });\n    \n    // Итоговая строка\n    const totalRate = results.totalTests ? Math.round((results.passed / results.totalTests) * 100) : 0;\n    data.push([\n      'TOTAL',\n      results.totalTests,\n      results.passed,\n      results.failed, \n      totalRate + '%',\n      'Comprehensive test run completed'\n    ]);\n    \n    if (data.length > 0) {\n      sheet.getRange(2, 1, data.length, headers.length).setValues(data);\n      \n      // Форматируем итоговую строку\n      const totalRow = data.length + 1;\n      sheet.getRange(totalRow, 1, 1, headers.length)\n        .setBackground('#f0f0f0')\n        .setFontWeight('bold');\n    }\n    \n    sheet.autoResizeColumns(1, headers.length);\n    Logger.log('✅ Test results written to \"Test Results\" sheet');\n    \n  } catch (error) {\n    Logger.log('❌ Failed to write test results to sheet: ' + error.message);\n  }\n}"