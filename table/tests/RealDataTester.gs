/**
 * Real Data Testing Suite v1.0
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SocialImportService –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
 */

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function runRealDataTests() {
  Logger.log('üöÄ Starting Real Data Tests...');
  
  const results = {
    passed: 0,
    failed: 0,
    errors: [],
    details: []
  };
  
  // –†–ï–ê–õ–¨–ù–´–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testCases = [
    // === INSTAGRAM –¢–ï–°–¢–´ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ) ===
    {
      name: 'Instagram NASA (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π)',
      source: 'https://www.instagram.com/nasa/',
      platform: '',
      count: 3,
      expectedPlatform: 'instagram'
    },
    {
      name: 'Instagram National Geographic', 
      source: 'https://www.instagram.com/natgeo/',
      platform: '',
      count: 3,
      expectedPlatform: 'instagram'
    },
    {
      name: 'Instagram BBC News',
      source: 'https://www.instagram.com/bbcnews/',
      platform: '',
      count: 2,
      expectedPlatform: 'instagram'
    },
    
    // === TELEGRAM –¢–ï–°–¢–´ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã) ===
    {
      name: 'Telegram Durov Channel',
      source: 'https://t.me/durov',
      platform: '',
      count: 3,
      expectedPlatform: 'telegram'
    },
    {
      name: 'Telegram Medusa News',
      source: 'https://t.me/meduzalive',
      platform: '',
      count: 2,
      expectedPlatform: 'telegram'
    },
    {
      name: 'Telegram IT News',
      source: 'https://t.me/tproger',
      platform: '',
      count: 2,
      expectedPlatform: 'telegram'
    },
    
    // === VK –¢–ï–°–¢–´ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã) ===
    {
      name: 'VK Durov Profile',
      source: 'https://vk.com/durov',
      platform: '',
      count: 3,
      expectedPlatform: 'vk'
    },
    {
      name: 'VK Tproger Group',
      source: 'https://vk.com/tproger',
      platform: '',
      count: 3,
      expectedPlatform: 'vk'
    },
    {
      name: 'VK VC.ru',
      source: 'https://vk.com/vcru',
      platform: '',
      count: 2,
      expectedPlatform: 'vk'
    },
    
    // === EXPLICIT PLATFORM TESTS ===
    {
      name: 'Telegram Username (explicit)',
      source: 'durov',
      platform: 'telegram', 
      count: 2,
      expectedPlatform: 'telegram'
    },
    {
      name: 'VK Username (explicit)',
      source: 'durov',
      platform: 'vk',
      count: 2,
      expectedPlatform: 'vk'
    },
    {
      name: 'Instagram Username (explicit)',
      source: 'nasa',
      platform: 'instagram',
      count: 2,
      expectedPlatform: 'instagram'
    },
    
    // === ID TESTS ===
    {
      name: 'VK Group ID',
      source: '-1',
      platform: 'vk',
      count: 2,
      expectedPlatform: 'vk'
    },
    
    // === EDGE CASES ===
    {
      name: 'Telegram @username format',
      source: '@durov',
      platform: 'telegram',
      count: 1,
      expectedPlatform: 'telegram'
    }
  ];
  
  for (const testCase of testCases) {
    Logger.log(`
üìù Testing: ${testCase.name}`);
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏—Å—Ç
      const testResult = testSocialImport(
        testCase.source,
        testCase.count,
        testCase.platform,
        testCase.expectedPlatform
      );
      
      if (testResult.success) {
        results.passed++;
        results.details.push({
          test: testCase.name,
          status: 'PASS',
          message: `‚úÖ Got ${testResult.count} posts from ${testResult.platform}`,
          data: testResult
        });
        Logger.log(`‚úÖ PASS: ${testCase.name} - ${testResult.count} posts`);
      } else {
        results.failed++;
        results.details.push({
          test: testCase.name,
          status: 'FAIL',
          message: `‚ùå ${testResult.error}`,
          data: testResult
        });
        Logger.log(`‚ùå FAIL: ${testCase.name} - ${testResult.error}`);
      }
      
    } catch (error) {
      results.failed++;
      results.errors.push(error.message);
      results.details.push({
        test: testCase.name,
        status: 'ERROR',
        message: `üí• ${error.message}`,
        data: null
      });
      Logger.log(`üí• ERROR: ${testCase.name} - ${error.message}`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
    Utilities.sleep(2000);
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  Logger.log('
üìä FINAL RESULTS:');
  Logger.log(`‚úÖ Passed: ${results.passed}`);
  Logger.log(`‚ùå Failed: ${results.failed}`);
  Logger.log(`üìä Total: ${results.passed + results.failed}`);
  
  if (results.errors.length > 0) {
    Logger.log('
üö® ERRORS:');
    results.errors.forEach(error => Logger.log(`  ‚Ä¢ ${error}`));
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
 */
function testSocialImport(source, count, platform, expectedPlatform) {
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const ss = SpreadsheetApp.getActive();
    let testSheet = ss.getSheetByName('TestParams');
    
    if (!testSheet) {
      testSheet = ss.insertSheet('TestParams');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    testSheet.getRange('B1').setValue(source);
    testSheet.getRange('B2').setValue(count);
    testSheet.getRange('C1').setValue(platform);
    
    // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
    const sourceInfo = parseSource(source, normalizePlatformName(platform));
    
    Logger.log(`  üìä Parsed: platform=${sourceInfo.platform}, type=${sourceInfo.type}, value=${sourceInfo.value}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (sourceInfo.platform !== expectedPlatform) {
      return {
        success: false,
        error: `Platform mismatch: expected ${expectedPlatform}, got ${sourceInfo.platform}`
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    let posts = [];
    
    switch (sourceInfo.platform) {
      case 'instagram':
        posts = importInstagramPosts(sourceInfo.value, count);
        break;
      case 'telegram':
        posts = importTelegramPosts(sourceInfo.value, count);
        break;
      case 'vk':
        posts = importVkPostsAdvanced(sourceInfo.value, count);
        break;
      default:
        throw new Error(`Unsupported platform: ${sourceInfo.platform}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!posts || posts.length === 0) {
      return {
        success: false,
        error: 'No posts returned'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–æ–≤
    const firstPost = posts[0];
    const requiredFields = ['platform', 'date', 'text', 'link', 'id'];
    
    for (const field of requiredFields) {
      if (!(field in firstPost)) {
        return {
          success: false,
          error: `Missing required field: ${field}`
        };
      }
    }
    
    return {
      success: true,
      platform: sourceInfo.platform,
      count: posts.length,
      posts: posts.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function testUrlParsing() {
  Logger.log('üîó Testing URL parsing...');
  
  const testUrls = [
    'https://www.instagram.com/nasa/',
    'https://instagram.com/natgeo',
    'https://t.me/durov',
    'https://telegram.me/channel',
    'https://vk.com/club1',
    'https://vk.com/public123456',
    'https://vk.com/nasa',
    'durov', // –î–æ–ª–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å explicit platform
    '@channel', // –î–æ–ª–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å explicit platform
    '-123456' // –î–æ–ª–∂–Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç—å explicit platform
  ];
  
  for (const url of testUrls) {
    try {
      const result = parseSource(url, null);
      Logger.log(`‚úÖ ${url} ‚Üí ${result.platform} (${result.type}): ${result.value}`);
    } catch (error) {
      Logger.log(`‚ö†Ô∏è ${url} ‚Üí ${error.message}`);
    }
  }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å —Ç–µ—Å—Ç –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
 */
function quickSyntaxTest() {
  Logger.log('‚ö° Quick syntax test...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const testSource = parseSource('https://www.instagram.com/nasa/', null);
    Logger.log('‚úÖ parseSource works');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    const testPlatform = normalizePlatformName('–∏–Ω—Å—Ç–∞');
    Logger.log('‚úÖ normalizePlatformName works: ' + testPlatform);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (typeof importInstagramPosts === 'function') {
      Logger.log('‚úÖ importInstagramPosts function exists');
    }
    
    if (typeof importVkPostsAdvanced === 'function') {
      Logger.log('‚úÖ importVkPostsAdvanced function exists');
    }
    
    if (typeof importTelegramPosts === 'function') {
      Logger.log('‚úÖ importTelegramPosts function exists');
    } else {
      Logger.log('‚ùå importTelegramPosts function missing!');
    }
    
    return true;
    
  } catch (error) {
    Logger.log('‚ùå Syntax test failed: ' + error.message);
    return false;
  }
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å mock –¥–∞–Ω–Ω—ã–º–∏
 */
function testWithMockData() {
  Logger.log('üé≠ Testing with mock data...');
  
  const mockPosts = [
    {
      platform: 'instagram',
      date: new Date(),
      text: 'Test post from Instagram',
      link: 'https://www.instagram.com/p/test/',
      id: 'test123',
      likes: 100,
      comments: 10
    },
    {
      platform: 'telegram', 
      date: new Date(),
      text: 'Test post from Telegram',
      link: 'https://t.me/test/123',
      id: 'test456',
      likes: 50,
      comments: 5
    }
  ];
  
  try {
    writePostsToSheet(mockPosts, 'TestPosts');
    Logger.log('‚úÖ Mock data written successfully');
    return true;
  } catch (error) {
    Logger.log('‚ùå Mock data test failed: ' + error.message);
    return false;
  }
}