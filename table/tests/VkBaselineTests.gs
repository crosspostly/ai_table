/**
 * VK Baseline Tests - –¢–µ—Å—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ VK —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ü–ï–†–ï–î –º–∏–≥—Ä–∞—Ü–∏–µ–π
 * –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ
 */

/**
 * –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å VK —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */
function testVkBaselineFunctionality() {
  var testResults = {
    timestamp: new Date().toISOString(),
    architecture: 'CURRENT (Client ‚Üí Server ‚Üí VK_PARSER)',
    tests: {},
    summary: { total: 0, passed: 0, failed: 0 }
  };
  
  try {
    console.log('üß™ BASELINE TEST: VK —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VK_PARSER
    testResults.tests.vk_parser_health = testVkParserHealth();
    
    // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç wall.get —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º  
    testResults.tests.wall_get_public = testVkWallGetPublic();
    
    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç handleParseAlbum —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞–ª—å–±–æ–º–æ–º
    testResults.tests.parse_album_public = testVkParseAlbumPublic();
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    testResults.tests.server_endpoint = testVkServerEndpoint();
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    testResults.tests.client_functions = testVkClientFunctions();
    
    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Object.keys(testResults.tests).forEach(function(testName) {
      testResults.summary.total++;
      if (testResults.tests[testName].passed) {
        testResults.summary.passed++;
      } else {
        testResults.summary.failed++;
      }
    });
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    var successRate = Math.round((testResults.summary.passed / testResults.summary.total) * 100);
    
    console.log('üìä BASELINE –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ' + testResults.summary.passed + '/' + testResults.summary.total + ' (' + successRate + '%)');
    
    if (testResults.summary.failed > 0) {
      console.log('‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ' + testResults.summary.failed);
      Object.keys(testResults.tests).forEach(function(testName) {
        if (!testResults.tests[testName].passed) {
          console.log('  ‚Ä¢ ' + testName + ': ' + testResults.tests[testName].error);
        }
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã baseline –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    saveBaselineResults(testResults);
    
    return testResults;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ baseline —Ç–µ—Å—Ç–æ–≤: ' + error.message);
    return {
      timestamp: new Date().toISOString(),
      architecture: 'CURRENT',
      error: error.message,
      summary: { total: 0, passed: 0, failed: 1 }
    };
  }
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VK_PARSER
 */
function testVkParserHealth() {
  try {
    var url = VK_PARSER_URL + '?action=wall&owner=1&count=1';
    
    var response = UrlFetchApp.fetch(url, {
      method: 'GET',
      muteHttpExceptions: true,
      timeout: 15000
    });
    
    var statusCode = response.getResponseCode();
    var responseText = response.getContentText();
    
    if (statusCode !== 200) {
      throw new Error('HTTP ' + statusCode + ': ' + responseText);
    }
    
    var data = JSON.parse(responseText);
    
    if (data.error) {
      // VK –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞, –Ω–æ —Å–∞–º –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (data.error.includes('Access denied') || data.error.includes('Private')) {
        return {
          passed: true,
          message: 'VK_PARSER –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞)',
          details: { status: statusCode, error: data.error }
        };
      }
      throw new Error('VK API error: ' + data.error);
    }
    
    return {
      passed: true,
      message: 'VK_PARSER —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { status: statusCode, dataType: Array.isArray(data) ? 'array' : typeof data }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'VK_PARSER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ wall.get —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
 */
function testVkWallGetPublic() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –î—É—Ä–æ–≤–∞ (ID: 1) - –ø—É–±–ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    var url = VK_PARSER_URL + '?action=wall&owner=1&count=3';
    
    var response = UrlFetchApp.fetch(url, {
      method: 'GET',
      muteHttpExceptions: true,
      timeout: 20000
    });
    
    var statusCode = response.getResponseCode();
    var responseText = response.getContentText();
    
    if (statusCode !== 200) {
      throw new Error('HTTP ' + statusCode);
    }
    
    var data = JSON.parse(responseText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!Array.isArray(data)) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º: ' + typeof data);
    }
    
    if (data.length === 0) {
      throw new Error('–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    var firstPost = data[0];
    var requiredFields = ['date', 'link', 'text', 'number', 'comments', 'likes'];
    
    for (var i = 0; i < requiredFields.length; i++) {
      if (!(requiredFields[i] in firstPost)) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: ' + requiredFields[i]);
      }
    }
    
    return {
      passed: true,
      message: 'Wall.get —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { 
        postsCount: data.length, 
        firstPost: {
          hasText: !!firstPost.text,
          hasLink: !!firstPost.link,
          hasDate: !!firstPost.date
        }
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'Wall.get –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ parseAlbum —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞–ª—å–±–æ–º–æ–º
 */
function testVkParseAlbumPublic() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∞–ª—å–±–æ–º (–ø—Ä–∏–º–µ—Ä–Ω—ã–π URL)
    var albumUrl = 'https://vk.com/album1_00';
    var url = VK_PARSER_URL + '?action=parseAlbum&url=' + encodeURIComponent(albumUrl) + '&limit=2&offset=0';
    
    var response = UrlFetchApp.fetch(url, {
      method: 'GET',
      muteHttpExceptions: true,
      timeout: 20000
    });
    
    var statusCode = response.getResponseCode();
    var responseText = response.getContentText();
    
    if (statusCode !== 200) {
      throw new Error('HTTP ' + statusCode);
    }
    
    var data = JSON.parse(responseText);
    
    // –î–ª—è –∞–ª—å–±–æ–º–æ–≤ –æ–∂–∏–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ images, hasMore, nextOffset, total
    if (typeof data !== 'object' || data === null) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
    }
    
    if (!('images' in data) || !Array.isArray(data.images)) {
      // –í–æ–∑–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      if (data.error && (data.error.includes('album') || data.error.includes('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'))) {
        return {
          passed: true,
          message: 'parseAlbum –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          details: { expectedError: data.error }
        };
      }
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ images –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø');
    }
    
    return {
      passed: true,
      message: 'parseAlbum —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      details: { 
        imagesCount: data.images.length,
        hasMore: data.hasMore,
        total: data.total
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'parseAlbum –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
 */
function testVkServerEndpoint() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handleVkImport —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (typeof handleVkImport !== 'function') {
      throw new Error('handleVkImport —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º VkCollector –≤ DataCollectors.gs
    if (typeof VkCollector === 'undefined') {
      throw new Error('VkCollector –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ DataCollectors.gs');
    }
    
    return {
      passed: true,
      message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ VK –¥–æ—Å—Ç—É–ø–Ω—ã',
      details: { 
        handleVkImport: 'function',
        vkCollector: typeof VkCollector
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: '–°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ VK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      error: error.message
    };
  }
}

/**
 * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
 */
function testVkClientFunctions() {
  try {
    var clientFunctions = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    try {
      // –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º try/catch
      if (typeof importVkPostsThin === 'function') clientFunctions.push('importVkPostsThin');
    } catch (e) {}
    
    try {
      if (typeof getVkImportParams === 'function') clientFunctions.push('getVkImportParams');
    } catch (e) {}
    
    try {
      if (typeof writeVkPosts === 'function') clientFunctions.push('writeVkPosts');
    } catch (e) {}
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º VkImportService.gs —Ñ—É–Ω–∫—Ü–∏–∏
    if (typeof importVkPosts === 'function') clientFunctions.push('importVkPosts');
    if (typeof createStopWordsFormulas === 'function') clientFunctions.push('createStopWordsFormulas');
    if (typeof testStopWordsFilter === 'function') clientFunctions.push('testStopWordsFilter');
    
    if (clientFunctions.length === 0) {
      throw new Error('–ù–∏ –æ–¥–Ω–∞ VK —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    return {
      passed: true,
      message: 'VK –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã',
      details: { 
        functionsFound: clientFunctions.length,
        functions: clientFunctions
      }
    };
    
  } catch (error) {
    return {
      passed: false,
      message: 'VK –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      error: error.message
    };
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 */
function saveBaselineResults(results) {
  try {
    var properties = PropertiesService.getScriptProperties();
    var baselineData = JSON.stringify({
      timestamp: results.timestamp,
      summary: results.summary,
      tests: Object.keys(results.tests).map(function(testName) {
        return {
          name: testName,
          passed: results.tests[testName].passed,
          message: results.tests[testName].message
        };
      })
    });
    
    properties.setProperty('VK_BASELINE_RESULTS', baselineData);
    console.log('üíæ Baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ' + error.message);
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function loadBaselineResults() {
  try {
    var properties = PropertiesService.getScriptProperties();
    var baselineData = properties.getProperty('VK_BASELINE_RESULTS');
    
    if (!baselineData) {
      return null;
    }
    
    return JSON.parse(baselineData);
    
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ' + error.message);
    return null;
  }
}

/**
 * –ë–´–°–¢–†–´–ô –¢–ï–°–¢: –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function quickVkBaselineTest() {
  console.log('‚ö° –ë–´–°–¢–†–´–ô VK BASELINE –¢–ï–°–¢');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ VK_PARSER
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ VK_PARSER...');
    var healthCheck = testVkParserHealth();
    console.log(healthCheck.passed ? '‚úÖ VK_PARSER –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå VK_PARSER –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + healthCheck.error);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ wall.get
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ wall.get...');
    var wallTest = testVkWallGetPublic();
    console.log(wallTest.passed ? '‚úÖ Wall.get —Ä–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå Wall.get –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + wallTest.error);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    var serverTest = testVkServerEndpoint();
    console.log(serverTest.passed ? '‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã' : '‚ùå –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ' + serverTest.error);
    
    var passedTests = [healthCheck.passed, wallTest.passed, serverTest.passed].filter(Boolean).length;
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + passedTests + '/3 —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏');
    
    return passedTests === 3;
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: ' + error.message);
    return false;
  }
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å baseline
 */
function compareWithBaseline(newResults) {
  var baseline = loadBaselineResults();
  
  if (!baseline) {
    console.log('‚ö†Ô∏è Baseline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
    return null;
  }
  
  console.log('üìä –°–†–ê–í–ù–ï–ù–ò–ï –° BASELINE:');
  console.log('Baseline: ' + baseline.summary.passed + '/' + baseline.summary.total + ' —Ç–µ—Å—Ç–æ–≤');
  console.log('–¢–µ–∫—É—â–∏–π: ' + newResults.summary.passed + '/' + newResults.summary.total + ' —Ç–µ—Å—Ç–æ–≤');
  
  var improvement = newResults.summary.passed - baseline.summary.passed;
  var regression = baseline.summary.passed - newResults.summary.passed;
  
  if (improvement > 0) {
    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: +' + improvement + ' —Ç–µ—Å—Ç–æ–≤');
  } else if (regression > 0) {
    console.log('‚ùå –†–µ–≥—Ä–µ—Å—Å–∏—è: -' + regression + ' —Ç–µ—Å—Ç–æ–≤');
  } else {
    console.log('‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
  }
  
  return {
    baseline: baseline,
    current: newResults,
    improvement: improvement,
    regression: regression
  };
}