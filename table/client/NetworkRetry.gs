/**
 * Network Retry System
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò: —Å–∏—Å—Ç–µ–º–∞ retry –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
 */

/**
 * Fetch —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
 */
function fetchGeminiWithRetry(url, options, maxRetries) {
  maxRetries = maxRetries || 3;
  var lastError = null;
  
  for (var attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      addSystemLog('‚Üí Fetch attempt ' + attempt + '/' + maxRetries + ' to ' + url.substring(0, 50) + '...', 'DEBUG', 'NETWORK');
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      if (attempt > 1) {
        var delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // Max 10 —Å–µ–∫—É–Ω–¥
        addSystemLog('–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π: ' + delay + 'ms', 'DEBUG', 'NETWORK');
        Utilities.sleep(delay);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      var optionsWithTimeout = Object.assign({}, options);
      optionsWithTimeout.muteHttpExceptions = true;
      
      var response = UrlFetchApp.fetch(url, optionsWithTimeout);
      var responseCode = response.getResponseCode();
      
      addSystemLog('‚Üê Fetch response: HTTP ' + responseCode, 'DEBUG', 'NETWORK');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
      if (responseCode >= 200 && responseCode < 300) {
        addSystemLog('‚úÖ Fetch —É—Å–ø–µ—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ' + attempt, 'INFO', 'NETWORK');
        return response;
      }
      
      // Rate limiting - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      if (responseCode === 429) {
        var retryAfter = response.getHeaders()['Retry-After'] || '5';
        var waitTime = parseInt(retryAfter, 10) * 1000;
        addSystemLog('‚è∞ Rate limited, –∂–¥—ë–º ' + waitTime + 'ms', 'WARN', 'NETWORK');
        Utilities.sleep(waitTime);
        continue; // –ù–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ failed attempt
      }
      
      // Server errors (5xx) - –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      if (responseCode >= 500) {
        lastError = new Error('Server error: HTTP ' + responseCode);
        addSystemLog('üîÑ Server error ' + responseCode + ', –ø–æ–≤—Ç–æ—Ä—è–µ–º...', 'WARN', 'NETWORK');
        continue;
      }
      
      // Client errors (4xx) - –æ–±—ã—á–Ω–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑
      if (responseCode >= 400) {
        var errorBody = '';
        try {
          errorBody = response.getContentText();
        } catch (e) {
          errorBody = 'Cannot read response body';
        }
        lastError = new Error('Client error: HTTP ' + responseCode + ' - ' + errorBody);
        if (attempt < maxRetries) {
          addSystemLog('üîÑ Client error ' + responseCode + ', –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞...', 'WARN', 'NETWORK');
          continue;
        }
        break;
      }
      
    } catch (e) {
      lastError = e;
      addSystemLog('‚ùå Fetch exception –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ' + attempt + ': ' + e.message, 'ERROR', 'NETWORK');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      var errorMsg = e.message.toLowerCase();
      
      // Timeout errors - –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      if (errorMsg.includes('timeout') || errorMsg.includes('timed out')) {
        addSystemLog('‚è∞ Timeout detected, –ø–æ–≤—Ç–æ—Ä—è–µ–º...', 'WARN', 'NETWORK');
        continue;
      }
      
      // DNS/Connection errors - –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      if (errorMsg.includes('dns') || errorMsg.includes('connection') || errorMsg.includes('network')) {
        addSystemLog('üåê Network error detected, –ø–æ–≤—Ç–æ—Ä—è–µ–º...', 'WARN', 'NETWORK');
        continue;
      }
      
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
      addSystemLog('üí• Critical error, stopping retries: ' + e.message, 'ERROR', 'NETWORK');
      break;
    }
  }
  
  // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
  addSystemLog('üö´ All ' + maxRetries + ' attempts failed. Last error: ' + (lastError ? lastError.message : 'Unknown'), 'ERROR', 'NETWORK');
  throw new Error('Network request failed after ' + maxRetries + ' attempts: ' + (lastError ? lastError.message : 'Unknown error'));
}

/**
 * –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è rate limiting
 */
function smartDelay(requestType) {
  var delays = {
    'gemini': 1000,     // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É Gemini –∑–∞–ø—Ä–æ—Å–∞–º–∏
    'server': 500,      // 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    'vk': 2000,         // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É VK –∑–∞–ø—Ä–æ—Å–∞–º–∏
    'ocr': 1500         // 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É OCR –∑–∞–ø—Ä–æ—Å–∞–º–∏
  };
  
  var delay = delays[requestType] || 1000;
  
  addSystemLog('‚è±Ô∏è Smart delay: ' + delay + 'ms for ' + requestType, 'DEBUG', 'NETWORK');
  Utilities.sleep(delay);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
function checkServiceAvailability(serviceUrl, serviceName) {
  try {
    addSystemLog('üîç Checking availability: ' + serviceName, 'INFO', 'NETWORK');
    
    var response = UrlFetchApp.fetch(serviceUrl, {
      method: 'HEAD',
      muteHttpExceptions: true,
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    });
    
    var isAvailable = response.getResponseCode() < 400;
    
    addSystemLog('üì° ' + serviceName + ' availability: ' + (isAvailable ? 'OK' : 'FAIL') + ' (HTTP ' + response.getResponseCode() + ')', 
                 isAvailable ? 'INFO' : 'WARN', 'NETWORK');
    
    return {
      available: isAvailable,
      responseCode: response.getResponseCode(),
      serviceName: serviceName
    };
    
  } catch (e) {
    addSystemLog('‚ùå ' + serviceName + ' availability check failed: ' + e.message, 'ERROR', 'NETWORK');
    return {
      available: false,
      error: e.message,
      serviceName: serviceName
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function checkAllServicesAvailability() {
  var services = [
    { url: SERVER_API_URL, name: 'License Server' },
    { url: GEMINI_API_URL, name: 'Gemini API' },
    { url: VK_PARSER_URL, name: 'VK Parser' }
  ];
  
  var results = [];
  
  for (var i = 0; i < services.length; i++) {
    var service = services[i];
    var result = checkServiceAvailability(service.url, service.name);
    results.push(result);
  }
  
  var summary = results.map(function(r) {
    return r.serviceName + ': ' + (r.available ? '‚úÖ' : '‚ùå');
  }).join(', ');
  
  addSystemLog('üìä Services status: ' + summary, 'INFO', 'NETWORK');
  
  return {
    all: results,
    summary: summary,
    allAvailable: results.every(function(r) { return r.available; })
  };
}

/**
 * –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
function testSocialImportConnection() {
  try {
    addSystemLog('üß™ Testing social import connection...', 'INFO', 'NETWORK');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ VK Parser
    var testUrl = SERVER_URL + '?test=1';
    var response = fetchGeminiWithRetry(testUrl, {
      method: 'GET',
      muteHttpExceptions: true
    }, 2); // –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    var responseCode = response.getResponseCode();
    var responseText = response.getContentText().substring(0, 200); // –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
    
    addSystemLog('üîó Connection test result: HTTP ' + responseCode + ', response: ' + responseText, 'INFO', 'NETWORK');
    
    return {
      success: responseCode < 400,
      responseCode: responseCode,
      responseText: responseText
    };
    
  } catch (e) {
    addSystemLog('‚ùå Connection test failed: ' + e.message, 'ERROR', 'NETWORK');
    return {
      success: false,
      error: e.message
    };
  }
}