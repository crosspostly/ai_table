/**
 * üß™ COMPREHENSIVE TEST SUITE WITH GOOGLE SHEETS LOGGING
 * –ü–æ–ª–Ω–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Google Sheets
 * 
 * –§–ò–ß–ò:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö GM —Ñ—É–Ω–∫—Ü–∏–π
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ #NAME? –∏ #REF! –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ª–∏—Å—Ç "–õ–æ–≥–∏"
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 * - Performance monitoring
 * - Security validation
 */

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
function runComprehensiveTests() {
  var traceId = generateTraceId('comprehensive-test');
  var startTime = Date.now();
  
  logToGoogleSheets('INFO', 'TESTING', 'COMPREHENSIVE_START', 'IN_PROGRESS', 'Starting comprehensive test suite', {
    timestamp: new Date(),
    expectedTests: 25
  }, traceId);
  
  var results = {
    total: 0,
    passed: 0,
    failed: 0,
    warnings: 0,
    errors: [],
    fixes: [],
    performance: {}
  };\n  
  try {\n    // 1. üîç –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö\n    logToGoogleSheets('INFO', 'TESTING', 'LOG_ANALYSIS', 'IN_PROGRESS', 'Analyzing existing logs for errors');\n    var logAnalysis = analyzeLogsAndFixErrors();\n    if (logAnalysis && logAnalysis.recommendations.length > 0) {\n      results.warnings += logAnalysis.recommendations.length;\n      logToGoogleSheets('WARN', 'TESTING', 'LOG_ANALYSIS', 'SUCCESS', 'Found issues in logs', {\n        recommendations: logAnalysis.recommendations\n      }, traceId);\n    }\n    \n    // 2. üìä –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ –ù–ê –û–®–ò–ë–ö–ò #NAME? –∏ #REF!\n    var tableErrors = checkTableForErrors();\n    results = mergeTestResults(results, tableErrors);\n    \n    // 3. üîí SECURITY TESTS\n    var securityResults = runSecurityTestSuite(traceId);\n    results = mergeTestResults(results, securityResults);\n    \n    // 4. ü§ñ GEMINI API TESTS\n    var geminiResults = runGeminiTestSuite(traceId);\n    results = mergeTestResults(results, geminiResults);\n    \n    // 5. üíæ ATOMIC OPERATIONS TESTS\n    var atomicResults = runAtomicOperationsTests(traceId);\n    results = mergeTestResults(results, atomicResults);\n    \n    // 6. ‚ö° PERFORMANCE TESTS\n    var performanceResults = runPerformanceTests(traceId);\n    results = mergeTestResults(results, performanceResults);\n    \n    // 7. üîÑ SYSTEM INTEGRATION TESTS\n    var integrationResults = runSystemIntegrationTests(traceId);\n    results = mergeTestResults(results, integrationResults);\n    \n    // 8. üßπ CLEANUP & OPTIMIZATION\n    var cleanupResults = runSystemCleanupTests(traceId);\n    results = mergeTestResults(results, cleanupResults);\n    \n  } catch (error) {\n    results.failed++;\n    results.errors.push('Comprehensive test failed: ' + error.message);\n    \n    logToGoogleSheets('ERROR', 'TESTING', 'COMPREHENSIVE_ERROR', 'FAILED', 'Test suite crashed', {\n      error: error.message,\n      stack: error.stack\n    }, traceId);\n  }\n  \n  // –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢\n  var executionTime = Date.now() - startTime;\n  var successRate = results.total > 0 ? Math.round((results.passed / results.total) * 100) : 0;\n  \n  var finalStatus = results.failed > 0 ? 'FAILED' : (results.warnings > 0 ? 'WARNING' : 'SUCCESS');\n  var finalLevel = results.failed > 0 ? 'ERROR' : (results.warnings > 0 ? 'WARN' : 'INFO');\n  \n  logToGoogleSheets(finalLevel, 'TESTING', 'COMPREHENSIVE_COMPLETE', finalStatus, \n    'Comprehensive tests completed: ' + successRate + '% success rate', {\n    total: results.total,\n    passed: results.passed,\n    failed: results.failed,\n    warnings: results.warnings,\n    successRate: successRate,\n    errors: results.errors,\n    fixes: results.fixes,\n    performance: results.performance\n  }, traceId, executionTime);\n  \n  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n  showComprehensiveTestResults(results, executionTime);\n  \n  return results;\n}\n\n/**\n * üìä –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ –ù–ê –û–®–ò–ë–ö–ò #NAME? –∏ #REF!\n */\nfunction checkTableForErrors() {\n  var traceId = generateTraceId('table-check');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  try {\n    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É\n    var ss = SpreadsheetApp.openById(SHEETS_LOGGER_CONFIG.spreadsheetId);\n    var sheets = ss.getSheets();\n    \n    logToGoogleSheets('INFO', 'TESTING', 'TABLE_CHECK', 'IN_PROGRESS', 'Checking ' + sheets.length + ' sheets for errors', {}, traceId);\n    \n    sheets.forEach(function(sheet) {\n      if (sheet.getName() === '–õ–æ–≥–∏') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç –ª–æ–≥–æ–≤\n      \n      results.total++;\n      \n      try {\n        var sheetErrors = checkSheetForErrors(sheet, traceId);\n        \n        if (sheetErrors.nameErrors.length > 0 || sheetErrors.refErrors.length > 0) {\n          results.failed++;\n          results.errors.push('Sheet \"' + sheet.getName() + '\": ' + \n            sheetErrors.nameErrors.length + ' #NAME? errors, ' + \n            sheetErrors.refErrors.length + ' #REF! errors');\n          \n          // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n          var fixes = attemptAutoFix(sheet, sheetErrors, traceId);\n          results.fixes = results.fixes.concat(fixes);\n          \n        } else {\n          results.passed++;\n          logToGoogleSheets('INFO', 'TESTING', 'SHEET_CHECK', 'SUCCESS', \n            'Sheet \"' + sheet.getName() + '\" - no errors found', {}, traceId);\n        }\n        \n      } catch (sheetError) {\n        results.failed++;\n        results.errors.push('Failed to check sheet \"' + sheet.getName() + '\": ' + sheetError.message);\n        \n        logToGoogleSheets('ERROR', 'TESTING', 'SHEET_CHECK', 'FAILED', \n          'Error checking sheet: ' + sheetError.message, {\n          sheetName: sheet.getName(),\n          error: sheetError.message\n        }, traceId);\n      }\n    });\n    \n  } catch (error) {\n    results.failed++;\n    results.errors.push('Table check failed: ' + error.message);\n    \n    logToGoogleSheets('ERROR', 'TESTING', 'TABLE_CHECK', 'FAILED', \n      'Failed to open target spreadsheet', {\n      spreadsheetId: SHEETS_LOGGER_CONFIG.spreadsheetId,\n      error: error.message\n    }, traceId);\n  }\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'TABLE_CHECK', 'SUCCESS', \n    'Table error check completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * üîç –ü–†–û–í–ï–†–ö–ê –û–î–ù–û–ì–û –õ–ò–°–¢–ê –ù–ê –û–®–ò–ë–ö–ò\n */\nfunction checkSheetForErrors(sheet, traceId) {\n  var nameErrors = [];\n  var refErrors = [];\n  \n  try {\n    var lastRow = sheet.getLastRow();\n    var lastCol = sheet.getLastColumn();\n    \n    if (lastRow === 0 || lastCol === 0) {\n      return { nameErrors: [], refErrors: [] };\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏\n    var range = sheet.getRange(1, 1, lastRow, lastCol);\n    var values = range.getValues();\n    var formulas = range.getFormulas();\n    \n    for (var row = 0; row < values.length; row++) {\n      for (var col = 0; col < values[row].length; col++) {\n        var value = values[row][col];\n        var formula = formulas[row][col];\n        \n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ #NAME? –æ—à–∏–±–∫—É\n        if (value && value.toString().includes('#NAME?')) {\n          nameErrors.push({\n            cell: getCellA1Notation(row + 1, col + 1),\n            formula: formula,\n            value: value\n          });\n        }\n        \n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ #REF! –æ—à–∏–±–∫—É\n        if (value && value.toString().includes('#REF!')) {\n          refErrors.push({\n            cell: getCellA1Notation(row + 1, col + 1),\n            formula: formula,\n            value: value\n          });\n        }\n      }\n    }\n    \n    if (nameErrors.length > 0 || refErrors.length > 0) {\n      logToGoogleSheets('WARN', 'TESTING', 'SHEET_ERRORS', 'FOUND', \n        'Found errors in sheet \"' + sheet.getName() + '\"', {\n        sheetName: sheet.getName(),\n        nameErrors: nameErrors.length,\n        refErrors: refErrors.length,\n        errorDetails: { nameErrors: nameErrors, refErrors: refErrors }\n      }, traceId);\n    }\n    \n  } catch (error) {\n    logToGoogleSheets('ERROR', 'TESTING', 'SHEET_CHECK', 'FAILED', \n      'Error checking sheet for errors', {\n      sheetName: sheet.getName(),\n      error: error.message\n    }, traceId);\n  }\n  \n  return { nameErrors: nameErrors, refErrors: refErrors };\n}\n\n/**\n * üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö\n */\nfunction attemptAutoFix(sheet, sheetErrors, traceId) {\n  var fixes = [];\n  \n  try {\n    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º #NAME? –æ—à–∏–±–∫–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)\n    sheetErrors.nameErrors.forEach(function(error) {\n      try {\n        var formula = error.formula;\n        \n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–æ—Ä–º—É–ª–∞ GM —Ñ—É–Ω–∫—Ü–∏—é\n        if (formula && formula.includes('GM(')) {\n          // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å GM —Ñ—É–Ω–∫—Ü–∏—é\n          var fixedFormula = fixGMFormula(formula);\n          \n          if (fixedFormula !== formula) {\n            var range = sheet.getRange(error.cell);\n            range.setFormula(fixedFormula);\n            \n            fixes.push('Fixed GM formula in ' + error.cell + ': ' + formula + ' ‚Üí ' + fixedFormula);\n            \n            logToGoogleSheets('INFO', 'TESTING', 'AUTO_FIX', 'SUCCESS', \n              'Fixed #NAME? error in ' + error.cell, {\n              sheetName: sheet.getName(),\n              cell: error.cell,\n              oldFormula: formula,\n              newFormula: fixedFormula\n            }, traceId);\n          }\n        }\n        \n      } catch (fixError) {\n        logToGoogleSheets('WARN', 'TESTING', 'AUTO_FIX', 'FAILED', \n          'Failed to fix #NAME? error in ' + error.cell, {\n          error: fixError.message,\n          formula: error.formula\n        }, traceId);\n      }\n    });\n    \n    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º #REF! –æ—à–∏–±–∫–∏ (broken references)\n    sheetErrors.refErrors.forEach(function(error) {\n      try {\n        // –î–ª—è #REF! –æ—à–∏–±–æ–∫ —Å–ª–æ–∂–Ω–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n        logToGoogleSheets('WARN', 'TESTING', 'REF_ERROR', 'MANUAL_FIX_NEEDED', \n          '#REF! error requires manual fix in ' + error.cell, {\n          sheetName: sheet.getName(),\n          cell: error.cell,\n          formula: error.formula,\n          suggestion: 'Check if referenced sheet/range exists'\n        }, traceId);\n        \n      } catch (fixError) {\n        logToGoogleSheets('ERROR', 'TESTING', 'REF_FIX', 'FAILED', \n          'Error processing #REF! in ' + error.cell, {\n          error: fixError.message\n        }, traceId);\n      }\n    });\n    \n  } catch (error) {\n    logToGoogleSheets('ERROR', 'TESTING', 'AUTO_FIX', 'FAILED', \n      'Auto-fix process failed', {\n      sheetName: sheet.getName(),\n      error: error.message\n    }, traceId);\n  }\n  \n  return fixes;\n}\n\n/**\n * üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GM —Ñ–æ—Ä–º—É–ª\n */\nfunction fixGMFormula(formula) {\n  if (!formula || !formula.includes('GM(')) return formula;\n  \n  // –û–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è GM —Ñ–æ—Ä–º—É–ª\n  var fixed = formula;\n  \n  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã\n  fixed = fixed.replace(/GM\\s*\\(/g, 'GM(');\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏\n  var openParens = (fixed.match(/\\(/g) || []).length;\n  var closeParens = (fixed.match(/\\)/g) || []).length;\n  \n  if (openParens > closeParens) {\n    fixed = fixed + ')'.repeat(openParens - closeParens);\n  }\n  \n  // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å\n  fixed = fixed.replace(/\"\"/g, '\"');\n  \n  return fixed;\n}\n\n/**\n * üîí SECURITY TEST SUITE\n */\nfunction runSecurityTestSuite(parentTraceId) {\n  var traceId = generateTraceId('security-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'SECURITY_START', 'IN_PROGRESS', 'Starting security test suite', {}, traceId);\n  \n  // –¢–µ—Å—Ç–∏—Ä—É–µ–º SecurityValidator\n  var securityTests = [\n    { name: 'XSS Protection', test: function() { return testXSSProtection(); } },\n    { name: 'SQL Injection Detection', test: function() { return testSQLInjectionDetection(); } },\n    { name: 'URL Validation', test: function() { return testURLValidation(); } },\n    { name: 'Input Sanitization', test: function() { return testInputSanitization(); } },\n    { name: 'Safe Logging', test: function() { return testSafeLogging(); } }\n  ];\n  \n  securityTests.forEach(function(testCase) {\n    results.total++;\n    \n    try {\n      var testResult = testCase.test();\n      \n      if (testResult.passed) {\n        results.passed++;\n        logSecurityTest(testCase.name, testResult, Date.now() - startTime, traceId);\n      } else {\n        results.failed++;\n        results.errors.push('Security test failed: ' + testCase.name + ' - ' + testResult.details);\n        logSecurityTest(testCase.name, testResult, Date.now() - startTime, traceId);\n      }\n      \n    } catch (error) {\n      results.failed++;\n      results.errors.push('Security test error: ' + testCase.name + ' - ' + error.message);\n      \n      logToGoogleSheets('ERROR', 'TESTING', 'SECURITY_TEST', 'FAILED', \n        'Security test crashed: ' + testCase.name, {\n        error: error.message,\n        testName: testCase.name\n      }, traceId);\n    }\n  });\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'SECURITY_COMPLETE', 'SUCCESS', \n    'Security test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * ü§ñ GEMINI API TEST SUITE\n */\nfunction runGeminiTestSuite(parentTraceId) {\n  var traceId = generateTraceId('gemini-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'GEMINI_START', 'IN_PROGRESS', 'Starting Gemini API test suite', {}, traceId);\n  \n  try {\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞\n    var apiKey = getGeminiApiKey();\n    if (!apiKey) {\n      results.warnings++;\n      results.errors.push('Gemini API key not configured - skipping API tests');\n      \n      logToGoogleSheets('WARN', 'TESTING', 'GEMINI_API_KEY', 'MISSING', \n        'Gemini API key not configured', {}, traceId);\n      \n      return results;\n    }\n    \n    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ GM —Ñ—É–Ω–∫—Ü–∏–∏\n    var geminiTests = [\n      { \n        name: 'Basic GM Function', \n        test: function() { \n          try {\n            var result = GM('–°–∫–∞–∂–∏ \"—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\"');\n            return { \n              passed: result && result.length > 0,\n              details: 'Result: ' + (result ? result.substring(0, 100) : 'null')\n            };\n          } catch (e) {\n            return { passed: false, details: 'Error: ' + e.message };\n          }\n        } \n      },\n      { \n        name: 'GM Cache System', \n        test: function() { \n          return testGMCacheSystem();\n        } \n      },\n      { \n        name: 'GM Security Integration', \n        test: function() { \n          return testGMSecurityIntegration();\n        } \n      }\n    ];\n    \n    geminiTests.forEach(function(testCase) {\n      results.total++;\n      \n      try {\n        var testStart = Date.now();\n        var testResult = testCase.test();\n        var testTime = Date.now() - testStart;\n        \n        if (testResult.passed) {\n          results.passed++;\n          logGMOperation('TEST: ' + testCase.name, testResult.details, testTime, traceId);\n        } else {\n          results.failed++;\n          results.errors.push('Gemini test failed: ' + testCase.name + ' - ' + testResult.details);\n          logGMOperation('TEST: ' + testCase.name, null, testTime, traceId, new Error(testResult.details));\n        }\n        \n      } catch (error) {\n        results.failed++;\n        results.errors.push('Gemini test error: ' + testCase.name + ' - ' + error.message);\n        \n        logToGoogleSheets('ERROR', 'TESTING', 'GEMINI_TEST', 'FAILED', \n          'Gemini test crashed: ' + testCase.name, {\n          error: error.message,\n          testName: testCase.name\n        }, traceId);\n      }\n    });\n    \n  } catch (error) {\n    results.failed++;\n    results.errors.push('Gemini test suite failed: ' + error.message);\n    \n    logToGoogleSheets('ERROR', 'TESTING', 'GEMINI_SUITE', 'FAILED', \n      'Gemini test suite crashed', {\n      error: error.message\n    }, traceId);\n  }\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'GEMINI_COMPLETE', 'SUCCESS', \n    'Gemini test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * üíæ ATOMIC OPERATIONS TEST SUITE\n */\nfunction runAtomicOperationsTests(parentTraceId) {\n  var traceId = generateTraceId('atomic-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'ATOMIC_START', 'IN_PROGRESS', 'Starting atomic operations test suite', {}, traceId);\n  \n  try {\n    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è atomic operations\n    var ss = SpreadsheetApp.getActiveSpreadsheet();\n    var testSheetName = 'AtomicTest_' + Date.now();\n    var testSheet = ss.insertSheet(testSheetName);\n    \n    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n    testSheet.getRange('A1:C3').setValues([\n      ['Test', 'Data', 'Original'],\n      ['Row1', 'Value1', '1'],\n      ['Row2', 'Value2', '2']\n    ]);\n    \n    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ backup\n    results.total++;\n    try {\n      var backup = createAtomicBackup(testSheetName, 'Test backup creation');\n      \n      if (backup && backup.backupName) {\n        results.passed++;\n        logAtomicOperation('CREATE_BACKUP', testSheetName, backup, Date.now() - startTime, traceId);\n      } else {\n        results.failed++;\n        results.errors.push('Failed to create atomic backup');\n        logAtomicOperation('CREATE_BACKUP', testSheetName, null, Date.now() - startTime, traceId, new Error('Backup creation failed'));\n      }\n    } catch (error) {\n      results.failed++;\n      results.errors.push('Atomic backup test error: ' + error.message);\n      logAtomicOperation('CREATE_BACKUP', testSheetName, null, Date.now() - startTime, traceId, error);\n    }\n    \n    // –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n    results.total++;\n    try {\n      // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ\n      testSheet.getRange('A1').setValue('Modified');\n      \n      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup\n      if (backup) {\n        var restored = restoreFromBackup(backup);\n        \n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n        var restoredValue = testSheet.getRange('A1').getValue();\n        \n        if (restored && restoredValue === 'Test') {\n          results.passed++;\n          logAtomicOperation('RESTORE_BACKUP', testSheetName, { restored: true, value: restoredValue }, Date.now() - startTime, traceId);\n        } else {\n          results.failed++;\n          results.errors.push('Backup restore failed - value: ' + restoredValue);\n          logAtomicOperation('RESTORE_BACKUP', testSheetName, { restored: false, value: restoredValue }, Date.now() - startTime, traceId, new Error('Restore verification failed'));\n        }\n      } else {\n        results.failed++;\n        results.errors.push('Cannot test restore - no backup available');\n      }\n    } catch (error) {\n      results.failed++;\n      results.errors.push('Atomic restore test error: ' + error.message);\n      logAtomicOperation('RESTORE_BACKUP', testSheetName, null, Date.now() - startTime, traceId, error);\n    }\n    \n    // –¢–µ—Å—Ç 3: –û—á–∏—Å—Ç–∫–∞ backup\n    results.total++;\n    try {\n      if (backup) {\n        clearBackup(backup);\n        \n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backup –ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω\n        var backupExists = false;\n        try {\n          ss.getSheetByName(backup.backupName);\n          backupExists = true;\n        } catch (e) {\n          // Backup not found - good!\n        }\n        \n        if (!backupExists) {\n          results.passed++;\n          logAtomicOperation('CLEAR_BACKUP', testSheetName, { cleared: true }, Date.now() - startTime, traceId);\n        } else {\n          results.failed++;\n          results.errors.push('Backup clear failed - backup still exists');\n          logAtomicOperation('CLEAR_BACKUP', testSheetName, { cleared: false }, Date.now() - startTime, traceId, new Error('Backup not cleared'));\n        }\n      }\n    } catch (error) {\n      results.failed++;\n      results.errors.push('Atomic clear test error: ' + error.message);\n      logAtomicOperation('CLEAR_BACKUP', testSheetName, null, Date.now() - startTime, traceId, error);\n    }\n    \n    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏—Å—Ç\n    try {\n      ss.deleteSheet(testSheet);\n    } catch (e) {\n      // Ignore cleanup errors\n    }\n    \n  } catch (error) {\n    results.failed++;\n    results.errors.push('Atomic operations test suite failed: ' + error.message);\n    \n    logToGoogleSheets('ERROR', 'TESTING', 'ATOMIC_SUITE', 'FAILED', \n      'Atomic operations test suite crashed', {\n      error: error.message\n    }, traceId);\n  }\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'ATOMIC_COMPLETE', 'SUCCESS', \n    'Atomic operations test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * ‚ö° PERFORMANCE TEST SUITE\n */\nfunction runPerformanceTests(parentTraceId) {\n  var traceId = generateTraceId('performance-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [], performance: {} };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'PERFORMANCE_START', 'IN_PROGRESS', 'Starting performance test suite', {}, traceId);\n  \n  var performanceTests = [\n    {\n      name: 'Cache Performance',\n      test: function() {\n        var start = Date.now();\n        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∫—ç—à–∞\n        for (var i = 0; i < 10; i++) {\n          CacheService.getScriptCache().put('test_key_' + i, 'test_value_' + i, 600);\n        }\n        for (var j = 0; j < 10; j++) {\n          CacheService.getScriptCache().get('test_key_' + j);\n        }\n        var time = Date.now() - start;\n        return {\n          passed: time < 5000, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 5 —Å–µ–∫—É–Ω–¥\n          details: 'Cache operations took ' + time + 'ms',\n          time: time\n        };\n      }\n    },\n    {\n      name: 'Sheet Read Performance',\n      test: function() {\n        var start = Date.now();\n        try {\n          var ss = SpreadsheetApp.getActiveSpreadsheet();\n          var sheet = ss.getSheets()[0];\n          if (sheet.getLastRow() > 0) {\n            sheet.getRange(1, 1, Math.min(100, sheet.getLastRow()), Math.min(10, sheet.getLastColumn())).getValues();\n          }\n          var time = Date.now() - start;\n          return {\n            passed: time < 10000, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 10 —Å–µ–∫—É–Ω–¥\n            details: 'Sheet read took ' + time + 'ms',\n            time: time\n          };\n        } catch (error) {\n          return {\n            passed: false,\n            details: 'Sheet read failed: ' + error.message,\n            time: Date.now() - start\n          };\n        }\n      }\n    },\n    {\n      name: 'Memory Usage Check',\n      test: function() {\n        try {\n          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞\n          var cache = CacheService.getScriptCache();\n          var testData = JSON.stringify({ large: new Array(1000).join('test') });\n          \n          var start = Date.now();\n          cache.put('memory_test', testData, 60);\n          var stored = cache.get('memory_test');\n          var time = Date.now() - start;\n          \n          return {\n            passed: stored !== null && time < 3000,\n            details: 'Memory test: ' + (stored ? 'stored' : 'failed') + ' in ' + time + 'ms',\n            time: time\n          };\n        } catch (error) {\n          return {\n            passed: false,\n            details: 'Memory test failed: ' + error.message,\n            time: 0\n          };\n        }\n      }\n    }\n  ];\n  \n  performanceTests.forEach(function(testCase) {\n    results.total++;\n    \n    try {\n      var testResult = testCase.test();\n      \n      // –°–æ—Ö—Ä–∞–Ω—è–µ–º performance –º–µ—Ç—Ä–∏–∫–∏\n      results.performance[testCase.name] = testResult.time;\n      \n      if (testResult.passed) {\n        results.passed++;\n      } else {\n        if (testResult.time > 30000) { // >30 —Å–µ–∫—É–Ω–¥ - –∫—Ä–∏—Ç–∏—á–Ω–æ\n          results.failed++;\n          results.errors.push('Performance test failed: ' + testCase.name + ' - ' + testResult.details);\n        } else {\n          results.warnings++; // –ú–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ\n        }\n      }\n      \n      logToGoogleSheets(testResult.passed ? 'INFO' : 'WARN', 'TESTING', 'PERFORMANCE_TEST', \n        testResult.passed ? 'SUCCESS' : 'SLOW', \n        'Performance test: ' + testCase.name, {\n        testName: testCase.name,\n        executionTime: testResult.time,\n        passed: testResult.passed,\n        details: testResult.details\n      }, traceId, testResult.time);\n      \n    } catch (error) {\n      results.failed++;\n      results.errors.push('Performance test error: ' + testCase.name + ' - ' + error.message);\n      \n      logToGoogleSheets('ERROR', 'TESTING', 'PERFORMANCE_TEST', 'FAILED', \n        'Performance test crashed: ' + testCase.name, {\n        error: error.message,\n        testName: testCase.name\n      }, traceId);\n    }\n  });\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'PERFORMANCE_COMPLETE', 'SUCCESS', \n    'Performance test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * üîÑ SYSTEM INTEGRATION TESTS\n */\nfunction runSystemIntegrationTests(parentTraceId) {\n  var traceId = generateTraceId('integration-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'INTEGRATION_START', 'IN_PROGRESS', 'Starting system integration test suite', {}, traceId);\n  \n  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n  var integrationTests = [\n    {\n      name: 'Logging Integration',\n      test: function() {\n        try {\n          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n          var testMessage = 'Integration test message ' + Date.now();\n          logToGoogleSheets('INFO', 'TESTING', 'INTEGRATION_TEST', 'SUCCESS', testMessage, {}, traceId);\n          \n          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –≤ batch\n          var found = SHEETS_LOGGER_BATCH.some(function(entry) {\n            return entry.message === testMessage;\n          });\n          \n          return {\n            passed: found,\n            details: found ? 'Logging integration works' : 'Logging integration failed'\n          };\n        } catch (error) {\n          return {\n            passed: false,\n            details: 'Logging integration error: ' + error.message\n          };\n        }\n      }\n    },\n    {\n      name: 'Security Integration',\n      test: function() {\n        try {\n          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é security —Å logging\n          if (typeof validateInput === 'function') {\n            var testInput = '<script>alert(\"test\")</script>';\n            var result = validateInput(testInput, 'TEST');\n            \n            return {\n              passed: !result.isValid, // –î–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å XSS\n              details: 'Security validation: ' + (result.isValid ? 'failed to block XSS' : 'correctly blocked XSS')\n            };\n          } else {\n            return {\n              passed: false,\n              details: 'Security validator not available'\n            };\n          }\n        } catch (error) {\n          return {\n            passed: false,\n            details: 'Security integration error: ' + error.message\n          };\n        }\n      }\n    },\n    {\n      name: 'Cache Integration',\n      test: function() {\n        try {\n          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫—ç—à–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n          var cache = CacheService.getScriptCache();\n          var testKey = 'integration_test_' + Date.now();\n          var testValue = 'integration_value';\n          \n          cache.put(testKey, testValue, 60);\n          var retrieved = cache.get(testKey);\n          \n          return {\n            passed: retrieved === testValue,\n            details: 'Cache integration: ' + (retrieved === testValue ? 'working' : 'failed')\n          };\n        } catch (error) {\n          return {\n            passed: false,\n            details: 'Cache integration error: ' + error.message\n          };\n        }\n      }\n    }\n  ];\n  \n  integrationTests.forEach(function(testCase) {\n    results.total++;\n    \n    try {\n      var testResult = testCase.test();\n      \n      if (testResult.passed) {\n        results.passed++;\n      } else {\n        results.failed++;\n        results.errors.push('Integration test failed: ' + testCase.name + ' - ' + testResult.details);\n      }\n      \n      logToGoogleSheets(testResult.passed ? 'INFO' : 'ERROR', 'TESTING', 'INTEGRATION_TEST', \n        testResult.passed ? 'SUCCESS' : 'FAILED', \n        'Integration test: ' + testCase.name + ' - ' + testResult.details, {\n        testName: testCase.name,\n        passed: testResult.passed\n      }, traceId);\n      \n    } catch (error) {\n      results.failed++;\n      results.errors.push('Integration test error: ' + testCase.name + ' - ' + error.message);\n      \n      logToGoogleSheets('ERROR', 'TESTING', 'INTEGRATION_TEST', 'FAILED', \n        'Integration test crashed: ' + testCase.name, {\n        error: error.message,\n        testName: testCase.name\n      }, traceId);\n    }\n  });\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'INTEGRATION_COMPLETE', 'SUCCESS', \n    'Integration test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * üßπ SYSTEM CLEANUP TESTS\n */\nfunction runSystemCleanupTests(parentTraceId) {\n  var traceId = generateTraceId('cleanup-tests');\n  var startTime = Date.now();\n  \n  var results = { total: 0, passed: 0, failed: 0, warnings: 0, errors: [], fixes: [] };\n  \n  logToGoogleSheets('INFO', 'TESTING', 'CLEANUP_START', 'IN_PROGRESS', 'Starting system cleanup test suite', {}, traceId);\n  \n  try {\n    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush –ª–æ–≥–æ–≤\n    results.total++;\n    try {\n      forceFlushAllLogs();\n      results.passed++;\n      logToGoogleSheets('INFO', 'TESTING', 'LOG_FLUSH', 'SUCCESS', 'Force flushed all logs to Google Sheets', {}, traceId);\n    } catch (error) {\n      results.failed++;\n      results.errors.push('Log flush failed: ' + error.message);\n      logToGoogleSheets('ERROR', 'TESTING', 'LOG_FLUSH', 'FAILED', 'Failed to flush logs', { error: error.message }, traceId);\n    }\n    \n    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backups\n    results.total++;\n    try {\n      cleanupOldBackups();\n      results.passed++;\n      logToGoogleSheets('INFO', 'TESTING', 'BACKUP_CLEANUP', 'SUCCESS', 'Cleaned up old backups', {}, traceId);\n    } catch (error) {\n      results.warnings++;\n      results.errors.push('Backup cleanup warning: ' + error.message);\n      logToGoogleSheets('WARN', 'TESTING', 'BACKUP_CLEANUP', 'WARNING', 'Backup cleanup had issues', { error: error.message }, traceId);\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n    results.total++;\n    try {\n      var systemStatus = checkSystemStatus();\n      \n      if (systemStatus.overall === 'OK') {\n        results.passed++;\n        logToGoogleSheets('INFO', 'TESTING', 'SYSTEM_STATUS', 'SUCCESS', 'System status check passed', systemStatus, traceId);\n      } else {\n        results.warnings++;\n        results.errors.push('System status check: ' + systemStatus.overall);\n        logToGoogleSheets('WARN', 'TESTING', 'SYSTEM_STATUS', 'WARNING', 'System status has issues', systemStatus, traceId);\n      }\n    } catch (error) {\n      results.failed++;\n      results.errors.push('System status check failed: ' + error.message);\n      logToGoogleSheets('ERROR', 'TESTING', 'SYSTEM_STATUS', 'FAILED', 'System status check crashed', { error: error.message }, traceId);\n    }\n    \n  } catch (error) {\n    results.failed++;\n    results.errors.push('Cleanup test suite failed: ' + error.message);\n    logToGoogleSheets('ERROR', 'TESTING', 'CLEANUP_SUITE', 'FAILED', 'Cleanup test suite crashed', { error: error.message }, traceId);\n  }\n  \n  var executionTime = Date.now() - startTime;\n  logToGoogleSheets('INFO', 'TESTING', 'CLEANUP_COMPLETE', 'SUCCESS', \n    'Cleanup test suite completed', results, traceId, executionTime);\n  \n  return results;\n}\n\n/**\n * üîß HELPER FUNCTIONS\n */\n\n// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤\nfunction mergeTestResults(target, source) {\n  target.total += source.total;\n  target.passed += source.passed;\n  target.failed += source.failed;\n  target.warnings += source.warnings;\n  target.errors = target.errors.concat(source.errors);\n  target.fixes = target.fixes.concat(source.fixes);\n  \n  if (source.performance) {\n    target.performance = Object.assign(target.performance || {}, source.performance);\n  }\n  \n  return target;\n}\n\n// –ü–æ–ª—É—á–µ–Ω–∏–µ A1 notation –¥–ª—è —è—á–µ–π–∫–∏\nfunction getCellA1Notation(row, col) {\n  var colLetter = '';\n  while (col > 0) {\n    colLetter = String.fromCharCode(65 + (col - 1) % 26) + colLetter;\n    col = Math.floor((col - 1) / 26);\n  }\n  return colLetter + row;\n}\n\n// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\nfunction showComprehensiveTestResults(results, executionTime) {\n  var message = 'üß™ COMPREHENSIVE TEST RESULTS\\n\\n';\n  \n  message += 'üìä OVERALL RESULTS:\\n';\n  message += 'Total Tests: ' + results.total + '\\n';\n  message += '‚úÖ Passed: ' + results.passed + '\\n';\n  message += '‚ùå Failed: ' + results.failed + '\\n';\n  message += '‚ö†Ô∏è Warnings: ' + results.warnings + '\\n';\n  \n  var successRate = results.total > 0 ? Math.round((results.passed / results.total) * 100) : 0;\n  message += 'üìà Success Rate: ' + successRate + '%\\n';\n  message += '‚è±Ô∏è Execution Time: ' + Math.round(executionTime / 1000) + ' seconds\\n\\n';\n  \n  if (results.errors.length > 0) {\n    message += '‚ùå ERRORS FOUND:\\n';\n    results.errors.slice(0, 5).forEach(function(error) {\n      message += '‚Ä¢ ' + error + '\\n';\n    });\n    if (results.errors.length > 5) {\n      message += '... and ' + (results.errors.length - 5) + ' more errors\\n';\n    }\n    message += '\\n';\n  }\n  \n  if (results.fixes.length > 0) {\n    message += 'üîß AUTO-FIXES APPLIED:\\n';\n    results.fixes.slice(0, 3).forEach(function(fix) {\n      message += '‚Ä¢ ' + fix + '\\n';\n    });\n    if (results.fixes.length > 3) {\n      message += '... and ' + (results.fixes.length - 3) + ' more fixes\\n';\n    }\n    message += '\\n';\n  }\n  \n  message += 'üìã Check the \"–õ–æ–≥–∏\" sheet for detailed test results and error analysis.';\n  \n  SpreadsheetApp.getUi().alert('Comprehensive Test Results', message, SpreadsheetApp.getUi().ButtonSet.OK);\n}\n\n/**\n * üéØ –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í –í–†–£–ß–ù–£–Æ\n */\nfunction manualRunComprehensiveTests() {\n  runComprehensiveTests();\n}\n\n/**\n * üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ò –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–Å–¢–ê\n */\nfunction manualAnalyzeLogsAndFixErrors() {\n  var analysis = analyzeLogsAndFixErrors();\n  \n  if (analysis) {\n    var message = 'üìà LOG ANALYSIS RESULTS:\\n\\n';\n    \n    if (analysis.recommendations.length > 0) {\n      message += 'üîç RECOMMENDATIONS:\\n';\n      analysis.recommendations.forEach(function(rec) {\n        message += '‚Ä¢ ' + rec + '\\n';\n      });\n    } else {\n      message += '‚úÖ No critical issues found in recent logs.\\n';\n    }\n    \n    message += '\\nüìã Detailed analysis logged to \"–õ–æ–≥–∏\" sheet.';\n    \n    SpreadsheetApp.getUi().alert('Log Analysis Results', message, SpreadsheetApp.getUi().ButtonSet.OK);\n  } else {\n    SpreadsheetApp.getUi().alert('Log Analysis Failed', 'Failed to analyze logs. Check the \"–õ–æ–≥–∏\" sheet for error details.', SpreadsheetApp.getUi().ButtonSet.OK);\n  }\n}