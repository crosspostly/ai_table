/**
 * Client Utilities - Missing functions restored
 * These are helper functions that were lost during refactoring
 */

/**
 * Check License Status UI
 * Shows license information dialog
 */
// checkLicenseStatusUI() - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ CredentialsManager.gs


/**
 * Set License Credentials UI
 * Dialog for entering license email and token
 */
function setLicenseCredentialsUI() {
  var ui = SpreadsheetApp.getUi();
  
  var emailResult = ui.prompt('License Email', '–í–≤–µ–¥–∏—Ç–µ email –ª–∏—Ü–µ–Ω–∑–∏–∏:', ui.ButtonSet.OK_CANCEL);
  
  if (emailResult.getSelectedButton() !== ui.Button.OK) {
    return;
  }
  
  var email = emailResult.getResponseText().trim();
  
  if (!email) {
    ui.alert('Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    return;
  }
  
  var tokenResult = ui.prompt('License Token', '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ª–∏—Ü–µ–Ω–∑–∏–∏:', ui.ButtonSet.OK_CANCEL);
  
  if (tokenResult.getSelectedButton() !== ui.Button.OK) {
    return;
  }
  
  var token = tokenResult.getResponseText().trim();
  
  if (!token) {
    ui.alert('–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    return;
  }
  
  // Save to Script Properties
  var props = PropertiesService.getScriptProperties();
  props.setProperty('LICENSE_EMAIL', email);
  props.setProperty('LICENSE_TOKEN', token);
  
  ui.alert('‚úÖ Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'Email –∏ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', ui.ButtonSet.OK);
  
  logClient('License credentials updated');
}

/**
 * OCR Reviews - Wrapper for the actual function
 * This is the function called from menu
 */
function ocrReviews() {
  // Call the thin client function
  ocrReviewsThin();
}

// importVkPosts —Ç–µ–ø–µ—Ä—å –≤ SocialImportClient.gs - –ø—Ä—è–º–æ–π VK –∏–º–ø–æ—Ä—Ç

/**
 * Initialize Chat Mode
 * Creates a chat sheet with A/B columns for conversation
 */
// initializeChatMode() moved to ChatMode.gs (line 28)
// setupSmartPromptTrigger() moved to SmartPromptProcessor.gs (line 217)

/**
 * Create Smart Prompt Rules Sheet
 */
function createSmartPromptRulesSheet() {
  var ss = SpreadsheetApp.getActive();
  var rulesSheet = ss.getSheetByName('–ü—Ä–∞–≤–∏–ª–∞');
  
  if (rulesSheet) {
    return; // Already exists
  }
  
  rulesSheet = ss.insertSheet('–ü—Ä–∞–≤–∏–ª–∞');
  
  // Headers
  rulesSheet.getRange('A1').setValue('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞');
  rulesSheet.getRange('B1').setValue('–°—Å—ã–ª–∫–∞ –Ω–∞ —è—á–µ–π–∫—É');
  
  // Format headers
  rulesSheet.getRange('A1:B1')
    .setFontWeight('bold')
    .setBackground('#4285f4')
    .setFontColor('white');
  
  // Sample rules
  var sampleRules = [
    ['–Ω–∞—à–∞ –Ω–∏—à–∞', '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞!A3'],
    ['–∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤', '–û—Ç–∑—ã–≤—ã!C2'],
    ['–∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤', '–ü–æ—Å—Ç—ã!K2'],
    ['–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã!B5'],
    ['—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã!B6']
  ];
  
  rulesSheet.getRange(2, 1, sampleRules.length, 2).setValues(sampleRules);
  
  // Auto-resize
  rulesSheet.autoResizeColumns(1, 2);
  
  logClient('Smart prompt rules sheet created');
}

/**
 * On Smart Prompt Edit - Handler
 * Automatically converts "–ü—Ä–æ–º–ø—Ç: —Ç–µ–∫—Å—Ç" to GM formula
 */
function onSmartPromptEdit(e) {
  try {
    if (!e || !e.range) return;
    
    var range = e.range;
    var value = e.value;
    
    if (!value || typeof value !== 'string') return;
    
    var trimmed = value.trim();
    
    // Check for "–ü—Ä–æ–º–ø—Ç:" or "–ü—Ä–æ–º–ø—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–π:"
    var isStaticPrompt = trimmed.match(/^–ü—Ä–æ–º–ø—Ç\\s+—Å—Ç–∞—Ç–∏—á–Ω—ã–π\\s*:\\s*(.+)/i);
    var isDynamicPrompt = trimmed.match(/^–ü—Ä–æ–º–ø—Ç\\s*:\\s*(.+)/i);
    
    if (!isStaticPrompt && !isDynamicPrompt) return;
    
    var promptText = isStaticPrompt ? isStaticPrompt[1] : isDynamicPrompt[1];
    
    // Apply replacement rules
    var transformedPrompt = applySmartPromptRules(promptText);
    
    // Create formula
    var formula = isStaticPrompt 
      ? '=GM_STATIC(' + transformedPrompt + ')' 
      : '=GM(' + transformedPrompt + ')';
    
    // Set formula
    range.setFormula(formula);
    
    logClient('Smart prompt converted: ' + trimmed.substring(0, 50));
    
  } catch (err) {
    // Silent fail - don't interrupt user
    logClient('Smart prompt error: ' + err.message);
  }
}

/**
 * Apply Smart Prompt Rules
 * Replaces keywords with cell references
 */
function applySmartPromptRules(promptText) {
  var ss = SpreadsheetApp.getActive();
  var rulesSheet = ss.getSheetByName('–ü—Ä–∞–≤–∏–ª–∞');
  
  if (!rulesSheet) {
    // No rules - return as quoted string
    return '"' + promptText.replace(/"/g, '""') + '"';
  }
  
  var lastRow = rulesSheet.getLastRow();
  
  if (lastRow < 2) {
    // No rules defined
    return '"' + promptText.replace(/"/g, '""') + '"';
  }
  
  // Read rules
  var rules = rulesSheet.getRange(2, 1, lastRow - 1, 2).getValues();
  
  // Build formula parts
  var parts = [];
  var remaining = promptText;
  
  for (var i = 0; i < rules.length; i++) {
    var keyword = String(rules[i][0] || '').trim();
    var cellRef = String(rules[i][1] || '').trim();
    
    if (!keyword || !cellRef) continue;
    
    // Check if keyword exists in remaining text
    var regex = new RegExp(keyword, 'gi');
    
    if (regex.test(remaining)) {
      // Split by keyword
      var segments = remaining.split(regex);
      
      // Build formula with replacements
      var newParts = [];
      for (var j = 0; j < segments.length; j++) {
        if (segments[j]) {
          newParts.push('"' + segments[j].replace(/"/g, '""') + '"');
        }
        if (j < segments.length - 1) {
          newParts.push(cellRef);
        }
      }
      
      remaining = newParts.join(' & ');
      break; // Apply only first matching rule
    }
  }
  
  // If no rules applied, return as quoted string
  if (parts.length === 0 && remaining === promptText) {
    return '"' + promptText.replace(/"/g, '""') + '"';
  }
  
  return remaining;
}

/**
 * Prepare Chain Smart - deprecated, keeping for compatibility
 */
/**
 * Prepare Chain Smart - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –ò–ó old/Main.txt —Å—Ç—Ä–æ–∫–∏ 460-476
 */
function prepareChainSmart() {
  var ss = SpreadsheetApp.getActive();
  var prompt = ss.getSheetByName('Prompt_box');
  var hasTargets = false;
  
  if (prompt) {
    var lastRow = Math.max(2, prompt.getLastRow());
    var vals = prompt.getRange(2, 2, lastRow - 1, 1).getDisplayValues(); // B2:B
    
    for (var i = 0; i < vals.length; i++) {
      if (String(vals[i][0] || '').trim()) {
        hasTargets = true;
        break;
      }
    }
  }
  
  if (hasTargets) {
    prepareChainFromPromptBox();
  } else {
    prepareChainForA3();
  }
}

/**
 * Prepare Chain From Prompt Box
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –ò–ó old/Main.txt —Å—Ç—Ä–æ–∫–∏ 478-521
 */
function prepareChainFromPromptBox() {
  var ss = SpreadsheetApp.getActive();
  var prompt = ss.getSheetByName('Prompt_box');
  var pack = ss.getSheetByName('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞');
  
  if (!prompt) {
    SpreadsheetApp.getUi().alert('–õ–∏—Å—Ç "Prompt_box" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  if (!pack) {
    SpreadsheetApp.getUi().alert('–õ–∏—Å—Ç "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  var lastRow = Math.max(2, prompt.getLastRow());
  var targets = prompt.getRange(2, 2, lastRow - 1, 1).getDisplayValues(); // B2:B ‚Äî —è—á–µ–π–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  var mappings = [];
  
  for (var r = 2; r <= lastRow; r++) {
    var targetStr = String(targets[r - 2][0] || '').trim();
    
    if (!targetStr) continue;
    
    try {
      var parsed = parseTargetA1(targetStr);
      mappings.push({
        promptRow: r,
        targetRow: parsed.row,
        targetCol: parsed.col,
        targetA1: parsed.a1
      });
    } catch (e) {
      addSystemLog('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ Prompt_box!B' + r + ': ' + e.message, 'WARN', 'CLIENT');
    }
  }
  
  if (!mappings.length) {
    SpreadsheetApp.getUi().alert('–ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —è—á–µ–µ–∫ –≤ Prompt_box!B, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.');
    return;
  }
  
  var phrase = getCompletionPhrase() || COMPLETION_PHRASE;
  var phraseEscaped = phrase.replace(/"/g, '""');
  
  for (var i = 0; i < mappings.length; i++) {
    var m = mappings[i];
    var cond;
    
    if (i === 0) {
      // –í—Å–µ–≥–¥–∞ —è–∫–æ—Ä—å –æ—Ç A3
      cond = '$A3<>""';
    } else {
      var prev = mappings[i - 1];
      cond = 'LEFT(' + prev.targetA1 + ', LEN("' + phraseEscaped + '"))="' + phraseEscaped + '"';
    }
    
    var formula = '=GM_IF(' + cond + ', Prompt_box!$F$' + m.promptRow + ', 25000, 0.7)';
    pack.getRange(m.targetRow, m.targetCol).setFormula(formula);
    
    addSystemLog('üìù –§–æ—Ä–º—É–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Üí –†–∞—Å–ø–∞–∫–æ–≤–∫–∞!' + m.targetA1 + ' –∏–∑ Prompt_box!F' + m.promptRow, 'INFO', 'CLIENT');
  }
  
  SpreadsheetApp.getUi().alert('‚úÖ –ì–æ—Ç–æ–≤–æ: —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Ü–µ–ª—è–º –∏–∑ Prompt_box!B.\\n–ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ A-—Å—Ç–æ–ª–±—Ü–∞, –¥–∞–ª–µ–µ ‚Äî –ø–æ —Ñ—Ä–∞–∑–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.');
}

/**
 * Prepare Chain For A3 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º B3..G3
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û –ò–ó old/Main.txt —Å—Ç—Ä–æ–∫–∏ 522-548
 */
function prepareChainForA3() {
  var ss = SpreadsheetApp.getActive();
  var sheet = ss.getSheetByName('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞');
  
  if (!sheet) {
    SpreadsheetApp.getUi().alert('–õ–∏—Å—Ç "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  var row = 3;
  var startCol = 2; // B
  var steps = 6;    // B..G
  var endCol = startCol + steps - 1;
  var phrase = getCompletionPhrase() || COMPLETION_PHRASE;
  var phraseEscaped = phrase.replace(/"/g, '""');
  
  for (var col = startCol; col <= endCol; col++) {
    var stepIndex = col - 1;       // B=1 -> —à–∞–≥ 1
    var promptRow = stepIndex + 1; // —à–∞–≥ 1 -> F2 ... —à–∞–≥ 6 -> F7
    var target = sheet.getRange(row, col);
    var promptRef = 'Prompt_box!$F$' + promptRow;
    var formula;
    
    if (col === 2) {
      formula = '=GM_IF($A3<>"", ' + promptRef + ', 25000, 0.7)';
    } else {
      var prevColLetter = columnToLetter(col - 1);
      formula = '=GM_IF(LEFT(' + prevColLetter + '3, LEN("' + phraseEscaped + '"))="' + phraseEscaped + '", ' + promptRef + ', 25000, 0.7)';
    }
    
    target.setFormula(formula);
    addSystemLog('üìù –§–æ—Ä–º—É–ª–∞ ' + target.getA1Notation() + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'DEBUG', 'CLIENT');
  }
  
  SpreadsheetApp.getUi().alert('‚úÖ –ì–æ—Ç–æ–≤–æ: —Ñ–æ—Ä–º—É–ª—ã B3..G3 –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.\\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ A3 ‚Äî —à–∞–≥–∏ –ø–æ–π–¥—É—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏.');
}

// clearChainForA3() - –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ

/**
 * Helper: Parse Target A1 notation
 */
function parseTargetA1(targetStr) {
  // Simple A1 notation parser
  var match = targetStr.match(/^([A-Z]+)(\d+)$/i);
  
  if (!match) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏: ' + targetStr);
  }
  
  var col = columnLetterToIndex(match[1]);
  var row = parseInt(match[2], 10);
  
  return {
    a1: match[0].toUpperCase(),
    col: col,
    row: row
  };
}

/**
 * Helper: Column letter to index (A=1, B=2, ...)
 */
function columnLetterToIndex(letter) {
  var col = 0;
  letter = letter.toUpperCase();
  
  for (var i = 0; i < letter.length; i++) {
    col = col * 26 + (letter.charCodeAt(i) - 64);
  }
  
  return col;
}

/**
 * Helper: Column index to letter (1=A, 2=B, ...)
 */
function columnToLetter(col) {
  var letter = '';
  
  while (col > 0) {
    var mod = (col - 1) % 26;
    letter = String.fromCharCode(65 + mod) + letter;
    col = Math.floor((col - mod) / 26);
  }
  
  return letter;
}

/**
 * Helper: Get completion phrase
 */
// getCompletionPhrase() - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ CompletionPhraseService.gs


/**
 * Refresh Current GM Cell - Force recalculation
 */
function refreshCurrentGMCell() {
  var range = SpreadsheetApp.getActiveRange();
  
  if (!range) {
    SpreadsheetApp.getUi().alert('–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É —Å —Ñ–æ—Ä–º—É–ª–æ–π GM');
    return;
  }
  
  var formula = range.getFormula();
  
  if (!formula || !formula.match(/^=GM(_STATIC|_IF)?\(/i)) {
    SpreadsheetApp.getUi().alert('–í—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É GM');
    return;
  }
  
  // Clear and re-set formula to force recalculation
  range.clearContent();
  SpreadsheetApp.flush();
  range.setFormula(formula);
  
  SpreadsheetApp.getUi().alert('‚úÖ –§–æ—Ä–º—É–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  
  logClient('GM cell refreshed: ' + range.getA1Notation());
}

/**
 * Init Gemini Key - Prompt for API key
 */
// initGeminiKey() - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ GeminiClient.gs


/**
 * Set Completion Phrase UI
 */
function setCompletionPhraseUI() {
  var ui = SpreadsheetApp.getUi();
  
  var result = ui.prompt('–§—Ä–∞–∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', '–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É —Å –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\\n\\n(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤")', ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) {
    return;
  }
  
  var phrase = result.getResponseText().trim();
  
  if (!phrase) {
    ui.alert('–§—Ä–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
    return;
  }
  
  // Save to Script Properties
  var props = PropertiesService.getScriptProperties();
  props.setProperty('COMPLETION_PHRASE', phrase);
  
  ui.alert('‚úÖ –§—Ä–∞–∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', '–ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: ' + phrase, ui.ButtonSet.OK);
  
  logClient('Completion phrase updated: ' + phrase);
}

/**
 * Clear Chain for A3
 */
function clearChainForA3() {
  var ss = SpreadsheetApp.getActive();
  var sheet = ss.getSheetByName('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞');
  
  if (!sheet) {
    SpreadsheetApp.getUi().alert('–õ–∏—Å—Ç "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // Clear B3:G3
  sheet.getRange('B3:G3').clearContent();
  
  SpreadsheetApp.getUi().alert('‚úÖ –û—á–∏—â–µ–Ω–æ', '–Ø—á–µ–π–∫–∏ B3:G3 –æ—á–∏—â–µ–Ω—ã');
  
  logClient('Chain cleared for A3');
}

/**
 * Cleanup Old Triggers - Remove stuck triggers
 */
// cleanupOldTriggers() - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ TriggerManager.gs


/**
 * Show Active Triggers Dialog
 */
function showActiveTriggersDialog() {
  var triggers = ScriptApp.getProjectTriggers();
  
  if (triggers.length === 0) {
    SpreadsheetApp.getUi().alert('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  var triggersList = triggers.map(function(trigger, index) {
    var handlerFunction = trigger.getHandlerFunction();
    var eventType = trigger.getEventType().toString();
    return (index + 1) + '. ' + handlerFunction + ' (' + eventType + ')';
  }).join('\\n');
  
  var message = '–í—Å–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: ' + triggers.length + '\\n\\n' + triggersList;
  
  SpreadsheetApp.getUi().alert('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', message, SpreadsheetApp.getUi().ButtonSet.OK);
}

/**
 * Open Web Interface
 */
function openWebInterface() {
  var ui = SpreadsheetApp.getUi();
  
  // Create web app HTML
  var html = HtmlService.createHtmlOutputFromFile('web/index')
    .setWidth(800)
    .setHeight(600)
    .setTitle('Table AI - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
  
  ui.showModalDialog(html, 'Table AI - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
}

/**
 * Server OCR Batch (gm_image action)
 * –ò–ó –°–¢–ê–†–û–ô –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò old/ocrRunV2_client.txt
 */
function serverGmOcrBatch_(images, lang) {
  var creds = getClientCredentials();
  if (!creds.ok) {
    throw new Error('Credentials error: ' + creds.error);
  }
  
  if (!Array.isArray(images) || images.length === 0) {
    throw new Error('NO_IMAGES');
  }
  
  var payload = {
    action: 'gm_image',
    email: creds.email,
    token: creds.token,
    apiKey: creds.apiKey,
    images: images,
    lang: lang || 'ru',
    delimiter: '____'
  };
  
  addSystemLog('‚Üí serverGmOcrBatch_: calling server with ' + images.length + ' images', 'DEBUG', 'OCR');
  
  var response = UrlFetchApp.fetch(SERVER_URL, {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  });
  
  var code = response.getResponseCode();
  var responseData = JSON.parse(response.getContentText());
  
  if (code !== 200 || !responseData.ok) {
    throw new Error(responseData.error || 'Server error: ' + code);
  }
  
  addSystemLog('‚Üê serverGmOcrBatch_: success, response length=' + (responseData.data ? responseData.data.length : 0), 'INFO', 'OCR');
  
  return responseData.data;
}

/**
 * Server Status Check (license validation)
 * –ò–ó –°–¢–ê–†–û–ô –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò old/Main.txt
 */
function serverStatus_() {
  var creds = getClientCredentials();
  if (!creds.ok) {
    return { ok: false, error: creds.error };
  }
  
  try {
    var response = UrlFetchApp.fetch(SERVER_URL, {
      method: 'POST',
      contentType: 'application/json',
      payload: JSON.stringify({
        action: 'status',
        email: creds.email,
        token: creds.token
      }),
      muteHttpExceptions: true
    });
    
    var code = response.getResponseCode();
    var data = JSON.parse(response.getContentText());
    
    if (code === 200 && data.ok !== undefined) {
      return data;
    }
    
    return { ok: false, error: 'Server returned ' + code };
    
  } catch (e) {
    return { ok: false, error: 'Server error: ' + e.message };
  }
}

/**
 * Get OCR Overwrite Flag
 * –ò–ó –°–¢–ê–†–û–ô –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò old/Main.txt
 */
function getOcrOverwrite_() {
  try {
    var ss = SpreadsheetApp.getActive();
    var params = ss.getSheetByName('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã');
    
    if (params) {
      var val = params.getRange('B7').getDisplayValue(); // OCR Overwrite —Ñ–ª–∞–≥
      return String(val).toLowerCase() === '–¥–∞' || String(val).toLowerCase() === 'yes';
    }
  } catch (e) {}
  
  return false;
}

/**
 * –ê–ª–∏–∞—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
 */
function importSocialPosts() {
  importSocialPostsClient();
}

/**
 * VK Token Validation Wrappers - –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –º–µ–Ω—é
 * –ö–†–ò–¢–ò–ß–ù–û: –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ù–ï –í–ò–î–ù–´ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é!
 */

/**
 * Show VK Token Diagnosis - wrapper –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */
function showVkTokenDiagnosis() {
  try {
    var creds = getClientCredentials();
    
    if (!creds.ok) {
      SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials –≤ –º–µ–Ω—é\\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîê –õ–∏—Ü–µ–Ω–∑–∏—è', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // Call server to diagnose VK token
    var response = callServer({
      action: 'vk_token_diagnosis',
      email: creds.email,
      token: creds.token
    });
    
    if (response.ok && response.data) {
      var diagnosis = response.data;
      
      var lines = [];
      lines.push('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê VK_TOKEN');
      lines.push('‚ïê'.repeat(45));
      lines.push('');
      lines.push('üìä –°–¢–ê–¢–£–°:');
      lines.push('‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + (diagnosis.exists ? '‚úÖ' : '‚ùå'));
      lines.push('‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–π: ' + (diagnosis.valid ? '‚úÖ' : '‚ùå'));
      lines.push('‚Ä¢ –ü—Ä–∞–≤–∞ wall: ' + (diagnosis.permissions && diagnosis.permissions.wall ? '‚úÖ' : '‚ùå'));
      lines.push('');
      
      if (diagnosis.errors && diagnosis.errors.length > 0) {
        lines.push('‚ùå –û–®–ò–ë–ö–ò:');
        diagnosis.errors.forEach(function(err) {
          lines.push('‚Ä¢ ' + err);
        });
        lines.push('');
      }
      
      if (diagnosis.warnings && diagnosis.warnings.length > 0) {
        lines.push('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
        diagnosis.warnings.forEach(function(warn) {
          lines.push('‚Ä¢ ' + warn);
        });
        lines.push('');
      }
      
      if (diagnosis.recommendations && diagnosis.recommendations.length > 0) {
        lines.push('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        diagnosis.recommendations.forEach(function(rec) {
          lines.push('‚Ä¢ ' + rec);
        });
      }
      
      SpreadsheetApp.getUi().alert('VK Token Diagnosis', lines.join('\\n'), SpreadsheetApp.getUi().ButtonSet.OK);
      
    } else {
      SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: ' + (response.error || 'Unknown error'), SpreadsheetApp.getUi().ButtonSet.OK);
    }
    
  } catch (e) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', e.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Check VK Token Validity - wrapper –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */
function checkVkTokenValidity() {
  try {
    var creds = getClientCredentials();
    
    if (!creds.ok) {
      SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials –≤ –º–µ–Ω—é\\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîê –õ–∏—Ü–µ–Ω–∑–∏—è', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    // Call server to validate VK token
    var response = callServer({
      action: 'vk_token_validate',
      email: creds.email,
      token: creds.token
    });
    
    if (response.ok && response.data) {
      var result = response.data;
      
      var report = [];
      report.push('üîç –ü–†–û–í–ï–†–ö–ê VK_TOKEN');
      report.push('‚ïê'.repeat(40));
      report.push('');
      
      if (result.valid) {
        report.push('‚úÖ –°–¢–ê–¢–£–°: –í–ê–õ–ò–î–ù–´–ô!');
        report.push('');
        report.push('üìä –î–ï–¢–ê–õ–ò:');
        report.push('‚Ä¢ –¢–æ–∫–µ–Ω: ' + (result.token || '—Å–∫—Ä—ã—Ç'));
        if (result.details) {
          report.push('‚Ä¢ HTTP Code: ' + result.details.httpCode);
          report.push('‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: users.get(id=1)');
          report.push('‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: ' + result.details.testUserName);
        }
        report.push('');
        if (result.details && result.details.recommendation) {
          report.push('üéâ ' + result.details.recommendation);
        }
        
      } else {
        report.push('‚ùå –°–¢–ê–¢–£–°: –ù–ï–í–ê–õ–ò–î–ù–´–ô!');
        report.push('');
        report.push('üî¥ –û–®–ò–ë–ö–ê:');
        report.push(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        report.push('');
        
        if (result.details) {
          report.push('üìã –î–ï–¢–ê–õ–ò:');
          report.push('‚Ä¢ –≠—Ç–∞–ø: ' + result.details.step);
          if (result.details.httpCode) {
            report.push('‚Ä¢ HTTP Code: ' + result.details.httpCode);
          }
          if (result.details.vkError) {
            report.push('‚Ä¢ VK Error: ' + result.details.vkError.error_code + ' - ' + result.details.vkError.error_msg);
          }
          report.push('');
          report.push('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
          report.push(result.details.recommendation || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VK_TOKEN');
        }
      }
      
      SpreadsheetApp.getUi().alert('VK Token Validation', report.join('\\n'), SpreadsheetApp.getUi().ButtonSet.OK);
      
    } else {
      SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω: ' + (response.error || 'Unknown error'), SpreadsheetApp.getUi().ButtonSet.OK);
    }
    
  } catch (e) {
    SpreadsheetApp.getUi().alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', e.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Smart Chain Functions
 */
function runSmartChain() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞', 
    '–£–º–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n\n' +
    '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n' +
    '‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏\n' +
    '‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤\n\n' +
    'üí° –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.',
    ui.ButtonSet.OK);
  addSystemLog('Smart chain execution requested', 'INFO', 'CHAIN');
}

function runChainCurrentRow() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('‚ö°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏', 
    '–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —è—á–µ–π–∫–∏:\n\n' +
    '‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n' +
    '‚Ä¢ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n' +
    '‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n' +
    'üí° –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.',
    ui.ButtonSet.OK);
  addSystemLog('Current row refresh requested', 'INFO', 'CHAIN');
}
