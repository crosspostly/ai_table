/**
 * Credentials Manager
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ª–∏—Ü–µ–Ω–∑–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
 * –ë–µ–∑ —ç—Ç–æ–≥–æ GM —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ email –ª–∏—Ü–µ–Ω–∑–∏–∏
 */
function getLicenseEmail() {
  return PropertiesService.getScriptProperties().getProperty('LICENSE_EMAIL') || '';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
 */
function getLicenseToken() {
  return PropertiesService.getScriptProperties().getProperty('LICENSE_TOKEN') || '';
}

/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (credentials)
 * –í–û–ó–í–†–ê–©–ï–ù–û –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò!
 * –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * 
 * –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ –ù–ï —Ç—Ä–µ–±—É–µ—Ç GEMINI_API_KEY (—Ç–æ–ª—å–∫–æ email –∏ token)
 * GEMINI_API_KEY —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è AI-—Ñ—É–Ω–∫—Ü–∏–π (GM, GM_STATIC –∏ —Ç.–¥.)
 */
function getClientCredentials() {
  var email = getLicenseEmail();
  var token = getLicenseToken();
  var apiKey = '';
  
  try {
    apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY') || '';
  } catch (e) {
    // Ignore
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û email –∏ token (–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ credentials)
  // GEMINI_API_KEY –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è AI-—Ñ—É–Ω–∫—Ü–∏–π
  if (!email || !token) {
    return {
      ok: false,
      valid: false,  // Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ThinClient
      error: 'License credentials not set (email or token missing)',
      email: email,
      token: token ? '***' + token.slice(-4) : '',
      apiKey: apiKey ? '***' + apiKey.slice(-4) : '',
      geminiApiKey: apiKey ? '***' + apiKey.slice(-4) : ''  // Alias –¥–ª—è ThinClient
    };
  }
  
  // –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  return {
    ok: true,
    valid: true,  // Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ThinClient –∏ —Ç–µ—Å—Ç–∞–º–∏
    email: email,
    token: token,
    apiKey: apiKey,
    geminiApiKey: apiKey  // Alias –¥–ª—è ThinClient
  };
}

/**
 * UI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
 */
function setLicenseCredentialsUI() {
  var ui = SpreadsheetApp.getUi();
  var curEmail = getLicenseEmail();
  var curToken = getLicenseToken();
  
  var emailRes = ui.prompt('üîê –õ–∏—Ü–µ–Ω–∑–∏—è ‚Äî Email', 
                          '–í–≤–µ–¥–∏—Ç–µ Email (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏). –¢–µ–∫—É—â–∏–π: ' + (curEmail || '‚Äî'), 
                          ui.ButtonSet.OK_CANCEL);
  
  if (emailRes.getSelectedButton() !== ui.Button.OK) return;
  
  var email = (emailRes.getResponseText() || '').trim();
  
  var tokenRes = ui.prompt('üîê –õ–∏—Ü–µ–Ω–∑–∏—è ‚Äî –¢–æ–∫–µ–Ω', 
                          '–í–≤–µ–¥–∏—Ç–µ –¢–æ–∫–µ–Ω (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ü–µ–Ω–∑–∏–π). –¢–µ–∫—É—â–∏–π: ' + (curToken ? (curToken.substring(0,4)+'****') : '‚Äî'), 
                          ui.ButtonSet.OK_CANCEL);
  
  if (tokenRes.getSelectedButton() !== ui.Button.OK) return;
  
  var token = (tokenRes.getResponseText() || '').trim();
  
  if (!email || !token) {
    ui.alert('Email –∏ –¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.');
    return;
  }
  
  PropertiesService.getScriptProperties().setProperty('LICENSE_EMAIL', email);
  PropertiesService.getScriptProperties().setProperty('LICENSE_TOKEN', token);
  
  ui.alert('‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
  addSystemLog('License credentials updated: email=' + email, 'INFO', 'LICENSE');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
function serverStatus_() {
  var email = getLicenseEmail();
  var token = getLicenseToken();
  
  var payload = { 
    action: 'status', 
    email: email, 
    token: token 
  };
  
  var options = { 
    method: 'post', 
    contentType: 'application/json', 
    payload: JSON.stringify(payload), 
    muteHttpExceptions: true 
  };
  
  try {
    var resp = UrlFetchApp.fetch(SERVER_API_URL, options);
    var code = resp.getResponseCode();
    var data = JSON.parse(resp.getContentText());
    
    if (code !== 200) {
      return { 
        ok: false, 
        error: (data && data.error) || ('HTTP_' + code) 
      };
    }
    
    return data;
    
  } catch (e) {
    return { 
      ok: false, 
      error: 'Server connection failed: ' + e.message 
    };
  }
}

/**
 * UI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
 */
function checkLicenseStatusUI() {
  try {
    var st = serverStatus_();
    if (st.ok) {
      SpreadsheetApp.getUi().alert('–õ–∏—Ü–µ–Ω–∑–∏—è', 
                                   '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' + (st.until ? (' –¥–æ ' + st.until) : ''), 
                                   SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      SpreadsheetApp.getUi().alert('–õ–∏—Ü–µ–Ω–∑–∏—è', 
                                   '‚ùå ' + (st.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 
                                   SpreadsheetApp.getUi().ButtonSet.OK);
    }
  } catch (e) {
    SpreadsheetApp.getUi().alert('–õ–∏—Ü–µ–Ω–∑–∏—è', 
                                 '–û—à–∏–±–∫–∞: ' + e.message, 
                                 SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * –ö–†–ò–¢–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–µ—Ä–µ–¥ GM –∑–∞–ø—Ä–æ—Å–∞–º–∏
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò!
 */
function validateLicenseForGM() {
  try {
    var email = getLicenseEmail();
    var token = getLicenseToken();
    
    if (!email || !token) {
      addSystemLog('üö´ GM –æ—Ç–∫–∞–∑: –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞ (email/token –ø—É—Å—Ç—ã–µ)', 'WARN', 'LICENSE');
      return {
        ok: false,
        error: 'LICENSE_REQUIRED: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é ü§ñ Table AI ‚Üí ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí üîê –õ–∏—Ü–µ–Ω–∑–∏—è'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    var st = serverStatus_();
    if (!st || !st.ok) {
      addSystemLog('üö´ GM –æ—Ç–∫–∞–∑: –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'WARN', 'LICENSE');
      return {
        ok: false,
        error: 'LICENSE_OR_SERVER: ' + (st ? st.error : 'Server unreachable')
      };
    }
    
    return { ok: true };
    
  } catch (e) {
    addSystemLog('üö´ GM –æ—Ç–∫–∞–∑: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: ' + e.message, 'WARN', 'LICENSE');
    return {
      ok: false,
      error: 'LICENSE_CHECK_FAILED: ' + e.message
    };
  }
}

/**
 * –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è GM –∑–∞–ø—Ä–æ—Å–æ–≤
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò!
 */
function serverGM_(prompt, maxTokens, temperature) {
  var email = getLicenseEmail();
  var token = getLicenseToken();
  var apiKey = '';
  
  try {
    apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY') || '';
  } catch (e) {
    throw new Error('Gemini API key not set');
  }
  
  if (!apiKey) {
    throw new Error('NO_CLIENT_KEY');
  }
  
  var payload = { 
    action: 'gm', 
    email: email, 
    token: token, 
    apiKey: apiKey, 
    prompt: prompt, 
    maxTokens: maxTokens, 
    temperature: temperature 
  };
  
  var options = { 
    method: 'post', 
    contentType: 'application/json', 
    payload: JSON.stringify(payload), 
    muteHttpExceptions: true 
  };
  
  try {
    var resp = UrlFetchApp.fetch(SERVER_API_URL, options);
    var code = resp.getResponseCode();
    var data = JSON.parse(resp.getContentText());
    
    if (code !== 200) {
      return { 
        ok: false, 
        error: (data && data.error) || ('HTTP_' + code) 
      };
    }
    
    return data;
    
  } catch (e) {
    return { 
      ok: false, 
      error: 'Server request failed: ' + e.message 
    };
  }
}